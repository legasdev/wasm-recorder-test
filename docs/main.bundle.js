"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkwasm_recorder_test"] = self["webpackChunkwasm_recorder_test"] || []).push([["main"],{

/***/ "./node_modules/recordrtc/RecordRTC.js":
/*!*********************************************!*\
  !*** ./node_modules/recordrtc/RecordRTC.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\r\n\r\n// Last time updated: 2021-03-09 3:20:22 AM UTC\r\n\r\n// ________________\r\n// RecordRTC v5.6.2\r\n\r\n// Open-Sourced: https://github.com/muaz-khan/RecordRTC\r\n\r\n// --------------------------------------------------\r\n// Muaz Khan     - www.MuazKhan.com\r\n// MIT License   - www.WebRTC-Experiment.com/licence\r\n// --------------------------------------------------\r\n\r\n// ____________\r\n// RecordRTC.js\r\n\r\n/**\r\n * {@link https://github.com/muaz-khan/RecordRTC|RecordRTC} is a WebRTC JavaScript library for audio/video as well as screen activity recording. It supports Chrome, Firefox, Opera, Android, and Microsoft Edge. Platforms: Linux, Mac and Windows. \r\n * @summary Record audio, video or screen inside the browser.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTC\r\n * @class\r\n * @example\r\n * var recorder = RecordRTC(mediaStream or [arrayOfMediaStream], {\r\n *     type: 'video', // audio or video or gif or canvas\r\n *     recorderType: MediaStreamRecorder || CanvasRecorder || StereoAudioRecorder || Etc\r\n * });\r\n * recorder.startRecording();\r\n * @see For further information:\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\r\n * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, desiredSampRate: 16000, video: HTMLVideoElement, etc.}\r\n */\r\n\r\nfunction RecordRTC(mediaStream, config) {\r\n    if (!mediaStream) {\r\n        throw 'First parameter is required.';\r\n    }\r\n\r\n    config = config || {\r\n        type: 'video'\r\n    };\r\n\r\n    config = new RecordRTCConfiguration(mediaStream, config);\r\n\r\n    // a reference to user's recordRTC object\r\n    var self = this;\r\n\r\n    function startRecording(config2) {\r\n        if (!config.disableLogs) {\r\n            console.log('RecordRTC version: ', self.version);\r\n        }\r\n\r\n        if (!!config2) {\r\n            // allow users to set options using startRecording method\r\n            // config2 is similar to main \"config\" object (second parameter over RecordRTC constructor)\r\n            config = new RecordRTCConfiguration(mediaStream, config2);\r\n        }\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('started recording ' + config.type + ' stream.');\r\n        }\r\n\r\n        if (mediaRecorder) {\r\n            mediaRecorder.clearRecordedData();\r\n            mediaRecorder.record();\r\n\r\n            setState('recording');\r\n\r\n            if (self.recordingDuration) {\r\n                handleRecordingDuration();\r\n            }\r\n            return self;\r\n        }\r\n\r\n        initRecorder(function() {\r\n            if (self.recordingDuration) {\r\n                handleRecordingDuration();\r\n            }\r\n        });\r\n\r\n        return self;\r\n    }\r\n\r\n    function initRecorder(initCallback) {\r\n        if (initCallback) {\r\n            config.initCallback = function() {\r\n                initCallback();\r\n                initCallback = config.initCallback = null; // recorder.initRecorder should be call-backed once.\r\n            };\r\n        }\r\n\r\n        var Recorder = new GetRecorderType(mediaStream, config);\r\n\r\n        mediaRecorder = new Recorder(mediaStream, config);\r\n        mediaRecorder.record();\r\n\r\n        setState('recording');\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Initialized recorderType:', mediaRecorder.constructor.name, 'for output-type:', config.type);\r\n        }\r\n    }\r\n\r\n    function stopRecording(callback) {\r\n        callback = callback || function() {};\r\n\r\n        if (!mediaRecorder) {\r\n            warningLog();\r\n            return;\r\n        }\r\n\r\n        if (self.state === 'paused') {\r\n            self.resumeRecording();\r\n\r\n            setTimeout(function() {\r\n                stopRecording(callback);\r\n            }, 1);\r\n            return;\r\n        }\r\n\r\n        if (self.state !== 'recording' && !config.disableLogs) {\r\n            console.warn('Recording state should be: \"recording\", however current state is: ', self.state);\r\n        }\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Stopped recording ' + config.type + ' stream.');\r\n        }\r\n\r\n        if (config.type !== 'gif') {\r\n            mediaRecorder.stop(_callback);\r\n        } else {\r\n            mediaRecorder.stop();\r\n            _callback();\r\n        }\r\n\r\n        setState('stopped');\r\n\r\n        function _callback(__blob) {\r\n            if (!mediaRecorder) {\r\n                if (typeof callback.call === 'function') {\r\n                    callback.call(self, '');\r\n                } else {\r\n                    callback('');\r\n                }\r\n                return;\r\n            }\r\n\r\n            Object.keys(mediaRecorder).forEach(function(key) {\r\n                if (typeof mediaRecorder[key] === 'function') {\r\n                    return;\r\n                }\r\n\r\n                self[key] = mediaRecorder[key];\r\n            });\r\n\r\n            var blob = mediaRecorder.blob;\r\n\r\n            if (!blob) {\r\n                if (__blob) {\r\n                    mediaRecorder.blob = blob = __blob;\r\n                } else {\r\n                    throw 'Recording failed.';\r\n                }\r\n            }\r\n\r\n            if (blob && !config.disableLogs) {\r\n                console.log(blob.type, '->', bytesToSize(blob.size));\r\n            }\r\n\r\n            if (callback) {\r\n                var url;\r\n\r\n                try {\r\n                    url = URL.createObjectURL(blob);\r\n                } catch (e) {}\r\n\r\n                if (typeof callback.call === 'function') {\r\n                    callback.call(self, url);\r\n                } else {\r\n                    callback(url);\r\n                }\r\n            }\r\n\r\n            if (!config.autoWriteToDisk) {\r\n                return;\r\n            }\r\n\r\n            getDataURL(function(dataURL) {\r\n                var parameter = {};\r\n                parameter[config.type + 'Blob'] = dataURL;\r\n                DiskStorage.Store(parameter);\r\n            });\r\n        }\r\n    }\r\n\r\n    function pauseRecording() {\r\n        if (!mediaRecorder) {\r\n            warningLog();\r\n            return;\r\n        }\r\n\r\n        if (self.state !== 'recording') {\r\n            if (!config.disableLogs) {\r\n                console.warn('Unable to pause the recording. Recording state: ', self.state);\r\n            }\r\n            return;\r\n        }\r\n\r\n        setState('paused');\r\n\r\n        mediaRecorder.pause();\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Paused recording.');\r\n        }\r\n    }\r\n\r\n    function resumeRecording() {\r\n        if (!mediaRecorder) {\r\n            warningLog();\r\n            return;\r\n        }\r\n\r\n        if (self.state !== 'paused') {\r\n            if (!config.disableLogs) {\r\n                console.warn('Unable to resume the recording. Recording state: ', self.state);\r\n            }\r\n            return;\r\n        }\r\n\r\n        setState('recording');\r\n\r\n        // not all libs have this method yet\r\n        mediaRecorder.resume();\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Resumed recording.');\r\n        }\r\n    }\r\n\r\n    function readFile(_blob) {\r\n        postMessage(new FileReaderSync().readAsDataURL(_blob));\r\n    }\r\n\r\n    function getDataURL(callback, _mediaRecorder) {\r\n        if (!callback) {\r\n            throw 'Pass a callback function over getDataURL.';\r\n        }\r\n\r\n        var blob = _mediaRecorder ? _mediaRecorder.blob : (mediaRecorder || {}).blob;\r\n\r\n        if (!blob) {\r\n            if (!config.disableLogs) {\r\n                console.warn('Blob encoder did not finish its job yet.');\r\n            }\r\n\r\n            setTimeout(function() {\r\n                getDataURL(callback, _mediaRecorder);\r\n            }, 1000);\r\n            return;\r\n        }\r\n\r\n        if (typeof Worker !== 'undefined' && !navigator.mozGetUserMedia) {\r\n            var webWorker = processInWebWorker(readFile);\r\n\r\n            webWorker.onmessage = function(event) {\r\n                callback(event.data);\r\n            };\r\n\r\n            webWorker.postMessage(blob);\r\n        } else {\r\n            var reader = new FileReader();\r\n            reader.readAsDataURL(blob);\r\n            reader.onload = function(event) {\r\n                callback(event.target.result);\r\n            };\r\n        }\r\n\r\n        function processInWebWorker(_function) {\r\n            try {\r\n                var blob = URL.createObjectURL(new Blob([_function.toString(),\r\n                    'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\r\n                ], {\r\n                    type: 'application/javascript'\r\n                }));\r\n\r\n                var worker = new Worker(blob);\r\n                URL.revokeObjectURL(blob);\r\n                return worker;\r\n            } catch (e) {}\r\n        }\r\n    }\r\n\r\n    function handleRecordingDuration(counter) {\r\n        counter = counter || 0;\r\n\r\n        if (self.state === 'paused') {\r\n            setTimeout(function() {\r\n                handleRecordingDuration(counter);\r\n            }, 1000);\r\n            return;\r\n        }\r\n\r\n        if (self.state === 'stopped') {\r\n            return;\r\n        }\r\n\r\n        if (counter >= self.recordingDuration) {\r\n            stopRecording(self.onRecordingStopped);\r\n            return;\r\n        }\r\n\r\n        counter += 1000; // 1-second\r\n\r\n        setTimeout(function() {\r\n            handleRecordingDuration(counter);\r\n        }, 1000);\r\n    }\r\n\r\n    function setState(state) {\r\n        if (!self) {\r\n            return;\r\n        }\r\n\r\n        self.state = state;\r\n\r\n        if (typeof self.onStateChanged.call === 'function') {\r\n            self.onStateChanged.call(self, state);\r\n        } else {\r\n            self.onStateChanged(state);\r\n        }\r\n    }\r\n\r\n    var WARNING = 'It seems that recorder is destroyed or \"startRecording\" is not invoked for ' + config.type + ' recorder.';\r\n\r\n    function warningLog() {\r\n        if (config.disableLogs === true) {\r\n            return;\r\n        }\r\n\r\n        console.warn(WARNING);\r\n    }\r\n\r\n    var mediaRecorder;\r\n\r\n    var returnObject = {\r\n        /**\r\n         * This method starts the recording.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * var recorder = RecordRTC(mediaStream, {\r\n         *     type: 'video'\r\n         * });\r\n         * recorder.startRecording();\r\n         */\r\n        startRecording: startRecording,\r\n\r\n        /**\r\n         * This method stops the recording. It is strongly recommended to get \"blob\" or \"URI\" inside the callback to make sure all recorders finished their job.\r\n         * @param {function} callback - Callback to get the recorded blob.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     // use either \"this\" or \"recorder\" object; both are identical\r\n         *     video.src = this.toURL();\r\n         *     var blob = this.getBlob();\r\n         * });\r\n         */\r\n        stopRecording: stopRecording,\r\n\r\n        /**\r\n         * This method pauses the recording. You can resume recording using \"resumeRecording\" method.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo Firefox is unable to pause the recording. Fix it.\r\n         * @example\r\n         * recorder.pauseRecording();  // pause the recording\r\n         * recorder.resumeRecording(); // resume again\r\n         */\r\n        pauseRecording: pauseRecording,\r\n\r\n        /**\r\n         * This method resumes the recording.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.pauseRecording();  // first of all, pause the recording\r\n         * recorder.resumeRecording(); // now resume it\r\n         */\r\n        resumeRecording: resumeRecording,\r\n\r\n        /**\r\n         * This method initializes the recording.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo This method should be deprecated.\r\n         * @example\r\n         * recorder.initRecorder();\r\n         */\r\n        initRecorder: initRecorder,\r\n\r\n        /**\r\n         * Ask RecordRTC to auto-stop the recording after 5 minutes.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * var fiveMinutes = 5 * 1000 * 60;\r\n         * recorder.setRecordingDuration(fiveMinutes, function() {\r\n         *    var blob = this.getBlob();\r\n         *    video.src = this.toURL();\r\n         * });\r\n         * \r\n         * // or otherwise\r\n         * recorder.setRecordingDuration(fiveMinutes).onRecordingStopped(function() {\r\n         *    var blob = this.getBlob();\r\n         *    video.src = this.toURL();\r\n         * });\r\n         */\r\n        setRecordingDuration: function(recordingDuration, callback) {\r\n            if (typeof recordingDuration === 'undefined') {\r\n                throw 'recordingDuration is required.';\r\n            }\r\n\r\n            if (typeof recordingDuration !== 'number') {\r\n                throw 'recordingDuration must be a number.';\r\n            }\r\n\r\n            self.recordingDuration = recordingDuration;\r\n            self.onRecordingStopped = callback || function() {};\r\n\r\n            return {\r\n                onRecordingStopped: function(callback) {\r\n                    self.onRecordingStopped = callback;\r\n                }\r\n            };\r\n        },\r\n\r\n        /**\r\n         * This method can be used to clear/reset all the recorded data.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo Figure out the difference between \"reset\" and \"clearRecordedData\" methods.\r\n         * @example\r\n         * recorder.clearRecordedData();\r\n         */\r\n        clearRecordedData: function() {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            mediaRecorder.clearRecordedData();\r\n\r\n            if (!config.disableLogs) {\r\n                console.log('Cleared old recorded data.');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get the recorded blob. Use this method inside the \"stopRecording\" callback.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     var blob = this.getBlob();\r\n         *\r\n         *     var file = new File([blob], 'filename.webm', {\r\n         *         type: 'video/webm'\r\n         *     });\r\n         *\r\n         *     var formData = new FormData();\r\n         *     formData.append('file', file); // upload \"File\" object rather than a \"Blob\"\r\n         *     uploadToServer(formData);\r\n         * });\r\n         * @returns {Blob} Returns recorded data as \"Blob\" object.\r\n         */\r\n        getBlob: function() {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            return mediaRecorder.blob;\r\n        },\r\n\r\n        /**\r\n         * Get data-URI instead of Blob.\r\n         * @param {function} callback - Callback to get the Data-URI.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     recorder.getDataURL(function(dataURI) {\r\n         *         video.src = dataURI;\r\n         *     });\r\n         * });\r\n         */\r\n        getDataURL: getDataURL,\r\n\r\n        /**\r\n         * Get virtual/temporary URL. Usage of this URL is limited to current tab.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     video.src = this.toURL();\r\n         * });\r\n         * @returns {String} Returns a virtual/temporary URL for the recorded \"Blob\".\r\n         */\r\n        toURL: function() {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            return URL.createObjectURL(mediaRecorder.blob);\r\n        },\r\n\r\n        /**\r\n         * Get internal recording object (i.e. internal module) e.g. MutliStreamRecorder, MediaStreamRecorder, StereoAudioRecorder or WhammyRecorder etc.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * var internalRecorder = recorder.getInternalRecorder();\r\n         * if(internalRecorder instanceof MultiStreamRecorder) {\r\n         *     internalRecorder.addStreams([newAudioStream]);\r\n         *     internalRecorder.resetVideoStreams([screenStream]);\r\n         * }\r\n         * @returns {Object} Returns internal recording object.\r\n         */\r\n        getInternalRecorder: function() {\r\n            return mediaRecorder;\r\n        },\r\n\r\n        /**\r\n         * Invoke save-as dialog to save the recorded blob into your disk.\r\n         * @param {string} fileName - Set your own file name.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     this.save('file-name');\r\n         *\r\n         *     // or manually:\r\n         *     invokeSaveAsDialog(this.getBlob(), 'filename.webm');\r\n         * });\r\n         */\r\n        save: function(fileName) {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            invokeSaveAsDialog(mediaRecorder.blob, fileName);\r\n        },\r\n\r\n        /**\r\n         * This method gets a blob from indexed-DB storage.\r\n         * @param {function} callback - Callback to get the recorded blob.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.getFromDisk(function(dataURL) {\r\n         *     video.src = dataURL;\r\n         * });\r\n         */\r\n        getFromDisk: function(callback) {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            RecordRTC.getFromDisk(config.type, callback);\r\n        },\r\n\r\n        /**\r\n         * This method appends an array of webp images to the recorded video-blob. It takes an \"array\" object.\r\n         * @type {Array.<Array>}\r\n         * @param {Array} arrayOfWebPImages - Array of webp images.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo This method should be deprecated.\r\n         * @example\r\n         * var arrayOfWebPImages = [];\r\n         * arrayOfWebPImages.push({\r\n         *     duration: index,\r\n         *     image: 'data:image/webp;base64,...'\r\n         * });\r\n         * recorder.setAdvertisementArray(arrayOfWebPImages);\r\n         */\r\n        setAdvertisementArray: function(arrayOfWebPImages) {\r\n            config.advertisement = [];\r\n\r\n            var length = arrayOfWebPImages.length;\r\n            for (var i = 0; i < length; i++) {\r\n                config.advertisement.push({\r\n                    duration: i,\r\n                    image: arrayOfWebPImages[i]\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * It is equivalent to <code class=\"str\">\"recorder.getBlob()\"</code> method. Usage of \"getBlob\" is recommended, though.\r\n         * @property {Blob} blob - Recorded Blob can be accessed using this property.\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     var blob = this.blob;\r\n         *\r\n         *     // below one is recommended\r\n         *     var blob = this.getBlob();\r\n         * });\r\n         */\r\n        blob: null,\r\n\r\n        /**\r\n         * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\r\n         * @property {number} bufferSize - Buffer-size used to encode the WAV container\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     alert('Recorder used this buffer-size: ' + this.bufferSize);\r\n         * });\r\n         */\r\n        bufferSize: 0,\r\n\r\n        /**\r\n         * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\r\n         * @property {number} sampleRate - Sample-rates used to encode the WAV container\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     alert('Recorder used these sample-rates: ' + this.sampleRate);\r\n         * });\r\n         */\r\n        sampleRate: 0,\r\n\r\n        /**\r\n         * {recorderType:StereoAudioRecorder} returns ArrayBuffer object.\r\n         * @property {ArrayBuffer} buffer - Audio ArrayBuffer, supported only in Chrome.\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     var arrayBuffer = this.buffer;\r\n         *     alert(arrayBuffer.byteLength);\r\n         * });\r\n         */\r\n        buffer: null,\r\n\r\n        /**\r\n         * This method resets the recorder. So that you can reuse single recorder instance many times.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.reset();\r\n         * recorder.startRecording();\r\n         */\r\n        reset: function() {\r\n            if (self.state === 'recording' && !config.disableLogs) {\r\n                console.warn('Stop an active recorder.');\r\n            }\r\n\r\n            if (mediaRecorder && typeof mediaRecorder.clearRecordedData === 'function') {\r\n                mediaRecorder.clearRecordedData();\r\n            }\r\n            mediaRecorder = null;\r\n            setState('inactive');\r\n            self.blob = null;\r\n        },\r\n\r\n        /**\r\n         * This method is called whenever recorder's state changes. Use this as an \"event\".\r\n         * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.onStateChanged = function(state) {\r\n         *     console.log('Recorder state: ', state);\r\n         * };\r\n         */\r\n        onStateChanged: function(state) {\r\n            if (!config.disableLogs) {\r\n                console.log('Recorder state changed:', state);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * A recorder can have inactive, recording, paused or stopped states.\r\n         * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\r\n         * @memberof RecordRTC\r\n         * @static\r\n         * @readonly\r\n         * @example\r\n         * // this looper function will keep you updated about the recorder's states.\r\n         * (function looper() {\r\n         *     document.querySelector('h1').innerHTML = 'Recorder\\'s state is: ' + recorder.state;\r\n         *     if(recorder.state === 'stopped') return; // ignore+stop\r\n         *     setTimeout(looper, 1000); // update after every 3-seconds\r\n         * })();\r\n         * recorder.startRecording();\r\n         */\r\n        state: 'inactive',\r\n\r\n        /**\r\n         * Get recorder's readonly state.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @example\r\n         * var state = recorder.getState();\r\n         * @returns {String} Returns recording state.\r\n         */\r\n        getState: function() {\r\n            return self.state;\r\n        },\r\n\r\n        /**\r\n         * Destroy RecordRTC instance. Clear all recorders and objects.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @example\r\n         * recorder.destroy();\r\n         */\r\n        destroy: function() {\r\n            var disableLogsCache = config.disableLogs;\r\n\r\n            config = {\r\n                disableLogs: true\r\n            };\r\n            self.reset();\r\n            setState('destroyed');\r\n            returnObject = self = null;\r\n\r\n            if (Storage.AudioContextConstructor) {\r\n                Storage.AudioContextConstructor.close();\r\n                Storage.AudioContextConstructor = null;\r\n            }\r\n\r\n            config.disableLogs = disableLogsCache;\r\n\r\n            if (!config.disableLogs) {\r\n                console.log('RecordRTC is destroyed.');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * RecordRTC version number\r\n         * @property {String} version - Release version number.\r\n         * @memberof RecordRTC\r\n         * @static\r\n         * @readonly\r\n         * @example\r\n         * alert(recorder.version);\r\n         */\r\n        version: '5.6.2'\r\n    };\r\n\r\n    if (!this) {\r\n        self = returnObject;\r\n        return returnObject;\r\n    }\r\n\r\n    // if someone wants to use RecordRTC with the \"new\" keyword.\r\n    for (var prop in returnObject) {\r\n        this[prop] = returnObject[prop];\r\n    }\r\n\r\n    self = this;\r\n\r\n    return returnObject;\r\n}\r\n\r\nRecordRTC.version = '5.6.2';\r\n\r\nif (true /* && !!module.exports*/ ) {\r\n    module.exports = RecordRTC;\r\n}\r\n\r\nif (true) {\r\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\r\n        return RecordRTC;\r\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n}\r\n\r\nRecordRTC.getFromDisk = function(type, callback) {\r\n    if (!callback) {\r\n        throw 'callback is mandatory.';\r\n    }\r\n\r\n    console.log('Getting recorded ' + (type === 'all' ? 'blobs' : type + ' blob ') + ' from disk!');\r\n    DiskStorage.Fetch(function(dataURL, _type) {\r\n        if (type !== 'all' && _type === type + 'Blob' && callback) {\r\n            callback(dataURL);\r\n        }\r\n\r\n        if (type === 'all' && callback) {\r\n            callback(dataURL, _type.replace('Blob', ''));\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * This method can be used to store recorded blobs into IndexedDB storage.\r\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\r\n * @method\r\n * @memberof RecordRTC\r\n * @example\r\n * RecordRTC.writeToDisk({\r\n *     audio: audioBlob,\r\n *     video: videoBlob,\r\n *     gif  : gifBlob\r\n * });\r\n */\r\nRecordRTC.writeToDisk = function(options) {\r\n    console.log('Writing recorded blob(s) to disk!');\r\n    options = options || {};\r\n    if (options.audio && options.video && options.gif) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            options.video.getDataURL(function(videoDataURL) {\r\n                options.gif.getDataURL(function(gifDataURL) {\r\n                    DiskStorage.Store({\r\n                        audioBlob: audioDataURL,\r\n                        videoBlob: videoDataURL,\r\n                        gifBlob: gifDataURL\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    } else if (options.audio && options.video) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            options.video.getDataURL(function(videoDataURL) {\r\n                DiskStorage.Store({\r\n                    audioBlob: audioDataURL,\r\n                    videoBlob: videoDataURL\r\n                });\r\n            });\r\n        });\r\n    } else if (options.audio && options.gif) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            options.gif.getDataURL(function(gifDataURL) {\r\n                DiskStorage.Store({\r\n                    audioBlob: audioDataURL,\r\n                    gifBlob: gifDataURL\r\n                });\r\n            });\r\n        });\r\n    } else if (options.video && options.gif) {\r\n        options.video.getDataURL(function(videoDataURL) {\r\n            options.gif.getDataURL(function(gifDataURL) {\r\n                DiskStorage.Store({\r\n                    videoBlob: videoDataURL,\r\n                    gifBlob: gifDataURL\r\n                });\r\n            });\r\n        });\r\n    } else if (options.audio) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            DiskStorage.Store({\r\n                audioBlob: audioDataURL\r\n            });\r\n        });\r\n    } else if (options.video) {\r\n        options.video.getDataURL(function(videoDataURL) {\r\n            DiskStorage.Store({\r\n                videoBlob: videoDataURL\r\n            });\r\n        });\r\n    } else if (options.gif) {\r\n        options.gif.getDataURL(function(gifDataURL) {\r\n            DiskStorage.Store({\r\n                gifBlob: gifDataURL\r\n            });\r\n        });\r\n    }\r\n};\r\n\r\n// __________________________\r\n// RecordRTC-Configuration.js\r\n\r\n/**\r\n * {@link RecordRTCConfiguration} is an inner/private helper for {@link RecordRTC}.\r\n * @summary It configures the 2nd parameter passed over {@link RecordRTC} and returns a valid \"config\" object.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTCConfiguration\r\n * @class\r\n * @example\r\n * var options = RecordRTCConfiguration(mediaStream, options);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, getNativeBlob:true, etc.}\r\n */\r\n\r\nfunction RecordRTCConfiguration(mediaStream, config) {\r\n    if (!config.recorderType && !config.type) {\r\n        if (!!config.audio && !!config.video) {\r\n            config.type = 'video';\r\n        } else if (!!config.audio && !config.video) {\r\n            config.type = 'audio';\r\n        }\r\n    }\r\n\r\n    if (config.recorderType && !config.type) {\r\n        if (config.recorderType === WhammyRecorder || config.recorderType === CanvasRecorder || (typeof WebAssemblyRecorder !== 'undefined' && config.recorderType === WebAssemblyRecorder)) {\r\n            config.type = 'video';\r\n        } else if (config.recorderType === GifRecorder) {\r\n            config.type = 'gif';\r\n        } else if (config.recorderType === StereoAudioRecorder) {\r\n            config.type = 'audio';\r\n        } else if (config.recorderType === MediaStreamRecorder) {\r\n            if (getTracks(mediaStream, 'audio').length && getTracks(mediaStream, 'video').length) {\r\n                config.type = 'video';\r\n            } else if (!getTracks(mediaStream, 'audio').length && getTracks(mediaStream, 'video').length) {\r\n                config.type = 'video';\r\n            } else if (getTracks(mediaStream, 'audio').length && !getTracks(mediaStream, 'video').length) {\r\n                config.type = 'audio';\r\n            } else {\r\n                // config.type = 'UnKnown';\r\n            }\r\n        }\r\n    }\r\n\r\n    if (typeof MediaStreamRecorder !== 'undefined' && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\r\n        if (!config.mimeType) {\r\n            config.mimeType = 'video/webm';\r\n        }\r\n\r\n        if (!config.type) {\r\n            config.type = config.mimeType.split('/')[0];\r\n        }\r\n\r\n        if (!config.bitsPerSecond) {\r\n            // config.bitsPerSecond = 128000;\r\n        }\r\n    }\r\n\r\n    // consider default type=audio\r\n    if (!config.type) {\r\n        if (config.mimeType) {\r\n            config.type = config.mimeType.split('/')[0];\r\n        }\r\n        if (!config.type) {\r\n            config.type = 'audio';\r\n        }\r\n    }\r\n\r\n    return config;\r\n}\r\n\r\n// __________________\r\n// GetRecorderType.js\r\n\r\n/**\r\n * {@link GetRecorderType} is an inner/private helper for {@link RecordRTC}.\r\n * @summary It returns best recorder-type available for your browser.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef GetRecorderType\r\n * @class\r\n * @example\r\n * var RecorderType = GetRecorderType(options);\r\n * var recorder = new RecorderType(options);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\r\n */\r\n\r\nfunction GetRecorderType(mediaStream, config) {\r\n    var recorder;\r\n\r\n    // StereoAudioRecorder can work with all three: Edge, Firefox and Chrome\r\n    // todo: detect if it is Edge, then auto use: StereoAudioRecorder\r\n    if (isChrome || isEdge || isOpera) {\r\n        // Media Stream Recording API has not been implemented in chrome yet;\r\n        // That's why using WebAudio API to record stereo audio in WAV format\r\n        recorder = StereoAudioRecorder;\r\n    }\r\n\r\n    if (typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype && !isChrome) {\r\n        recorder = MediaStreamRecorder;\r\n    }\r\n\r\n    // video recorder (in WebM format)\r\n    if (config.type === 'video' && (isChrome || isOpera)) {\r\n        recorder = WhammyRecorder;\r\n\r\n        if (typeof WebAssemblyRecorder !== 'undefined' && typeof ReadableStream !== 'undefined') {\r\n            recorder = WebAssemblyRecorder;\r\n        }\r\n    }\r\n\r\n    // video recorder (in Gif format)\r\n    if (config.type === 'gif') {\r\n        recorder = GifRecorder;\r\n    }\r\n\r\n    // html2canvas recording!\r\n    if (config.type === 'canvas') {\r\n        recorder = CanvasRecorder;\r\n    }\r\n\r\n    if (isMediaRecorderCompatible() && recorder !== CanvasRecorder && recorder !== GifRecorder && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\r\n        if (getTracks(mediaStream, 'video').length || getTracks(mediaStream, 'audio').length) {\r\n            // audio-only recording\r\n            if (config.type === 'audio') {\r\n                if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('audio/webm')) {\r\n                    recorder = MediaStreamRecorder;\r\n                }\r\n                // else recorder = StereoAudioRecorder;\r\n            } else {\r\n                // video or screen tracks\r\n                if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('video/webm')) {\r\n                    recorder = MediaStreamRecorder;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (mediaStream instanceof Array && mediaStream.length) {\r\n        recorder = MultiStreamRecorder;\r\n    }\r\n\r\n    if (config.recorderType) {\r\n        recorder = config.recorderType;\r\n    }\r\n\r\n    if (!config.disableLogs && !!recorder && !!recorder.name) {\r\n        console.log('Using recorderType:', recorder.name || recorder.constructor.name);\r\n    }\r\n\r\n    if (!recorder && isSafari) {\r\n        recorder = MediaStreamRecorder;\r\n    }\r\n\r\n    return recorder;\r\n}\r\n\r\n// _____________\r\n// MRecordRTC.js\r\n\r\n/**\r\n * MRecordRTC runs on top of {@link RecordRTC} to bring multiple recordings in a single place, by providing simple API.\r\n * @summary MRecordRTC stands for \"Multiple-RecordRTC\".\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef MRecordRTC\r\n * @class\r\n * @example\r\n * var recorder = new MRecordRTC();\r\n * recorder.addStream(MediaStream);\r\n * recorder.mediaType = {\r\n *     audio: true, // or StereoAudioRecorder or MediaStreamRecorder\r\n *     video: true, // or WhammyRecorder or MediaStreamRecorder or WebAssemblyRecorder or CanvasRecorder\r\n *     gif: true    // or GifRecorder\r\n * };\r\n * // mimeType is optional and should be set only in advance cases.\r\n * recorder.mimeType = {\r\n *     audio: 'audio/wav',\r\n *     video: 'video/webm',\r\n *     gif:   'image/gif'\r\n * };\r\n * recorder.startRecording();\r\n * @see For further information:\r\n * @see {@link https://github.com/muaz-khan/RecordRTC/tree/master/MRecordRTC|MRecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @requires {@link RecordRTC}\r\n */\r\n\r\nfunction MRecordRTC(mediaStream) {\r\n\r\n    /**\r\n     * This method attaches MediaStream object to {@link MRecordRTC}.\r\n     * @param {MediaStream} mediaStream - A MediaStream object, either fetched using getUserMedia API, or generated using captureStreamUntilEnded or WebAudio API.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.addStream(MediaStream);\r\n     */\r\n    this.addStream = function(_mediaStream) {\r\n        if (_mediaStream) {\r\n            mediaStream = _mediaStream;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This property can be used to set the recording type e.g. audio, or video, or gif, or canvas.\r\n     * @property {object} mediaType - {audio: true, video: true, gif: true}\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * var recorder = new MRecordRTC();\r\n     * recorder.mediaType = {\r\n     *     audio: true, // TRUE or StereoAudioRecorder or MediaStreamRecorder\r\n     *     video: true, // TRUE or WhammyRecorder or MediaStreamRecorder or WebAssemblyRecorder or CanvasRecorder\r\n     *     gif  : true  // TRUE or GifRecorder\r\n     * };\r\n     */\r\n    this.mediaType = {\r\n        audio: true,\r\n        video: true\r\n    };\r\n\r\n    /**\r\n     * This method starts recording.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.startRecording();\r\n     */\r\n    this.startRecording = function() {\r\n        var mediaType = this.mediaType;\r\n        var recorderType;\r\n        var mimeType = this.mimeType || {\r\n            audio: null,\r\n            video: null,\r\n            gif: null\r\n        };\r\n\r\n        if (typeof mediaType.audio !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'audio').length) {\r\n            mediaType.audio = false;\r\n        }\r\n\r\n        if (typeof mediaType.video !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'video').length) {\r\n            mediaType.video = false;\r\n        }\r\n\r\n        if (typeof mediaType.gif !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'video').length) {\r\n            mediaType.gif = false;\r\n        }\r\n\r\n        if (!mediaType.audio && !mediaType.video && !mediaType.gif) {\r\n            throw 'MediaStream must have either audio or video tracks.';\r\n        }\r\n\r\n        if (!!mediaType.audio) {\r\n            recorderType = null;\r\n            if (typeof mediaType.audio === 'function') {\r\n                recorderType = mediaType.audio;\r\n            }\r\n\r\n            this.audioRecorder = new RecordRTC(mediaStream, {\r\n                type: 'audio',\r\n                bufferSize: this.bufferSize,\r\n                sampleRate: this.sampleRate,\r\n                numberOfAudioChannels: this.numberOfAudioChannels || 2,\r\n                disableLogs: this.disableLogs,\r\n                recorderType: recorderType,\r\n                mimeType: mimeType.audio,\r\n                timeSlice: this.timeSlice,\r\n                onTimeStamp: this.onTimeStamp\r\n            });\r\n\r\n            if (!mediaType.video) {\r\n                this.audioRecorder.startRecording();\r\n            }\r\n        }\r\n\r\n        if (!!mediaType.video) {\r\n            recorderType = null;\r\n            if (typeof mediaType.video === 'function') {\r\n                recorderType = mediaType.video;\r\n            }\r\n\r\n            var newStream = mediaStream;\r\n\r\n            if (isMediaRecorderCompatible() && !!mediaType.audio && typeof mediaType.audio === 'function') {\r\n                var videoTrack = getTracks(mediaStream, 'video')[0];\r\n\r\n                if (isFirefox) {\r\n                    newStream = new MediaStream();\r\n                    newStream.addTrack(videoTrack);\r\n\r\n                    if (recorderType && recorderType === WhammyRecorder) {\r\n                        // Firefox does NOT supports webp-encoding yet\r\n                        // But Firefox do supports WebAssemblyRecorder\r\n                        recorderType = MediaStreamRecorder;\r\n                    }\r\n                } else {\r\n                    newStream = new MediaStream();\r\n                    newStream.addTrack(videoTrack);\r\n                }\r\n            }\r\n\r\n            this.videoRecorder = new RecordRTC(newStream, {\r\n                type: 'video',\r\n                video: this.video,\r\n                canvas: this.canvas,\r\n                frameInterval: this.frameInterval || 10,\r\n                disableLogs: this.disableLogs,\r\n                recorderType: recorderType,\r\n                mimeType: mimeType.video,\r\n                timeSlice: this.timeSlice,\r\n                onTimeStamp: this.onTimeStamp,\r\n                workerPath: this.workerPath,\r\n                webAssemblyPath: this.webAssemblyPath,\r\n                frameRate: this.frameRate, // used by WebAssemblyRecorder; values: usually 30; accepts any.\r\n                bitrate: this.bitrate // used by WebAssemblyRecorder; values: 0 to 1000+\r\n            });\r\n\r\n            if (!mediaType.audio) {\r\n                this.videoRecorder.startRecording();\r\n            }\r\n        }\r\n\r\n        if (!!mediaType.audio && !!mediaType.video) {\r\n            var self = this;\r\n\r\n            var isSingleRecorder = isMediaRecorderCompatible() === true;\r\n\r\n            if (mediaType.audio instanceof StereoAudioRecorder && !!mediaType.video) {\r\n                isSingleRecorder = false;\r\n            } else if (mediaType.audio !== true && mediaType.video !== true && mediaType.audio !== mediaType.video) {\r\n                isSingleRecorder = false;\r\n            }\r\n\r\n            if (isSingleRecorder === true) {\r\n                self.audioRecorder = null;\r\n                self.videoRecorder.startRecording();\r\n            } else {\r\n                self.videoRecorder.initRecorder(function() {\r\n                    self.audioRecorder.initRecorder(function() {\r\n                        // Both recorders are ready to record things accurately\r\n                        self.videoRecorder.startRecording();\r\n                        self.audioRecorder.startRecording();\r\n                    });\r\n                });\r\n            }\r\n        }\r\n\r\n        if (!!mediaType.gif) {\r\n            recorderType = null;\r\n            if (typeof mediaType.gif === 'function') {\r\n                recorderType = mediaType.gif;\r\n            }\r\n            this.gifRecorder = new RecordRTC(mediaStream, {\r\n                type: 'gif',\r\n                frameRate: this.frameRate || 200,\r\n                quality: this.quality || 10,\r\n                disableLogs: this.disableLogs,\r\n                recorderType: recorderType,\r\n                mimeType: mimeType.gif\r\n            });\r\n            this.gifRecorder.startRecording();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method stops recording.\r\n     * @param {function} callback - Callback function is invoked when all encoders finished their jobs.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.stopRecording(function(recording){\r\n     *     var audioBlob = recording.audio;\r\n     *     var videoBlob = recording.video;\r\n     *     var gifBlob   = recording.gif;\r\n     * });\r\n     */\r\n    this.stopRecording = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.stopRecording(function(blobURL) {\r\n                callback(blobURL, 'audio');\r\n            });\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.stopRecording(function(blobURL) {\r\n                callback(blobURL, 'video');\r\n            });\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.stopRecording(function(blobURL) {\r\n                callback(blobURL, 'gif');\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method pauses recording.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.pauseRecording();\r\n     */\r\n    this.pauseRecording = function() {\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.pauseRecording();\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.pauseRecording();\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.pauseRecording();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resumes recording.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.resumeRecording();\r\n     */\r\n    this.resumeRecording = function() {\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.resumeRecording();\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.resumeRecording();\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.resumeRecording();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method can be used to manually get all recorded blobs.\r\n     * @param {function} callback - All recorded blobs are passed back to the \"callback\" function.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.getBlob(function(recording){\r\n     *     var audioBlob = recording.audio;\r\n     *     var videoBlob = recording.video;\r\n     *     var gifBlob   = recording.gif;\r\n     * });\r\n     * // or\r\n     * var audioBlob = recorder.getBlob().audio;\r\n     * var videoBlob = recorder.getBlob().video;\r\n     */\r\n    this.getBlob = function(callback) {\r\n        var output = {};\r\n\r\n        if (this.audioRecorder) {\r\n            output.audio = this.audioRecorder.getBlob();\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            output.video = this.videoRecorder.getBlob();\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            output.gif = this.gifRecorder.getBlob();\r\n        }\r\n\r\n        if (callback) {\r\n            callback(output);\r\n        }\r\n\r\n        return output;\r\n    };\r\n\r\n    /**\r\n     * Destroy all recorder instances.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.destroy();\r\n     */\r\n    this.destroy = function() {\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.destroy();\r\n            this.audioRecorder = null;\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.destroy();\r\n            this.videoRecorder = null;\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.destroy();\r\n            this.gifRecorder = null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method can be used to manually get all recorded blobs' DataURLs.\r\n     * @param {function} callback - All recorded blobs' DataURLs are passed back to the \"callback\" function.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.getDataURL(function(recording){\r\n     *     var audioDataURL = recording.audio;\r\n     *     var videoDataURL = recording.video;\r\n     *     var gifDataURL   = recording.gif;\r\n     * });\r\n     */\r\n    this.getDataURL = function(callback) {\r\n        this.getBlob(function(blob) {\r\n            if (blob.audio && blob.video) {\r\n                getDataURL(blob.audio, function(_audioDataURL) {\r\n                    getDataURL(blob.video, function(_videoDataURL) {\r\n                        callback({\r\n                            audio: _audioDataURL,\r\n                            video: _videoDataURL\r\n                        });\r\n                    });\r\n                });\r\n            } else if (blob.audio) {\r\n                getDataURL(blob.audio, function(_audioDataURL) {\r\n                    callback({\r\n                        audio: _audioDataURL\r\n                    });\r\n                });\r\n            } else if (blob.video) {\r\n                getDataURL(blob.video, function(_videoDataURL) {\r\n                    callback({\r\n                        video: _videoDataURL\r\n                    });\r\n                });\r\n            }\r\n        });\r\n\r\n        function getDataURL(blob, callback00) {\r\n            if (typeof Worker !== 'undefined') {\r\n                var webWorker = processInWebWorker(function readFile(_blob) {\r\n                    postMessage(new FileReaderSync().readAsDataURL(_blob));\r\n                });\r\n\r\n                webWorker.onmessage = function(event) {\r\n                    callback00(event.data);\r\n                };\r\n\r\n                webWorker.postMessage(blob);\r\n            } else {\r\n                var reader = new FileReader();\r\n                reader.readAsDataURL(blob);\r\n                reader.onload = function(event) {\r\n                    callback00(event.target.result);\r\n                };\r\n            }\r\n        }\r\n\r\n        function processInWebWorker(_function) {\r\n            var blob = URL.createObjectURL(new Blob([_function.toString(),\r\n                'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\r\n            ], {\r\n                type: 'application/javascript'\r\n            }));\r\n\r\n            var worker = new Worker(blob);\r\n            var url;\r\n            if (typeof URL !== 'undefined') {\r\n                url = URL;\r\n            } else if (typeof webkitURL !== 'undefined') {\r\n                url = webkitURL;\r\n            } else {\r\n                throw 'Neither URL nor webkitURL detected.';\r\n            }\r\n            url.revokeObjectURL(blob);\r\n            return worker;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method can be used to ask {@link MRecordRTC} to write all recorded blobs into IndexedDB storage.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.writeToDisk();\r\n     */\r\n    this.writeToDisk = function() {\r\n        RecordRTC.writeToDisk({\r\n            audio: this.audioRecorder,\r\n            video: this.videoRecorder,\r\n            gif: this.gifRecorder\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method can be used to invoke a save-as dialog for all recorded blobs.\r\n     * @param {object} args - {audio: 'audio-name', video: 'video-name', gif: 'gif-name'}\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.save({\r\n     *     audio: 'audio-file-name',\r\n     *     video: 'video-file-name',\r\n     *     gif  : 'gif-file-name'\r\n     * });\r\n     */\r\n    this.save = function(args) {\r\n        args = args || {\r\n            audio: true,\r\n            video: true,\r\n            gif: true\r\n        };\r\n\r\n        if (!!args.audio && this.audioRecorder) {\r\n            this.audioRecorder.save(typeof args.audio === 'string' ? args.audio : '');\r\n        }\r\n\r\n        if (!!args.video && this.videoRecorder) {\r\n            this.videoRecorder.save(typeof args.video === 'string' ? args.video : '');\r\n        }\r\n        if (!!args.gif && this.gifRecorder) {\r\n            this.gifRecorder.save(typeof args.gif === 'string' ? args.gif : '');\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * This method can be used to get all recorded blobs from IndexedDB storage.\r\n * @param {string} type - 'all' or 'audio' or 'video' or 'gif'\r\n * @param {function} callback - Callback function to get all stored blobs.\r\n * @method\r\n * @memberof MRecordRTC\r\n * @example\r\n * MRecordRTC.getFromDisk('all', function(dataURL, type){\r\n *     if(type === 'audio') { }\r\n *     if(type === 'video') { }\r\n *     if(type === 'gif')   { }\r\n * });\r\n */\r\nMRecordRTC.getFromDisk = RecordRTC.getFromDisk;\r\n\r\n/**\r\n * This method can be used to store recorded blobs into IndexedDB storage.\r\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\r\n * @method\r\n * @memberof MRecordRTC\r\n * @example\r\n * MRecordRTC.writeToDisk({\r\n *     audio: audioBlob,\r\n *     video: videoBlob,\r\n *     gif  : gifBlob\r\n * });\r\n */\r\nMRecordRTC.writeToDisk = RecordRTC.writeToDisk;\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.MRecordRTC = MRecordRTC;\r\n}\r\n\r\nvar browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\r\n\r\n(function(that) {\r\n    if (!that) {\r\n        return;\r\n    }\r\n\r\n    if (typeof window !== 'undefined') {\r\n        return;\r\n    }\r\n\r\n    if (typeof __webpack_require__.g === 'undefined') {\r\n        return;\r\n    }\r\n\r\n    __webpack_require__.g.navigator = {\r\n        userAgent: browserFakeUserAgent,\r\n        getUserMedia: function() {}\r\n    };\r\n\r\n    if (!__webpack_require__.g.console) {\r\n        __webpack_require__.g.console = {};\r\n    }\r\n\r\n    if (typeof __webpack_require__.g.console.log === 'undefined' || typeof __webpack_require__.g.console.error === 'undefined') {\r\n        __webpack_require__.g.console.error = __webpack_require__.g.console.log = __webpack_require__.g.console.log || function() {\r\n            console.log(arguments);\r\n        };\r\n    }\r\n\r\n    if (typeof document === 'undefined') {\r\n        /*global document:true */\r\n        that.document = {\r\n            documentElement: {\r\n                appendChild: function() {\r\n                    return '';\r\n                }\r\n            }\r\n        };\r\n\r\n        document.createElement = document.captureStream = document.mozCaptureStream = function() {\r\n            var obj = {\r\n                getContext: function() {\r\n                    return obj;\r\n                },\r\n                play: function() {},\r\n                pause: function() {},\r\n                drawImage: function() {},\r\n                toDataURL: function() {\r\n                    return '';\r\n                },\r\n                style: {}\r\n            };\r\n            return obj;\r\n        };\r\n\r\n        that.HTMLVideoElement = function() {};\r\n    }\r\n\r\n    if (typeof location === 'undefined') {\r\n        /*global location:true */\r\n        that.location = {\r\n            protocol: 'file:',\r\n            href: '',\r\n            hash: ''\r\n        };\r\n    }\r\n\r\n    if (typeof screen === 'undefined') {\r\n        /*global screen:true */\r\n        that.screen = {\r\n            width: 0,\r\n            height: 0\r\n        };\r\n    }\r\n\r\n    if (typeof URL === 'undefined') {\r\n        /*global screen:true */\r\n        that.URL = {\r\n            createObjectURL: function() {\r\n                return '';\r\n            },\r\n            revokeObjectURL: function() {\r\n                return '';\r\n            }\r\n        };\r\n    }\r\n\r\n    /*global window:true */\r\n    that.window = __webpack_require__.g;\r\n})(typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : null);\r\n\r\n// _____________________________\r\n// Cross-Browser-Declarations.js\r\n\r\n// animation-frame used in WebM recording\r\n\r\n/*jshint -W079 */\r\nvar requestAnimationFrame = window.requestAnimationFrame;\r\nif (typeof requestAnimationFrame === 'undefined') {\r\n    if (typeof webkitRequestAnimationFrame !== 'undefined') {\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = webkitRequestAnimationFrame;\r\n    } else if (typeof mozRequestAnimationFrame !== 'undefined') {\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = mozRequestAnimationFrame;\r\n    } else if (typeof msRequestAnimationFrame !== 'undefined') {\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = msRequestAnimationFrame;\r\n    } else if (typeof requestAnimationFrame === 'undefined') {\r\n        // via: https://gist.github.com/paulirish/1579671\r\n        var lastTime = 0;\r\n\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = function(callback, element) {\r\n            var currTime = new Date().getTime();\r\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\r\n            var id = setTimeout(function() {\r\n                callback(currTime + timeToCall);\r\n            }, timeToCall);\r\n            lastTime = currTime + timeToCall;\r\n            return id;\r\n        };\r\n    }\r\n}\r\n\r\n/*jshint -W079 */\r\nvar cancelAnimationFrame = window.cancelAnimationFrame;\r\nif (typeof cancelAnimationFrame === 'undefined') {\r\n    if (typeof webkitCancelAnimationFrame !== 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = webkitCancelAnimationFrame;\r\n    } else if (typeof mozCancelAnimationFrame !== 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = mozCancelAnimationFrame;\r\n    } else if (typeof msCancelAnimationFrame !== 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = msCancelAnimationFrame;\r\n    } else if (typeof cancelAnimationFrame === 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = function(id) {\r\n            clearTimeout(id);\r\n        };\r\n    }\r\n}\r\n\r\n// WebAudio API representer\r\nvar AudioContext = window.AudioContext;\r\n\r\nif (typeof AudioContext === 'undefined') {\r\n    if (typeof webkitAudioContext !== 'undefined') {\r\n        /*global AudioContext:true */\r\n        AudioContext = webkitAudioContext;\r\n    }\r\n\r\n    if (typeof mozAudioContext !== 'undefined') {\r\n        /*global AudioContext:true */\r\n        AudioContext = mozAudioContext;\r\n    }\r\n}\r\n\r\n/*jshint -W079 */\r\nvar URL = window.URL;\r\n\r\nif (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\r\n    /*global URL:true */\r\n    URL = webkitURL;\r\n}\r\n\r\nif (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') { // maybe window.navigator?\r\n    if (typeof navigator.webkitGetUserMedia !== 'undefined') {\r\n        navigator.getUserMedia = navigator.webkitGetUserMedia;\r\n    }\r\n\r\n    if (typeof navigator.mozGetUserMedia !== 'undefined') {\r\n        navigator.getUserMedia = navigator.mozGetUserMedia;\r\n    }\r\n}\r\n\r\nvar isEdge = navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveBlob || !!navigator.msSaveOrOpenBlob);\r\nvar isOpera = !!window.opera || navigator.userAgent.indexOf('OPR/') !== -1;\r\nvar isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1 && ('netscape' in window) && / rv:/.test(navigator.userAgent);\r\nvar isChrome = (!isOpera && !isEdge && !!navigator.webkitGetUserMedia) || isElectron() || navigator.userAgent.toLowerCase().indexOf('chrome/') !== -1;\r\n\r\nvar isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\r\n\r\nif (isSafari && !isChrome && navigator.userAgent.indexOf('CriOS') !== -1) {\r\n    isSafari = false;\r\n    isChrome = true;\r\n}\r\n\r\nvar MediaStream = window.MediaStream;\r\n\r\nif (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\r\n    MediaStream = webkitMediaStream;\r\n}\r\n\r\n/*global MediaStream:true */\r\nif (typeof MediaStream !== 'undefined') {\r\n    // override \"stop\" method for all browsers\r\n    if (typeof MediaStream.prototype.stop === 'undefined') {\r\n        MediaStream.prototype.stop = function() {\r\n            this.getTracks().forEach(function(track) {\r\n                track.stop();\r\n            });\r\n        };\r\n    }\r\n}\r\n\r\n// below function via: http://goo.gl/B3ae8c\r\n/**\r\n * Return human-readable file size.\r\n * @param {number} bytes - Pass bytes and get formatted string.\r\n * @returns {string} - formatted string\r\n * @example\r\n * bytesToSize(1024*1024*5) === '5 GB'\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\nfunction bytesToSize(bytes) {\r\n    var k = 1000;\r\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n    if (bytes === 0) {\r\n        return '0 Bytes';\r\n    }\r\n    var i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)), 10);\r\n    return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];\r\n}\r\n\r\n/**\r\n * @param {Blob} file - File or Blob object. This parameter is required.\r\n * @param {string} fileName - Optional file name e.g. \"Recorded-Video.webm\"\r\n * @example\r\n * invokeSaveAsDialog(blob or file, [optional] fileName);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\nfunction invokeSaveAsDialog(file, fileName) {\r\n    if (!file) {\r\n        throw 'Blob object is required.';\r\n    }\r\n\r\n    if (!file.type) {\r\n        try {\r\n            file.type = 'video/webm';\r\n        } catch (e) {}\r\n    }\r\n\r\n    var fileExtension = (file.type || 'video/webm').split('/')[1];\r\n    if (fileExtension.indexOf(';') !== -1) {\r\n        // extended mimetype, e.g. 'video/webm;codecs=vp8,opus'\r\n        fileExtension = fileExtension.split(';')[0];\r\n    }\r\n    if (fileName && fileName.indexOf('.') !== -1) {\r\n        var splitted = fileName.split('.');\r\n        fileName = splitted[0];\r\n        fileExtension = splitted[1];\r\n    }\r\n\r\n    var fileFullName = (fileName || (Math.round(Math.random() * 9999999999) + 888888888)) + '.' + fileExtension;\r\n\r\n    if (typeof navigator.msSaveOrOpenBlob !== 'undefined') {\r\n        return navigator.msSaveOrOpenBlob(file, fileFullName);\r\n    } else if (typeof navigator.msSaveBlob !== 'undefined') {\r\n        return navigator.msSaveBlob(file, fileFullName);\r\n    }\r\n\r\n    var hyperlink = document.createElement('a');\r\n    hyperlink.href = URL.createObjectURL(file);\r\n    hyperlink.download = fileFullName;\r\n\r\n    hyperlink.style = 'display:none;opacity:0;color:transparent;';\r\n    (document.body || document.documentElement).appendChild(hyperlink);\r\n\r\n    if (typeof hyperlink.click === 'function') {\r\n        hyperlink.click();\r\n    } else {\r\n        hyperlink.target = '_blank';\r\n        hyperlink.dispatchEvent(new MouseEvent('click', {\r\n            view: window,\r\n            bubbles: true,\r\n            cancelable: true\r\n        }));\r\n    }\r\n\r\n    URL.revokeObjectURL(hyperlink.href);\r\n}\r\n\r\n/**\r\n * from: https://github.com/cheton/is-electron/blob/master/index.js\r\n **/\r\nfunction isElectron() {\r\n    // Renderer process\r\n    if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {\r\n        return true;\r\n    }\r\n\r\n    // Main process\r\n    if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {\r\n        return true;\r\n    }\r\n\r\n    // Detect the user agent when the `nodeIntegration` option is set to true\r\n    if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction getTracks(stream, kind) {\r\n    if (!stream || !stream.getTracks) {\r\n        return [];\r\n    }\r\n\r\n    return stream.getTracks().filter(function(t) {\r\n        return t.kind === (kind || 'audio');\r\n    });\r\n}\r\n\r\nfunction setSrcObject(stream, element) {\r\n    if ('srcObject' in element) {\r\n        element.srcObject = stream;\r\n    } else if ('mozSrcObject' in element) {\r\n        element.mozSrcObject = stream;\r\n    } else {\r\n        element.srcObject = stream;\r\n    }\r\n}\r\n\r\n/**\r\n * @param {Blob} file - File or Blob object.\r\n * @param {function} callback - Callback function.\r\n * @example\r\n * getSeekableBlob(blob or file, callback);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\nfunction getSeekableBlob(inputBlob, callback) {\r\n    // EBML.js copyrights goes to: https://github.com/legokichi/ts-ebml\r\n    if (typeof EBML === 'undefined') {\r\n        throw new Error('Please link: https://www.webrtc-experiment.com/EBML.js');\r\n    }\r\n\r\n    var reader = new EBML.Reader();\r\n    var decoder = new EBML.Decoder();\r\n    var tools = EBML.tools;\r\n\r\n    var fileReader = new FileReader();\r\n    fileReader.onload = function(e) {\r\n        var ebmlElms = decoder.decode(this.result);\r\n        ebmlElms.forEach(function(element) {\r\n            reader.read(element);\r\n        });\r\n        reader.stop();\r\n        var refinedMetadataBuf = tools.makeMetadataSeekable(reader.metadatas, reader.duration, reader.cues);\r\n        var body = this.result.slice(reader.metadataSize);\r\n        var newBlob = new Blob([refinedMetadataBuf, body], {\r\n            type: 'video/webm'\r\n        });\r\n\r\n        callback(newBlob);\r\n    };\r\n    fileReader.readAsArrayBuffer(inputBlob);\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.invokeSaveAsDialog = invokeSaveAsDialog;\r\n    RecordRTC.getTracks = getTracks;\r\n    RecordRTC.getSeekableBlob = getSeekableBlob;\r\n    RecordRTC.bytesToSize = bytesToSize;\r\n    RecordRTC.isElectron = isElectron;\r\n}\r\n\r\n// __________ (used to handle stuff like http://goo.gl/xmE5eg) issue #129\r\n// Storage.js\r\n\r\n/**\r\n * Storage is a standalone object used by {@link RecordRTC} to store reusable objects e.g. \"new AudioContext\".\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @example\r\n * Storage.AudioContext === webkitAudioContext\r\n * @property {webkitAudioContext} AudioContext - Keeps a reference to AudioContext object.\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\n\r\nvar Storage = {};\r\n\r\nif (typeof AudioContext !== 'undefined') {\r\n    Storage.AudioContext = AudioContext;\r\n} else if (typeof webkitAudioContext !== 'undefined') {\r\n    Storage.AudioContext = webkitAudioContext;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.Storage = Storage;\r\n}\r\n\r\nfunction isMediaRecorderCompatible() {\r\n    if (isFirefox || isSafari || isEdge) {\r\n        return true;\r\n    }\r\n\r\n    var nVer = navigator.appVersion;\r\n    var nAgt = navigator.userAgent;\r\n    var fullVersion = '' + parseFloat(navigator.appVersion);\r\n    var majorVersion = parseInt(navigator.appVersion, 10);\r\n    var nameOffset, verOffset, ix;\r\n\r\n    if (isChrome || isOpera) {\r\n        verOffset = nAgt.indexOf('Chrome');\r\n        fullVersion = nAgt.substring(verOffset + 7);\r\n    }\r\n\r\n    // trim the fullVersion string at semicolon/space if present\r\n    if ((ix = fullVersion.indexOf(';')) !== -1) {\r\n        fullVersion = fullVersion.substring(0, ix);\r\n    }\r\n\r\n    if ((ix = fullVersion.indexOf(' ')) !== -1) {\r\n        fullVersion = fullVersion.substring(0, ix);\r\n    }\r\n\r\n    majorVersion = parseInt('' + fullVersion, 10);\r\n\r\n    if (isNaN(majorVersion)) {\r\n        fullVersion = '' + parseFloat(navigator.appVersion);\r\n        majorVersion = parseInt(navigator.appVersion, 10);\r\n    }\r\n\r\n    return majorVersion >= 49;\r\n}\r\n\r\n// ______________________\r\n// MediaStreamRecorder.js\r\n\r\n/**\r\n * MediaStreamRecorder is an abstraction layer for {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}. It is used by {@link RecordRTC} to record MediaStream(s) in both Chrome and Firefox.\r\n * @summary Runs top over {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://github.com/muaz-khan|Muaz Khan}\r\n * @typedef MediaStreamRecorder\r\n * @class\r\n * @example\r\n * var config = {\r\n *     mimeType: 'video/webm', // vp8, vp9, h264, mkv, opus/vorbis\r\n *     audioBitsPerSecond : 256 * 8 * 1024,\r\n *     videoBitsPerSecond : 256 * 8 * 1024,\r\n *     bitsPerSecond: 256 * 8 * 1024,  // if this is provided, skip above two\r\n *     checkForInactiveTracks: true,\r\n *     timeSlice: 1000, // concatenate intervals based blobs\r\n *     ondataavailable: function() {} // get intervals based blobs\r\n * }\r\n * var recorder = new MediaStreamRecorder(mediaStream, config);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n *\r\n *     // or\r\n *     var blob = recorder.blob;\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {disableLogs:true, initCallback: function, mimeType: \"video/webm\", timeSlice: 1000}\r\n * @throws Will throw an error if first argument \"MediaStream\" is missing. Also throws error if \"MediaRecorder API\" are not supported by the browser.\r\n */\r\n\r\nfunction MediaStreamRecorder(mediaStream, config) {\r\n    var self = this;\r\n\r\n    if (typeof mediaStream === 'undefined') {\r\n        throw 'First argument \"MediaStream\" is required.';\r\n    }\r\n\r\n    if (typeof MediaRecorder === 'undefined') {\r\n        throw 'Your browser does not support the Media Recorder API. Please try other modules e.g. WhammyRecorder or StereoAudioRecorder.';\r\n    }\r\n\r\n    config = config || {\r\n        // bitsPerSecond: 256 * 8 * 1024,\r\n        mimeType: 'video/webm'\r\n    };\r\n\r\n    if (config.type === 'audio') {\r\n        if (getTracks(mediaStream, 'video').length && getTracks(mediaStream, 'audio').length) {\r\n            var stream;\r\n            if (!!navigator.mozGetUserMedia) {\r\n                stream = new MediaStream();\r\n                stream.addTrack(getTracks(mediaStream, 'audio')[0]);\r\n            } else {\r\n                // webkitMediaStream\r\n                stream = new MediaStream(getTracks(mediaStream, 'audio'));\r\n            }\r\n            mediaStream = stream;\r\n        }\r\n\r\n        if (!config.mimeType || config.mimeType.toString().toLowerCase().indexOf('audio') === -1) {\r\n            config.mimeType = isChrome ? 'audio/webm' : 'audio/ogg';\r\n        }\r\n\r\n        if (config.mimeType && config.mimeType.toString().toLowerCase() !== 'audio/ogg' && !!navigator.mozGetUserMedia) {\r\n            // forcing better codecs on Firefox (via #166)\r\n            config.mimeType = 'audio/ogg';\r\n        }\r\n    }\r\n\r\n    var arrayOfBlobs = [];\r\n\r\n    /**\r\n     * This method returns array of blobs. Use only with \"timeSlice\". Its useful to preview recording anytime, without using the \"stop\" method.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * var arrayOfBlobs = recorder.getArrayOfBlobs();\r\n     * @returns {Array} Returns array of recorded blobs.\r\n     */\r\n    this.getArrayOfBlobs = function() {\r\n        return arrayOfBlobs;\r\n    };\r\n\r\n    /**\r\n     * This method records MediaStream.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        // set defaults\r\n        self.blob = null;\r\n        self.clearRecordedData();\r\n        self.timestamps = [];\r\n        allStates = [];\r\n        arrayOfBlobs = [];\r\n\r\n        var recorderHints = config;\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Passing following config over MediaRecorder API.', recorderHints);\r\n        }\r\n\r\n        if (mediaRecorder) {\r\n            // mandatory to make sure Firefox doesn't fails to record streams 3-4 times without reloading the page.\r\n            mediaRecorder = null;\r\n        }\r\n\r\n        if (isChrome && !isMediaRecorderCompatible()) {\r\n            // to support video-only recording on stable\r\n            recorderHints = 'video/vp8';\r\n        }\r\n\r\n        if (typeof MediaRecorder.isTypeSupported === 'function' && recorderHints.mimeType) {\r\n            if (!MediaRecorder.isTypeSupported(recorderHints.mimeType)) {\r\n                if (!config.disableLogs) {\r\n                    console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\r\n                }\r\n\r\n                recorderHints.mimeType = config.type === 'audio' ? 'audio/webm' : 'video/webm';\r\n            }\r\n        }\r\n\r\n        // using MediaRecorder API here\r\n        try {\r\n            mediaRecorder = new MediaRecorder(mediaStream, recorderHints);\r\n\r\n            // reset\r\n            config.mimeType = recorderHints.mimeType;\r\n        } catch (e) {\r\n            // chrome-based fallback\r\n            mediaRecorder = new MediaRecorder(mediaStream);\r\n        }\r\n\r\n        // old hack?\r\n        if (recorderHints.mimeType && !MediaRecorder.isTypeSupported && 'canRecordMimeType' in mediaRecorder && mediaRecorder.canRecordMimeType(recorderHints.mimeType) === false) {\r\n            if (!config.disableLogs) {\r\n                console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\r\n            }\r\n        }\r\n\r\n        // Dispatching OnDataAvailable Handler\r\n        mediaRecorder.ondataavailable = function(e) {\r\n            if (e.data) {\r\n                allStates.push('ondataavailable: ' + bytesToSize(e.data.size));\r\n            }\r\n\r\n            if (typeof config.timeSlice === 'number') {\r\n                if (e.data && e.data.size) {\r\n                    arrayOfBlobs.push(e.data);\r\n                    updateTimeStamp();\r\n\r\n                    if (typeof config.ondataavailable === 'function') {\r\n                        // intervals based blobs\r\n                        var blob = config.getNativeBlob ? e.data : new Blob([e.data], {\r\n                            type: getMimeType(recorderHints)\r\n                        });\r\n                        config.ondataavailable(blob);\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (!e.data || !e.data.size || e.data.size < 100 || self.blob) {\r\n                // make sure that stopRecording always getting fired\r\n                // even if there is invalid data\r\n                if (self.recordingCallback) {\r\n                    self.recordingCallback(new Blob([], {\r\n                        type: getMimeType(recorderHints)\r\n                    }));\r\n                    self.recordingCallback = null;\r\n                }\r\n                return;\r\n            }\r\n\r\n            self.blob = config.getNativeBlob ? e.data : new Blob([e.data], {\r\n                type: getMimeType(recorderHints)\r\n            });\r\n\r\n            if (self.recordingCallback) {\r\n                self.recordingCallback(self.blob);\r\n                self.recordingCallback = null;\r\n            }\r\n        };\r\n\r\n        mediaRecorder.onstart = function() {\r\n            allStates.push('started');\r\n        };\r\n\r\n        mediaRecorder.onpause = function() {\r\n            allStates.push('paused');\r\n        };\r\n\r\n        mediaRecorder.onresume = function() {\r\n            allStates.push('resumed');\r\n        };\r\n\r\n        mediaRecorder.onstop = function() {\r\n            allStates.push('stopped');\r\n        };\r\n\r\n        mediaRecorder.onerror = function(error) {\r\n            if (!error) {\r\n                return;\r\n            }\r\n\r\n            if (!error.name) {\r\n                error.name = 'UnknownError';\r\n            }\r\n\r\n            allStates.push('error: ' + error);\r\n\r\n            if (!config.disableLogs) {\r\n                // via: https://w3c.github.io/mediacapture-record/MediaRecorder.html#exception-summary\r\n                if (error.name.toString().toLowerCase().indexOf('invalidstate') !== -1) {\r\n                    console.error('The MediaRecorder is not in a state in which the proposed operation is allowed to be executed.', error);\r\n                } else if (error.name.toString().toLowerCase().indexOf('notsupported') !== -1) {\r\n                    console.error('MIME type (', recorderHints.mimeType, ') is not supported.', error);\r\n                } else if (error.name.toString().toLowerCase().indexOf('security') !== -1) {\r\n                    console.error('MediaRecorder security error', error);\r\n                }\r\n\r\n                // older code below\r\n                else if (error.name === 'OutOfMemory') {\r\n                    console.error('The UA has exhaused the available memory. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\r\n                } else if (error.name === 'IllegalStreamModification') {\r\n                    console.error('A modification to the stream has occurred that makes it impossible to continue recording. An example would be the addition of a Track while recording is occurring. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\r\n                } else if (error.name === 'OtherRecordingError') {\r\n                    console.error('Used for an fatal error other than those listed above. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\r\n                } else if (error.name === 'GenericError') {\r\n                    console.error('The UA cannot provide the codec or recording option that has been requested.', error);\r\n                } else {\r\n                    console.error('MediaRecorder Error', error);\r\n                }\r\n            }\r\n\r\n            (function(looper) {\r\n                if (!self.manuallyStopped && mediaRecorder && mediaRecorder.state === 'inactive') {\r\n                    delete config.timeslice;\r\n\r\n                    // 10 minutes, enough?\r\n                    mediaRecorder.start(10 * 60 * 1000);\r\n                    return;\r\n                }\r\n\r\n                setTimeout(looper, 1000);\r\n            })();\r\n\r\n            if (mediaRecorder.state !== 'inactive' && mediaRecorder.state !== 'stopped') {\r\n                mediaRecorder.stop();\r\n            }\r\n        };\r\n\r\n        if (typeof config.timeSlice === 'number') {\r\n            updateTimeStamp();\r\n            mediaRecorder.start(config.timeSlice);\r\n        } else {\r\n            // default is 60 minutes; enough?\r\n            // use config => {timeSlice: 1000} otherwise\r\n\r\n            mediaRecorder.start(3.6e+6);\r\n        }\r\n\r\n        if (config.initCallback) {\r\n            config.initCallback(); // old code\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @property {Array} timestamps - Array of time stamps\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * console.log(recorder.timestamps);\r\n     */\r\n    this.timestamps = [];\r\n\r\n    function updateTimeStamp() {\r\n        self.timestamps.push(new Date().getTime());\r\n\r\n        if (typeof config.onTimeStamp === 'function') {\r\n            config.onTimeStamp(self.timestamps[self.timestamps.length - 1], self.timestamps);\r\n        }\r\n    }\r\n\r\n    function getMimeType(secondObject) {\r\n        if (mediaRecorder && mediaRecorder.mimeType) {\r\n            return mediaRecorder.mimeType;\r\n        }\r\n\r\n        return secondObject.mimeType || 'video/webm';\r\n    }\r\n\r\n    /**\r\n     * This method stops recording MediaStream.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        self.manuallyStopped = true; // used inside the mediaRecorder.onerror\r\n\r\n        if (!mediaRecorder) {\r\n            return;\r\n        }\r\n\r\n        this.recordingCallback = callback;\r\n\r\n        if (mediaRecorder.state === 'recording') {\r\n            mediaRecorder.stop();\r\n        }\r\n\r\n        if (typeof config.timeSlice === 'number') {\r\n            setTimeout(function() {\r\n                self.blob = new Blob(arrayOfBlobs, {\r\n                    type: getMimeType(config)\r\n                });\r\n\r\n                self.recordingCallback(self.blob);\r\n            }, 100);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        if (!mediaRecorder) {\r\n            return;\r\n        }\r\n\r\n        if (mediaRecorder.state === 'recording') {\r\n            mediaRecorder.pause();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        if (!mediaRecorder) {\r\n            return;\r\n        }\r\n\r\n        if (mediaRecorder.state === 'paused') {\r\n            mediaRecorder.resume();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        if (mediaRecorder && mediaRecorder.state === 'recording') {\r\n            self.stop(clearRecordedDataCB);\r\n        }\r\n\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function clearRecordedDataCB() {\r\n        arrayOfBlobs = [];\r\n        mediaRecorder = null;\r\n        self.timestamps = [];\r\n    }\r\n\r\n    // Reference to \"MediaRecorder\" object\r\n    var mediaRecorder;\r\n\r\n    /**\r\n     * Access to native MediaRecorder API\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @instance\r\n     * @example\r\n     * var internal = recorder.getInternalRecorder();\r\n     * internal.ondataavailable = function() {}; // override\r\n     * internal.stream, internal.onpause, internal.onstop, etc.\r\n     * @returns {Object} Returns internal recording object.\r\n     */\r\n    this.getInternalRecorder = function() {\r\n        return mediaRecorder;\r\n    };\r\n\r\n    function isMediaStreamActive() {\r\n        if ('active' in mediaStream) {\r\n            if (!mediaStream.active) {\r\n                return false;\r\n            }\r\n        } else if ('ended' in mediaStream) { // old hack\r\n            if (mediaStream.ended) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @property {Blob} blob - Recorded data as \"Blob\" object.\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.stop(function() {\r\n     *     var blob = recorder.blob;\r\n     * });\r\n     */\r\n    this.blob = null;\r\n\r\n\r\n    /**\r\n     * Get MediaRecorder readonly state.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * var state = recorder.getState();\r\n     * @returns {String} Returns recording state.\r\n     */\r\n    this.getState = function() {\r\n        if (!mediaRecorder) {\r\n            return 'inactive';\r\n        }\r\n\r\n        return mediaRecorder.state || 'inactive';\r\n    };\r\n\r\n    // list of all recording states\r\n    var allStates = [];\r\n\r\n    /**\r\n     * Get MediaRecorder all recording states.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * var state = recorder.getAllStates();\r\n     * @returns {Array} Returns all recording states\r\n     */\r\n    this.getAllStates = function() {\r\n        return allStates;\r\n    };\r\n\r\n    // if any Track within the MediaStream is muted or not enabled at any time, \r\n    // the browser will only record black frames \r\n    // or silence since that is the content produced by the Track\r\n    // so we need to stopRecording as soon as any single track ends.\r\n    if (typeof config.checkForInactiveTracks === 'undefined') {\r\n        config.checkForInactiveTracks = false; // disable to minimize CPU usage\r\n    }\r\n\r\n    var self = this;\r\n\r\n    // this method checks if media stream is stopped\r\n    // or if any track is ended.\r\n    (function looper() {\r\n        if (!mediaRecorder || config.checkForInactiveTracks === false) {\r\n            return;\r\n        }\r\n\r\n        if (isMediaStreamActive() === false) {\r\n            if (!config.disableLogs) {\r\n                console.log('MediaStream seems stopped.');\r\n            }\r\n            self.stop();\r\n            return;\r\n        }\r\n\r\n        setTimeout(looper, 1000); // check every second\r\n    })();\r\n\r\n    // for debugging\r\n    this.name = 'MediaStreamRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.MediaStreamRecorder = MediaStreamRecorder;\r\n}\r\n\r\n// source code from: http://typedarray.org/wp-content/projects/WebAudioRecorder/script.js\r\n// https://github.com/mattdiamond/Recorderjs#license-mit\r\n// ______________________\r\n// StereoAudioRecorder.js\r\n\r\n/**\r\n * StereoAudioRecorder is a standalone class used by {@link RecordRTC} to bring \"stereo\" audio-recording in chrome.\r\n * @summary JavaScript standalone object for stereo audio recording.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef StereoAudioRecorder\r\n * @class\r\n * @example\r\n * var recorder = new StereoAudioRecorder(MediaStream, {\r\n *     sampleRate: 44100,\r\n *     bufferSize: 4096\r\n * });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {sampleRate: 44100, bufferSize: 4096, numberOfAudioChannels: 1, etc.}\r\n */\r\n\r\nfunction StereoAudioRecorder(mediaStream, config) {\r\n    if (!getTracks(mediaStream, 'audio').length) {\r\n        throw 'Your stream has no audio tracks.';\r\n    }\r\n\r\n    config = config || {};\r\n\r\n    var self = this;\r\n\r\n    // variables\r\n    var leftchannel = [];\r\n    var rightchannel = [];\r\n    var recording = false;\r\n    var recordingLength = 0;\r\n    var jsAudioNode;\r\n\r\n    var numberOfAudioChannels = 2;\r\n\r\n    /**\r\n     * Set sample rates such as 8K or 16K. Reference: http://stackoverflow.com/a/28977136/552182\r\n     * @property {number} desiredSampRate - Desired Bits per sample * 1000\r\n     * @memberof StereoAudioRecorder\r\n     * @instance\r\n     * @example\r\n     * var recorder = StereoAudioRecorder(mediaStream, {\r\n     *   desiredSampRate: 16 * 1000 // bits-per-sample * 1000\r\n     * });\r\n     */\r\n    var desiredSampRate = config.desiredSampRate;\r\n\r\n    // backward compatibility\r\n    if (config.leftChannel === true) {\r\n        numberOfAudioChannels = 1;\r\n    }\r\n\r\n    if (config.numberOfAudioChannels === 1) {\r\n        numberOfAudioChannels = 1;\r\n    }\r\n\r\n    if (!numberOfAudioChannels || numberOfAudioChannels < 1) {\r\n        numberOfAudioChannels = 2;\r\n    }\r\n\r\n    if (!config.disableLogs) {\r\n        console.log('StereoAudioRecorder is set to record number of channels: ' + numberOfAudioChannels);\r\n    }\r\n\r\n    // if any Track within the MediaStream is muted or not enabled at any time, \r\n    // the browser will only record black frames \r\n    // or silence since that is the content produced by the Track\r\n    // so we need to stopRecording as soon as any single track ends.\r\n    if (typeof config.checkForInactiveTracks === 'undefined') {\r\n        config.checkForInactiveTracks = true;\r\n    }\r\n\r\n    function isMediaStreamActive() {\r\n        if (config.checkForInactiveTracks === false) {\r\n            // always return \"true\"\r\n            return true;\r\n        }\r\n\r\n        if ('active' in mediaStream) {\r\n            if (!mediaStream.active) {\r\n                return false;\r\n            }\r\n        } else if ('ended' in mediaStream) { // old hack\r\n            if (mediaStream.ended) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * This method records MediaStream.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        if (isMediaStreamActive() === false) {\r\n            throw 'Please make sure MediaStream is active.';\r\n        }\r\n\r\n        resetVariables();\r\n\r\n        isAudioProcessStarted = isPaused = false;\r\n        recording = true;\r\n\r\n        if (typeof config.timeSlice !== 'undefined') {\r\n            looper();\r\n        }\r\n    };\r\n\r\n    function mergeLeftRightBuffers(config, callback) {\r\n        function mergeAudioBuffers(config, cb) {\r\n            var numberOfAudioChannels = config.numberOfAudioChannels;\r\n\r\n            // todo: \"slice(0)\" --- is it causes loop? Should be removed?\r\n            var leftBuffers = config.leftBuffers.slice(0);\r\n            var rightBuffers = config.rightBuffers.slice(0);\r\n            var sampleRate = config.sampleRate;\r\n            var internalInterleavedLength = config.internalInterleavedLength;\r\n            var desiredSampRate = config.desiredSampRate;\r\n\r\n            if (numberOfAudioChannels === 2) {\r\n                leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\r\n                rightBuffers = mergeBuffers(rightBuffers, internalInterleavedLength);\r\n\r\n                if (desiredSampRate) {\r\n                    leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\r\n                    rightBuffers = interpolateArray(rightBuffers, desiredSampRate, sampleRate);\r\n                }\r\n            }\r\n\r\n            if (numberOfAudioChannels === 1) {\r\n                leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\r\n\r\n                if (desiredSampRate) {\r\n                    leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\r\n                }\r\n            }\r\n\r\n            // set sample rate as desired sample rate\r\n            if (desiredSampRate) {\r\n                sampleRate = desiredSampRate;\r\n            }\r\n\r\n            // for changing the sampling rate, reference:\r\n            // http://stackoverflow.com/a/28977136/552182\r\n            function interpolateArray(data, newSampleRate, oldSampleRate) {\r\n                var fitCount = Math.round(data.length * (newSampleRate / oldSampleRate));\r\n                var newData = [];\r\n                var springFactor = Number((data.length - 1) / (fitCount - 1));\r\n                newData[0] = data[0];\r\n                for (var i = 1; i < fitCount - 1; i++) {\r\n                    var tmp = i * springFactor;\r\n                    var before = Number(Math.floor(tmp)).toFixed();\r\n                    var after = Number(Math.ceil(tmp)).toFixed();\r\n                    var atPoint = tmp - before;\r\n                    newData[i] = linearInterpolate(data[before], data[after], atPoint);\r\n                }\r\n                newData[fitCount - 1] = data[data.length - 1];\r\n                return newData;\r\n            }\r\n\r\n            function linearInterpolate(before, after, atPoint) {\r\n                return before + (after - before) * atPoint;\r\n            }\r\n\r\n            function mergeBuffers(channelBuffer, rLength) {\r\n                var result = new Float64Array(rLength);\r\n                var offset = 0;\r\n                var lng = channelBuffer.length;\r\n\r\n                for (var i = 0; i < lng; i++) {\r\n                    var buffer = channelBuffer[i];\r\n                    result.set(buffer, offset);\r\n                    offset += buffer.length;\r\n                }\r\n\r\n                return result;\r\n            }\r\n\r\n            function interleave(leftChannel, rightChannel) {\r\n                var length = leftChannel.length + rightChannel.length;\r\n\r\n                var result = new Float64Array(length);\r\n\r\n                var inputIndex = 0;\r\n\r\n                for (var index = 0; index < length;) {\r\n                    result[index++] = leftChannel[inputIndex];\r\n                    result[index++] = rightChannel[inputIndex];\r\n                    inputIndex++;\r\n                }\r\n                return result;\r\n            }\r\n\r\n            function writeUTFBytes(view, offset, string) {\r\n                var lng = string.length;\r\n                for (var i = 0; i < lng; i++) {\r\n                    view.setUint8(offset + i, string.charCodeAt(i));\r\n                }\r\n            }\r\n\r\n            // interleave both channels together\r\n            var interleaved;\r\n\r\n            if (numberOfAudioChannels === 2) {\r\n                interleaved = interleave(leftBuffers, rightBuffers);\r\n            }\r\n\r\n            if (numberOfAudioChannels === 1) {\r\n                interleaved = leftBuffers;\r\n            }\r\n\r\n            var interleavedLength = interleaved.length;\r\n\r\n            // create wav file\r\n            var resultingBufferLength = 44 + interleavedLength * 2;\r\n\r\n            var buffer = new ArrayBuffer(resultingBufferLength);\r\n\r\n            var view = new DataView(buffer);\r\n\r\n            // RIFF chunk descriptor/identifier \r\n            writeUTFBytes(view, 0, 'RIFF');\r\n\r\n            // RIFF chunk length\r\n            // changed \"44\" to \"36\" via #401\r\n            view.setUint32(4, 36 + interleavedLength * 2, true);\r\n\r\n            // RIFF type \r\n            writeUTFBytes(view, 8, 'WAVE');\r\n\r\n            // format chunk identifier \r\n            // FMT sub-chunk\r\n            writeUTFBytes(view, 12, 'fmt ');\r\n\r\n            // format chunk length \r\n            view.setUint32(16, 16, true);\r\n\r\n            // sample format (raw)\r\n            view.setUint16(20, 1, true);\r\n\r\n            // stereo (2 channels)\r\n            view.setUint16(22, numberOfAudioChannels, true);\r\n\r\n            // sample rate \r\n            view.setUint32(24, sampleRate, true);\r\n\r\n            // byte rate (sample rate * block align)\r\n            view.setUint32(28, sampleRate * numberOfAudioChannels * 2, true);\r\n\r\n            // block align (channel count * bytes per sample) \r\n            view.setUint16(32, numberOfAudioChannels * 2, true);\r\n\r\n            // bits per sample \r\n            view.setUint16(34, 16, true);\r\n\r\n            // data sub-chunk\r\n            // data chunk identifier \r\n            writeUTFBytes(view, 36, 'data');\r\n\r\n            // data chunk length \r\n            view.setUint32(40, interleavedLength * 2, true);\r\n\r\n            // write the PCM samples\r\n            var lng = interleavedLength;\r\n            var index = 44;\r\n            var volume = 1;\r\n            for (var i = 0; i < lng; i++) {\r\n                view.setInt16(index, interleaved[i] * (0x7FFF * volume), true);\r\n                index += 2;\r\n            }\r\n\r\n            if (cb) {\r\n                return cb({\r\n                    buffer: buffer,\r\n                    view: view\r\n                });\r\n            }\r\n\r\n            postMessage({\r\n                buffer: buffer,\r\n                view: view\r\n            });\r\n        }\r\n\r\n        if (config.noWorker) {\r\n            mergeAudioBuffers(config, function(data) {\r\n                callback(data.buffer, data.view);\r\n            });\r\n            return;\r\n        }\r\n\r\n\r\n        var webWorker = processInWebWorker(mergeAudioBuffers);\r\n\r\n        webWorker.onmessage = function(event) {\r\n            callback(event.data.buffer, event.data.view);\r\n\r\n            // release memory\r\n            URL.revokeObjectURL(webWorker.workerURL);\r\n\r\n            // kill webworker (or Chrome will kill your page after ~25 calls)\r\n            webWorker.terminate();\r\n        };\r\n\r\n        webWorker.postMessage(config);\r\n    }\r\n\r\n    function processInWebWorker(_function) {\r\n        var workerURL = URL.createObjectURL(new Blob([_function.toString(),\r\n            ';this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\r\n        ], {\r\n            type: 'application/javascript'\r\n        }));\r\n\r\n        var worker = new Worker(workerURL);\r\n        worker.workerURL = workerURL;\r\n        return worker;\r\n    }\r\n\r\n    /**\r\n     * This method stops recording MediaStream.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        // stop recording\r\n        recording = false;\r\n\r\n        mergeLeftRightBuffers({\r\n            desiredSampRate: desiredSampRate,\r\n            sampleRate: sampleRate,\r\n            numberOfAudioChannels: numberOfAudioChannels,\r\n            internalInterleavedLength: recordingLength,\r\n            leftBuffers: leftchannel,\r\n            rightBuffers: numberOfAudioChannels === 1 ? [] : rightchannel,\r\n            noWorker: config.noWorker\r\n        }, function(buffer, view) {\r\n            /**\r\n             * @property {Blob} blob - The recorded blob object.\r\n             * @memberof StereoAudioRecorder\r\n             * @example\r\n             * recorder.stop(function(){\r\n             *     var blob = recorder.blob;\r\n             * });\r\n             */\r\n            self.blob = new Blob([view], {\r\n                type: 'audio/wav'\r\n            });\r\n\r\n            /**\r\n             * @property {ArrayBuffer} buffer - The recorded buffer object.\r\n             * @memberof StereoAudioRecorder\r\n             * @example\r\n             * recorder.stop(function(){\r\n             *     var buffer = recorder.buffer;\r\n             * });\r\n             */\r\n            self.buffer = new ArrayBuffer(view.buffer.byteLength);\r\n\r\n            /**\r\n             * @property {DataView} view - The recorded data-view object.\r\n             * @memberof StereoAudioRecorder\r\n             * @example\r\n             * recorder.stop(function(){\r\n             *     var view = recorder.view;\r\n             * });\r\n             */\r\n            self.view = view;\r\n\r\n            self.sampleRate = desiredSampRate || sampleRate;\r\n            self.bufferSize = bufferSize;\r\n\r\n            // recorded audio length\r\n            self.length = recordingLength;\r\n\r\n            isAudioProcessStarted = false;\r\n\r\n            if (callback) {\r\n                callback(self.blob);\r\n            }\r\n        });\r\n    };\r\n\r\n    if (typeof RecordRTC.Storage === 'undefined') {\r\n        RecordRTC.Storage = {\r\n            AudioContextConstructor: null,\r\n            AudioContext: window.AudioContext || window.webkitAudioContext\r\n        };\r\n    }\r\n\r\n    if (!RecordRTC.Storage.AudioContextConstructor || RecordRTC.Storage.AudioContextConstructor.state === 'closed') {\r\n        RecordRTC.Storage.AudioContextConstructor = new RecordRTC.Storage.AudioContext();\r\n    }\r\n\r\n    var context = RecordRTC.Storage.AudioContextConstructor;\r\n\r\n    // creates an audio node from the microphone incoming stream\r\n    var audioInput = context.createMediaStreamSource(mediaStream);\r\n\r\n    var legalBufferValues = [0, 256, 512, 1024, 2048, 4096, 8192, 16384];\r\n\r\n    /**\r\n     * From the spec: This value controls how frequently the audioprocess event is\r\n     * dispatched and how many sample-frames need to be processed each call.\r\n     * Lower values for buffer size will result in a lower (better) latency.\r\n     * Higher values will be necessary to avoid audio breakup and glitches\r\n     * The size of the buffer (in sample-frames) which needs to\r\n     * be processed each time onprocessaudio is called.\r\n     * Legal values are (256, 512, 1024, 2048, 4096, 8192, 16384).\r\n     * @property {number} bufferSize - Buffer-size for how frequently the audioprocess event is dispatched.\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder = new StereoAudioRecorder(mediaStream, {\r\n     *     bufferSize: 4096\r\n     * });\r\n     */\r\n\r\n    // \"0\" means, let chrome decide the most accurate buffer-size for current platform.\r\n    var bufferSize = typeof config.bufferSize === 'undefined' ? 4096 : config.bufferSize;\r\n\r\n    if (legalBufferValues.indexOf(bufferSize) === -1) {\r\n        if (!config.disableLogs) {\r\n            console.log('Legal values for buffer-size are ' + JSON.stringify(legalBufferValues, null, '\\t'));\r\n        }\r\n    }\r\n\r\n    if (context.createJavaScriptNode) {\r\n        jsAudioNode = context.createJavaScriptNode(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\r\n    } else if (context.createScriptProcessor) {\r\n        jsAudioNode = context.createScriptProcessor(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\r\n    } else {\r\n        throw 'WebAudio API has no support on this browser.';\r\n    }\r\n\r\n    // connect the stream to the script processor\r\n    audioInput.connect(jsAudioNode);\r\n\r\n    if (!config.bufferSize) {\r\n        bufferSize = jsAudioNode.bufferSize; // device buffer-size\r\n    }\r\n\r\n    /**\r\n     * The sample rate (in sample-frames per second) at which the\r\n     * AudioContext handles audio. It is assumed that all AudioNodes\r\n     * in the context run at this rate. In making this assumption,\r\n     * sample-rate converters or \"varispeed\" processors are not supported\r\n     * in real-time processing.\r\n     * The sampleRate parameter describes the sample-rate of the\r\n     * linear PCM audio data in the buffer in sample-frames per second.\r\n     * An implementation must support sample-rates in at least\r\n     * the range 22050 to 96000.\r\n     * @property {number} sampleRate - Buffer-size for how frequently the audioprocess event is dispatched.\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder = new StereoAudioRecorder(mediaStream, {\r\n     *     sampleRate: 44100\r\n     * });\r\n     */\r\n    var sampleRate = typeof config.sampleRate !== 'undefined' ? config.sampleRate : context.sampleRate || 44100;\r\n\r\n    if (sampleRate < 22050 || sampleRate > 96000) {\r\n        // Ref: http://stackoverflow.com/a/26303918/552182\r\n        if (!config.disableLogs) {\r\n            console.log('sample-rate must be under range 22050 and 96000.');\r\n        }\r\n    }\r\n\r\n    if (!config.disableLogs) {\r\n        if (config.desiredSampRate) {\r\n            console.log('Desired sample-rate: ' + config.desiredSampRate);\r\n        }\r\n    }\r\n\r\n    var isPaused = false;\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPaused = true;\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        if (isMediaStreamActive() === false) {\r\n            throw 'Please make sure MediaStream is active.';\r\n        }\r\n\r\n        if (!recording) {\r\n            if (!config.disableLogs) {\r\n                console.log('Seems recording has been restarted.');\r\n            }\r\n            this.record();\r\n            return;\r\n        }\r\n\r\n        isPaused = false;\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        config.checkForInactiveTracks = false;\r\n\r\n        if (recording) {\r\n            this.stop(clearRecordedDataCB);\r\n        }\r\n\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function resetVariables() {\r\n        leftchannel = [];\r\n        rightchannel = [];\r\n        recordingLength = 0;\r\n        isAudioProcessStarted = false;\r\n        recording = false;\r\n        isPaused = false;\r\n        context = null;\r\n\r\n        self.leftchannel = leftchannel;\r\n        self.rightchannel = rightchannel;\r\n        self.numberOfAudioChannels = numberOfAudioChannels;\r\n        self.desiredSampRate = desiredSampRate;\r\n        self.sampleRate = sampleRate;\r\n        self.recordingLength = recordingLength;\r\n\r\n        intervalsBasedBuffers = {\r\n            left: [],\r\n            right: [],\r\n            recordingLength: 0\r\n        };\r\n    }\r\n\r\n    function clearRecordedDataCB() {\r\n        if (jsAudioNode) {\r\n            jsAudioNode.onaudioprocess = null;\r\n            jsAudioNode.disconnect();\r\n            jsAudioNode = null;\r\n        }\r\n\r\n        if (audioInput) {\r\n            audioInput.disconnect();\r\n            audioInput = null;\r\n        }\r\n\r\n        resetVariables();\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'StereoAudioRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    var isAudioProcessStarted = false;\r\n\r\n    function onAudioProcessDataAvailable(e) {\r\n        if (isPaused) {\r\n            return;\r\n        }\r\n\r\n        if (isMediaStreamActive() === false) {\r\n            if (!config.disableLogs) {\r\n                console.log('MediaStream seems stopped.');\r\n            }\r\n            jsAudioNode.disconnect();\r\n            recording = false;\r\n        }\r\n\r\n        if (!recording) {\r\n            if (audioInput) {\r\n                audioInput.disconnect();\r\n                audioInput = null;\r\n            }\r\n            return;\r\n        }\r\n\r\n        /**\r\n         * This method is called on \"onaudioprocess\" event's first invocation.\r\n         * @method {function} onAudioProcessStarted\r\n         * @memberof StereoAudioRecorder\r\n         * @example\r\n         * recorder.onAudioProcessStarted: function() { };\r\n         */\r\n        if (!isAudioProcessStarted) {\r\n            isAudioProcessStarted = true;\r\n            if (config.onAudioProcessStarted) {\r\n                config.onAudioProcessStarted();\r\n            }\r\n\r\n            if (config.initCallback) {\r\n                config.initCallback();\r\n            }\r\n        }\r\n\r\n        var left = e.inputBuffer.getChannelData(0);\r\n\r\n        // we clone the samples\r\n        var chLeft = new Float32Array(left);\r\n        leftchannel.push(chLeft);\r\n\r\n        if (numberOfAudioChannels === 2) {\r\n            var right = e.inputBuffer.getChannelData(1);\r\n            var chRight = new Float32Array(right);\r\n            rightchannel.push(chRight);\r\n        }\r\n\r\n        recordingLength += bufferSize;\r\n\r\n        // export raw PCM\r\n        self.recordingLength = recordingLength;\r\n\r\n        if (typeof config.timeSlice !== 'undefined') {\r\n            intervalsBasedBuffers.recordingLength += bufferSize;\r\n            intervalsBasedBuffers.left.push(chLeft);\r\n\r\n            if (numberOfAudioChannels === 2) {\r\n                intervalsBasedBuffers.right.push(chRight);\r\n            }\r\n        }\r\n    }\r\n\r\n    jsAudioNode.onaudioprocess = onAudioProcessDataAvailable;\r\n\r\n    // to prevent self audio to be connected with speakers\r\n    if (context.createMediaStreamDestination) {\r\n        jsAudioNode.connect(context.createMediaStreamDestination());\r\n    } else {\r\n        jsAudioNode.connect(context.destination);\r\n    }\r\n\r\n    // export raw PCM\r\n    this.leftchannel = leftchannel;\r\n    this.rightchannel = rightchannel;\r\n    this.numberOfAudioChannels = numberOfAudioChannels;\r\n    this.desiredSampRate = desiredSampRate;\r\n    this.sampleRate = sampleRate;\r\n    self.recordingLength = recordingLength;\r\n\r\n    // helper for intervals based blobs\r\n    var intervalsBasedBuffers = {\r\n        left: [],\r\n        right: [],\r\n        recordingLength: 0\r\n    };\r\n\r\n    // this looper is used to support intervals based blobs (via timeSlice+ondataavailable)\r\n    function looper() {\r\n        if (!recording || typeof config.ondataavailable !== 'function' || typeof config.timeSlice === 'undefined') {\r\n            return;\r\n        }\r\n\r\n        if (intervalsBasedBuffers.left.length) {\r\n            mergeLeftRightBuffers({\r\n                desiredSampRate: desiredSampRate,\r\n                sampleRate: sampleRate,\r\n                numberOfAudioChannels: numberOfAudioChannels,\r\n                internalInterleavedLength: intervalsBasedBuffers.recordingLength,\r\n                leftBuffers: intervalsBasedBuffers.left,\r\n                rightBuffers: numberOfAudioChannels === 1 ? [] : intervalsBasedBuffers.right\r\n            }, function(buffer, view) {\r\n                var blob = new Blob([view], {\r\n                    type: 'audio/wav'\r\n                });\r\n                config.ondataavailable(blob);\r\n\r\n                setTimeout(looper, config.timeSlice);\r\n            });\r\n\r\n            intervalsBasedBuffers = {\r\n                left: [],\r\n                right: [],\r\n                recordingLength: 0\r\n            };\r\n        } else {\r\n            setTimeout(looper, config.timeSlice);\r\n        }\r\n    }\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.StereoAudioRecorder = StereoAudioRecorder;\r\n}\r\n\r\n// _________________\r\n// CanvasRecorder.js\r\n\r\n/**\r\n * CanvasRecorder is a standalone class used by {@link RecordRTC} to bring HTML5-Canvas recording into video WebM. It uses HTML2Canvas library and runs top over {@link Whammy}.\r\n * @summary HTML2Canvas recording into video WebM.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef CanvasRecorder\r\n * @class\r\n * @example\r\n * var recorder = new CanvasRecorder(htmlElement, { disableLogs: true, useWhammyRecorder: true });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {HTMLElement} htmlElement - querySelector/getElementById/getElementsByTagName[0]/etc.\r\n * @param {object} config - {disableLogs:true, initCallback: function}\r\n */\r\n\r\nfunction CanvasRecorder(htmlElement, config) {\r\n    if (typeof html2canvas === 'undefined') {\r\n        throw 'Please link: https://www.webrtc-experiment.com/screenshot.js';\r\n    }\r\n\r\n    config = config || {};\r\n    if (!config.frameInterval) {\r\n        config.frameInterval = 10;\r\n    }\r\n\r\n    // via DetectRTC.js\r\n    var isCanvasSupportsStreamCapturing = false;\r\n    ['captureStream', 'mozCaptureStream', 'webkitCaptureStream'].forEach(function(item) {\r\n        if (item in document.createElement('canvas')) {\r\n            isCanvasSupportsStreamCapturing = true;\r\n        }\r\n    });\r\n\r\n    var _isChrome = (!!window.webkitRTCPeerConnection || !!window.webkitGetUserMedia) && !!window.chrome;\r\n\r\n    var chromeVersion = 50;\r\n    var matchArray = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\r\n    if (_isChrome && matchArray && matchArray[2]) {\r\n        chromeVersion = parseInt(matchArray[2], 10);\r\n    }\r\n\r\n    if (_isChrome && chromeVersion < 52) {\r\n        isCanvasSupportsStreamCapturing = false;\r\n    }\r\n\r\n    if (config.useWhammyRecorder) {\r\n        isCanvasSupportsStreamCapturing = false;\r\n    }\r\n\r\n    var globalCanvas, mediaStreamRecorder;\r\n\r\n    if (isCanvasSupportsStreamCapturing) {\r\n        if (!config.disableLogs) {\r\n            console.log('Your browser supports both MediRecorder API and canvas.captureStream!');\r\n        }\r\n\r\n        if (htmlElement instanceof HTMLCanvasElement) {\r\n            globalCanvas = htmlElement;\r\n        } else if (htmlElement instanceof CanvasRenderingContext2D) {\r\n            globalCanvas = htmlElement.canvas;\r\n        } else {\r\n            throw 'Please pass either HTMLCanvasElement or CanvasRenderingContext2D.';\r\n        }\r\n    } else if (!!navigator.mozGetUserMedia) {\r\n        if (!config.disableLogs) {\r\n            console.error('Canvas recording is NOT supported in Firefox.');\r\n        }\r\n    }\r\n\r\n    var isRecording;\r\n\r\n    /**\r\n     * This method records Canvas.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        isRecording = true;\r\n\r\n        if (isCanvasSupportsStreamCapturing && !config.useWhammyRecorder) {\r\n            // CanvasCaptureMediaStream\r\n            var canvasMediaStream;\r\n            if ('captureStream' in globalCanvas) {\r\n                canvasMediaStream = globalCanvas.captureStream(25); // 25 FPS\r\n            } else if ('mozCaptureStream' in globalCanvas) {\r\n                canvasMediaStream = globalCanvas.mozCaptureStream(25);\r\n            } else if ('webkitCaptureStream' in globalCanvas) {\r\n                canvasMediaStream = globalCanvas.webkitCaptureStream(25);\r\n            }\r\n\r\n            try {\r\n                var mdStream = new MediaStream();\r\n                mdStream.addTrack(getTracks(canvasMediaStream, 'video')[0]);\r\n                canvasMediaStream = mdStream;\r\n            } catch (e) {}\r\n\r\n            if (!canvasMediaStream) {\r\n                throw 'captureStream API are NOT available.';\r\n            }\r\n\r\n            // Note: Jan 18, 2016 status is that, \r\n            // Firefox MediaRecorder API can't record CanvasCaptureMediaStream object.\r\n            mediaStreamRecorder = new MediaStreamRecorder(canvasMediaStream, {\r\n                mimeType: config.mimeType || 'video/webm'\r\n            });\r\n            mediaStreamRecorder.record();\r\n        } else {\r\n            whammy.frames = [];\r\n            lastTime = new Date().getTime();\r\n            drawCanvasFrame();\r\n        }\r\n\r\n        if (config.initCallback) {\r\n            config.initCallback();\r\n        }\r\n    };\r\n\r\n    this.getWebPImages = function(callback) {\r\n        if (htmlElement.nodeName.toLowerCase() !== 'canvas') {\r\n            callback();\r\n            return;\r\n        }\r\n\r\n        var framesLength = whammy.frames.length;\r\n        whammy.frames.forEach(function(frame, idx) {\r\n            var framesRemaining = framesLength - idx;\r\n            if (!config.disableLogs) {\r\n                console.log(framesRemaining + '/' + framesLength + ' frames remaining');\r\n            }\r\n\r\n            if (config.onEncodingCallback) {\r\n                config.onEncodingCallback(framesRemaining, framesLength);\r\n            }\r\n\r\n            var webp = frame.image.toDataURL('image/webp', 1);\r\n            whammy.frames[idx].image = webp;\r\n        });\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Generating WebM');\r\n        }\r\n\r\n        callback();\r\n    };\r\n\r\n    /**\r\n     * This method stops recording Canvas.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        isRecording = false;\r\n\r\n        var that = this;\r\n\r\n        if (isCanvasSupportsStreamCapturing && mediaStreamRecorder) {\r\n            mediaStreamRecorder.stop(callback);\r\n            return;\r\n        }\r\n\r\n        this.getWebPImages(function() {\r\n            /**\r\n             * @property {Blob} blob - Recorded frames in video/webm blob.\r\n             * @memberof CanvasRecorder\r\n             * @example\r\n             * recorder.stop(function() {\r\n             *     var blob = recorder.blob;\r\n             * });\r\n             */\r\n            whammy.compile(function(blob) {\r\n                if (!config.disableLogs) {\r\n                    console.log('Recording finished!');\r\n                }\r\n\r\n                that.blob = blob;\r\n\r\n                if (that.blob.forEach) {\r\n                    that.blob = new Blob([], {\r\n                        type: 'video/webm'\r\n                    });\r\n                }\r\n\r\n                if (callback) {\r\n                    callback(that.blob);\r\n                }\r\n\r\n                whammy.frames = [];\r\n            });\r\n        });\r\n    };\r\n\r\n    var isPausedRecording = false;\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPausedRecording = true;\r\n\r\n        if (mediaStreamRecorder instanceof MediaStreamRecorder) {\r\n            mediaStreamRecorder.pause();\r\n            return;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        isPausedRecording = false;\r\n\r\n        if (mediaStreamRecorder instanceof MediaStreamRecorder) {\r\n            mediaStreamRecorder.resume();\r\n            return;\r\n        }\r\n\r\n        if (!isRecording) {\r\n            this.record();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        if (isRecording) {\r\n            this.stop(clearRecordedDataCB);\r\n        }\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function clearRecordedDataCB() {\r\n        whammy.frames = [];\r\n        isRecording = false;\r\n        isPausedRecording = false;\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'CanvasRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    function cloneCanvas() {\r\n        //create a new canvas\r\n        var newCanvas = document.createElement('canvas');\r\n        var context = newCanvas.getContext('2d');\r\n\r\n        //set dimensions\r\n        newCanvas.width = htmlElement.width;\r\n        newCanvas.height = htmlElement.height;\r\n\r\n        //apply the old canvas to the new one\r\n        context.drawImage(htmlElement, 0, 0);\r\n\r\n        //return the new canvas\r\n        return newCanvas;\r\n    }\r\n\r\n    function drawCanvasFrame() {\r\n        if (isPausedRecording) {\r\n            lastTime = new Date().getTime();\r\n            return setTimeout(drawCanvasFrame, 500);\r\n        }\r\n\r\n        if (htmlElement.nodeName.toLowerCase() === 'canvas') {\r\n            var duration = new Date().getTime() - lastTime;\r\n            // via #206, by Jack i.e. @Seymourr\r\n            lastTime = new Date().getTime();\r\n\r\n            whammy.frames.push({\r\n                image: cloneCanvas(),\r\n                duration: duration\r\n            });\r\n\r\n            if (isRecording) {\r\n                setTimeout(drawCanvasFrame, config.frameInterval);\r\n            }\r\n            return;\r\n        }\r\n\r\n        html2canvas(htmlElement, {\r\n            grabMouse: typeof config.showMousePointer === 'undefined' || config.showMousePointer,\r\n            onrendered: function(canvas) {\r\n                var duration = new Date().getTime() - lastTime;\r\n                if (!duration) {\r\n                    return setTimeout(drawCanvasFrame, config.frameInterval);\r\n                }\r\n\r\n                // via #206, by Jack i.e. @Seymourr\r\n                lastTime = new Date().getTime();\r\n\r\n                whammy.frames.push({\r\n                    image: canvas.toDataURL('image/webp', 1),\r\n                    duration: duration\r\n                });\r\n\r\n                if (isRecording) {\r\n                    setTimeout(drawCanvasFrame, config.frameInterval);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    var lastTime = new Date().getTime();\r\n\r\n    var whammy = new Whammy.Video(100);\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.CanvasRecorder = CanvasRecorder;\r\n}\r\n\r\n// _________________\r\n// WhammyRecorder.js\r\n\r\n/**\r\n * WhammyRecorder is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It runs top over {@link Whammy}.\r\n * @summary Video recording feature in Chrome.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef WhammyRecorder\r\n * @class\r\n * @example\r\n * var recorder = new WhammyRecorder(mediaStream);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {disableLogs: true, initCallback: function, video: HTMLVideoElement, etc.}\r\n */\r\n\r\nfunction WhammyRecorder(mediaStream, config) {\r\n\r\n    config = config || {};\r\n\r\n    if (!config.frameInterval) {\r\n        config.frameInterval = 10;\r\n    }\r\n\r\n    if (!config.disableLogs) {\r\n        console.log('Using frames-interval:', config.frameInterval);\r\n    }\r\n\r\n    /**\r\n     * This method records video.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        if (!config.width) {\r\n            config.width = 320;\r\n        }\r\n\r\n        if (!config.height) {\r\n            config.height = 240;\r\n        }\r\n\r\n        if (!config.video) {\r\n            config.video = {\r\n                width: config.width,\r\n                height: config.height\r\n            };\r\n        }\r\n\r\n        if (!config.canvas) {\r\n            config.canvas = {\r\n                width: config.width,\r\n                height: config.height\r\n            };\r\n        }\r\n\r\n        canvas.width = config.canvas.width || 320;\r\n        canvas.height = config.canvas.height || 240;\r\n\r\n        context = canvas.getContext('2d');\r\n\r\n        // setting defaults\r\n        if (config.video && config.video instanceof HTMLVideoElement) {\r\n            video = config.video.cloneNode();\r\n\r\n            if (config.initCallback) {\r\n                config.initCallback();\r\n            }\r\n        } else {\r\n            video = document.createElement('video');\r\n\r\n            setSrcObject(mediaStream, video);\r\n\r\n            video.onloadedmetadata = function() { // \"onloadedmetadata\" may NOT work in FF?\r\n                if (config.initCallback) {\r\n                    config.initCallback();\r\n                }\r\n            };\r\n\r\n            video.width = config.video.width;\r\n            video.height = config.video.height;\r\n        }\r\n\r\n        video.muted = true;\r\n        video.play();\r\n\r\n        lastTime = new Date().getTime();\r\n        whammy = new Whammy.Video();\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('canvas resolutions', canvas.width, '*', canvas.height);\r\n            console.log('video width/height', video.width || canvas.width, '*', video.height || canvas.height);\r\n        }\r\n\r\n        drawFrames(config.frameInterval);\r\n    };\r\n\r\n    /**\r\n     * Draw and push frames to Whammy\r\n     * @param {integer} frameInterval - set minimum interval (in milliseconds) between each time we push a frame to Whammy\r\n     */\r\n    function drawFrames(frameInterval) {\r\n        frameInterval = typeof frameInterval !== 'undefined' ? frameInterval : 10;\r\n\r\n        var duration = new Date().getTime() - lastTime;\r\n        if (!duration) {\r\n            return setTimeout(drawFrames, frameInterval, frameInterval);\r\n        }\r\n\r\n        if (isPausedRecording) {\r\n            lastTime = new Date().getTime();\r\n            return setTimeout(drawFrames, 100);\r\n        }\r\n\r\n        // via #206, by Jack i.e. @Seymourr\r\n        lastTime = new Date().getTime();\r\n\r\n        if (video.paused) {\r\n            // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\r\n            // Tweak for Android Chrome\r\n            video.play();\r\n        }\r\n\r\n        context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n        whammy.frames.push({\r\n            duration: duration,\r\n            image: canvas.toDataURL('image/webp')\r\n        });\r\n\r\n        if (!isStopDrawing) {\r\n            setTimeout(drawFrames, frameInterval, frameInterval);\r\n        }\r\n    }\r\n\r\n    function asyncLoop(o) {\r\n        var i = -1,\r\n            length = o.length;\r\n\r\n        (function loop() {\r\n            i++;\r\n            if (i === length) {\r\n                o.callback();\r\n                return;\r\n            }\r\n\r\n            // \"setTimeout\" added by Jim McLeod\r\n            setTimeout(function() {\r\n                o.functionToLoop(loop, i);\r\n            }, 1);\r\n        })();\r\n    }\r\n\r\n\r\n    /**\r\n     * remove black frames from the beginning to the specified frame\r\n     * @param {Array} _frames - array of frames to be checked\r\n     * @param {number} _framesToCheck - number of frame until check will be executed (-1 - will drop all frames until frame not matched will be found)\r\n     * @param {number} _pixTolerance - 0 - very strict (only black pixel color) ; 1 - all\r\n     * @param {number} _frameTolerance - 0 - very strict (only black frame color) ; 1 - all\r\n     * @returns {Array} - array of frames\r\n     */\r\n    // pull#293 by @volodalexey\r\n    function dropBlackFrames(_frames, _framesToCheck, _pixTolerance, _frameTolerance, callback) {\r\n        var localCanvas = document.createElement('canvas');\r\n        localCanvas.width = canvas.width;\r\n        localCanvas.height = canvas.height;\r\n        var context2d = localCanvas.getContext('2d');\r\n        var resultFrames = [];\r\n\r\n        var checkUntilNotBlack = _framesToCheck === -1;\r\n        var endCheckFrame = (_framesToCheck && _framesToCheck > 0 && _framesToCheck <= _frames.length) ?\r\n            _framesToCheck : _frames.length;\r\n        var sampleColor = {\r\n            r: 0,\r\n            g: 0,\r\n            b: 0\r\n        };\r\n        var maxColorDifference = Math.sqrt(\r\n            Math.pow(255, 2) +\r\n            Math.pow(255, 2) +\r\n            Math.pow(255, 2)\r\n        );\r\n        var pixTolerance = _pixTolerance && _pixTolerance >= 0 && _pixTolerance <= 1 ? _pixTolerance : 0;\r\n        var frameTolerance = _frameTolerance && _frameTolerance >= 0 && _frameTolerance <= 1 ? _frameTolerance : 0;\r\n        var doNotCheckNext = false;\r\n\r\n        asyncLoop({\r\n            length: endCheckFrame,\r\n            functionToLoop: function(loop, f) {\r\n                var matchPixCount, endPixCheck, maxPixCount;\r\n\r\n                var finishImage = function() {\r\n                    if (!doNotCheckNext && maxPixCount - matchPixCount <= maxPixCount * frameTolerance) {\r\n                        // console.log('removed black frame : ' + f + ' ; frame duration ' + _frames[f].duration);\r\n                    } else {\r\n                        // console.log('frame is passed : ' + f);\r\n                        if (checkUntilNotBlack) {\r\n                            doNotCheckNext = true;\r\n                        }\r\n                        resultFrames.push(_frames[f]);\r\n                    }\r\n                    loop();\r\n                };\r\n\r\n                if (!doNotCheckNext) {\r\n                    var image = new Image();\r\n                    image.onload = function() {\r\n                        context2d.drawImage(image, 0, 0, canvas.width, canvas.height);\r\n                        var imageData = context2d.getImageData(0, 0, canvas.width, canvas.height);\r\n                        matchPixCount = 0;\r\n                        endPixCheck = imageData.data.length;\r\n                        maxPixCount = imageData.data.length / 4;\r\n\r\n                        for (var pix = 0; pix < endPixCheck; pix += 4) {\r\n                            var currentColor = {\r\n                                r: imageData.data[pix],\r\n                                g: imageData.data[pix + 1],\r\n                                b: imageData.data[pix + 2]\r\n                            };\r\n                            var colorDifference = Math.sqrt(\r\n                                Math.pow(currentColor.r - sampleColor.r, 2) +\r\n                                Math.pow(currentColor.g - sampleColor.g, 2) +\r\n                                Math.pow(currentColor.b - sampleColor.b, 2)\r\n                            );\r\n                            // difference in color it is difference in color vectors (r1,g1,b1) <=> (r2,g2,b2)\r\n                            if (colorDifference <= maxColorDifference * pixTolerance) {\r\n                                matchPixCount++;\r\n                            }\r\n                        }\r\n                        finishImage();\r\n                    };\r\n                    image.src = _frames[f].image;\r\n                } else {\r\n                    finishImage();\r\n                }\r\n            },\r\n            callback: function() {\r\n                resultFrames = resultFrames.concat(_frames.slice(endCheckFrame));\r\n\r\n                if (resultFrames.length <= 0) {\r\n                    // at least one last frame should be available for next manipulation\r\n                    // if total duration of all frames will be < 1000 than ffmpeg doesn't work well...\r\n                    resultFrames.push(_frames[_frames.length - 1]);\r\n                }\r\n                callback(resultFrames);\r\n            }\r\n        });\r\n    }\r\n\r\n    var isStopDrawing = false;\r\n\r\n    /**\r\n     * This method stops recording video.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        isStopDrawing = true;\r\n\r\n        var _this = this;\r\n        // analyse of all frames takes some time!\r\n        setTimeout(function() {\r\n            // e.g. dropBlackFrames(frames, 10, 1, 1) - will cut all 10 frames\r\n            // e.g. dropBlackFrames(frames, 10, 0.5, 0.5) - will analyse 10 frames\r\n            // e.g. dropBlackFrames(frames, 10) === dropBlackFrames(frames, 10, 0, 0) - will analyse 10 frames with strict black color\r\n            dropBlackFrames(whammy.frames, -1, null, null, function(frames) {\r\n                whammy.frames = frames;\r\n\r\n                // to display advertisement images!\r\n                if (config.advertisement && config.advertisement.length) {\r\n                    whammy.frames = config.advertisement.concat(whammy.frames);\r\n                }\r\n\r\n                /**\r\n                 * @property {Blob} blob - Recorded frames in video/webm blob.\r\n                 * @memberof WhammyRecorder\r\n                 * @example\r\n                 * recorder.stop(function() {\r\n                 *     var blob = recorder.blob;\r\n                 * });\r\n                 */\r\n                whammy.compile(function(blob) {\r\n                    _this.blob = blob;\r\n\r\n                    if (_this.blob.forEach) {\r\n                        _this.blob = new Blob([], {\r\n                            type: 'video/webm'\r\n                        });\r\n                    }\r\n\r\n                    if (callback) {\r\n                        callback(_this.blob);\r\n                    }\r\n                });\r\n            });\r\n        }, 10);\r\n    };\r\n\r\n    var isPausedRecording = false;\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPausedRecording = true;\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        isPausedRecording = false;\r\n\r\n        if (isStopDrawing) {\r\n            this.record();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        if (!isStopDrawing) {\r\n            this.stop(clearRecordedDataCB);\r\n        }\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function clearRecordedDataCB() {\r\n        whammy.frames = [];\r\n        isStopDrawing = true;\r\n        isPausedRecording = false;\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'WhammyRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    var canvas = document.createElement('canvas');\r\n    var context = canvas.getContext('2d');\r\n\r\n    var video;\r\n    var lastTime;\r\n    var whammy;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.WhammyRecorder = WhammyRecorder;\r\n}\r\n\r\n// https://github.com/antimatter15/whammy/blob/master/LICENSE\r\n// _________\r\n// Whammy.js\r\n\r\n// todo: Firefox now supports webp for webm containers!\r\n// their MediaRecorder implementation works well!\r\n// should we provide an option to record via Whammy.js or MediaRecorder API is a better solution?\r\n\r\n/**\r\n * Whammy is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It is written by {@link https://github.com/antimatter15|antimatter15}\r\n * @summary A real time javascript webm encoder based on a canvas hack.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef Whammy\r\n * @class\r\n * @example\r\n * var recorder = new Whammy().Video(15);\r\n * recorder.add(context || canvas || dataURL);\r\n * var output = recorder.compile();\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\n\r\nvar Whammy = (function() {\r\n    // a more abstract-ish API\r\n\r\n    function WhammyVideo(duration) {\r\n        this.frames = [];\r\n        this.duration = duration || 1;\r\n        this.quality = 0.8;\r\n    }\r\n\r\n    /**\r\n     * Pass Canvas or Context or image/webp(string) to {@link Whammy} encoder.\r\n     * @method\r\n     * @memberof Whammy\r\n     * @example\r\n     * recorder = new Whammy().Video(0.8, 100);\r\n     * recorder.add(canvas || context || 'image/webp');\r\n     * @param {string} frame - Canvas || Context || image/webp\r\n     * @param {number} duration - Stick a duration (in milliseconds)\r\n     */\r\n    WhammyVideo.prototype.add = function(frame, duration) {\r\n        if ('canvas' in frame) { //CanvasRenderingContext2D\r\n            frame = frame.canvas;\r\n        }\r\n\r\n        if ('toDataURL' in frame) {\r\n            frame = frame.toDataURL('image/webp', this.quality);\r\n        }\r\n\r\n        if (!(/^data:image\\/webp;base64,/ig).test(frame)) {\r\n            throw 'Input must be formatted properly as a base64 encoded DataURI of type image/webp';\r\n        }\r\n        this.frames.push({\r\n            image: frame,\r\n            duration: duration || this.duration\r\n        });\r\n    };\r\n\r\n    function processInWebWorker(_function) {\r\n        var blob = URL.createObjectURL(new Blob([_function.toString(),\r\n            'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\r\n        ], {\r\n            type: 'application/javascript'\r\n        }));\r\n\r\n        var worker = new Worker(blob);\r\n        URL.revokeObjectURL(blob);\r\n        return worker;\r\n    }\r\n\r\n    function whammyInWebWorker(frames) {\r\n        function ArrayToWebM(frames) {\r\n            var info = checkFrames(frames);\r\n            if (!info) {\r\n                return [];\r\n            }\r\n\r\n            var clusterMaxDuration = 30000;\r\n\r\n            var EBML = [{\r\n                'id': 0x1a45dfa3, // EBML\r\n                'data': [{\r\n                    'data': 1,\r\n                    'id': 0x4286 // EBMLVersion\r\n                }, {\r\n                    'data': 1,\r\n                    'id': 0x42f7 // EBMLReadVersion\r\n                }, {\r\n                    'data': 4,\r\n                    'id': 0x42f2 // EBMLMaxIDLength\r\n                }, {\r\n                    'data': 8,\r\n                    'id': 0x42f3 // EBMLMaxSizeLength\r\n                }, {\r\n                    'data': 'webm',\r\n                    'id': 0x4282 // DocType\r\n                }, {\r\n                    'data': 2,\r\n                    'id': 0x4287 // DocTypeVersion\r\n                }, {\r\n                    'data': 2,\r\n                    'id': 0x4285 // DocTypeReadVersion\r\n                }]\r\n            }, {\r\n                'id': 0x18538067, // Segment\r\n                'data': [{\r\n                    'id': 0x1549a966, // Info\r\n                    'data': [{\r\n                        'data': 1e6, //do things in millisecs (num of nanosecs for duration scale)\r\n                        'id': 0x2ad7b1 // TimecodeScale\r\n                    }, {\r\n                        'data': 'whammy',\r\n                        'id': 0x4d80 // MuxingApp\r\n                    }, {\r\n                        'data': 'whammy',\r\n                        'id': 0x5741 // WritingApp\r\n                    }, {\r\n                        'data': doubleToString(info.duration),\r\n                        'id': 0x4489 // Duration\r\n                    }]\r\n                }, {\r\n                    'id': 0x1654ae6b, // Tracks\r\n                    'data': [{\r\n                        'id': 0xae, // TrackEntry\r\n                        'data': [{\r\n                            'data': 1,\r\n                            'id': 0xd7 // TrackNumber\r\n                        }, {\r\n                            'data': 1,\r\n                            'id': 0x73c5 // TrackUID\r\n                        }, {\r\n                            'data': 0,\r\n                            'id': 0x9c // FlagLacing\r\n                        }, {\r\n                            'data': 'und',\r\n                            'id': 0x22b59c // Language\r\n                        }, {\r\n                            'data': 'V_VP8',\r\n                            'id': 0x86 // CodecID\r\n                        }, {\r\n                            'data': 'VP8',\r\n                            'id': 0x258688 // CodecName\r\n                        }, {\r\n                            'data': 1,\r\n                            'id': 0x83 // TrackType\r\n                        }, {\r\n                            'id': 0xe0, // Video\r\n                            'data': [{\r\n                                'data': info.width,\r\n                                'id': 0xb0 // PixelWidth\r\n                            }, {\r\n                                'data': info.height,\r\n                                'id': 0xba // PixelHeight\r\n                            }]\r\n                        }]\r\n                    }]\r\n                }]\r\n            }];\r\n\r\n            //Generate clusters (max duration)\r\n            var frameNumber = 0;\r\n            var clusterTimecode = 0;\r\n            while (frameNumber < frames.length) {\r\n\r\n                var clusterFrames = [];\r\n                var clusterDuration = 0;\r\n                do {\r\n                    clusterFrames.push(frames[frameNumber]);\r\n                    clusterDuration += frames[frameNumber].duration;\r\n                    frameNumber++;\r\n                } while (frameNumber < frames.length && clusterDuration < clusterMaxDuration);\r\n\r\n                var clusterCounter = 0;\r\n                var cluster = {\r\n                    'id': 0x1f43b675, // Cluster\r\n                    'data': getClusterData(clusterTimecode, clusterCounter, clusterFrames)\r\n                }; //Add cluster to segment\r\n                EBML[1].data.push(cluster);\r\n                clusterTimecode += clusterDuration;\r\n            }\r\n\r\n            return generateEBML(EBML);\r\n        }\r\n\r\n        function getClusterData(clusterTimecode, clusterCounter, clusterFrames) {\r\n            return [{\r\n                'data': clusterTimecode,\r\n                'id': 0xe7 // Timecode\r\n            }].concat(clusterFrames.map(function(webp) {\r\n                var block = makeSimpleBlock({\r\n                    discardable: 0,\r\n                    frame: webp.data.slice(4),\r\n                    invisible: 0,\r\n                    keyframe: 1,\r\n                    lacing: 0,\r\n                    trackNum: 1,\r\n                    timecode: Math.round(clusterCounter)\r\n                });\r\n                clusterCounter += webp.duration;\r\n                return {\r\n                    data: block,\r\n                    id: 0xa3\r\n                };\r\n            }));\r\n        }\r\n\r\n        // sums the lengths of all the frames and gets the duration\r\n\r\n        function checkFrames(frames) {\r\n            if (!frames[0]) {\r\n                postMessage({\r\n                    error: 'Something went wrong. Maybe WebP format is not supported in the current browser.'\r\n                });\r\n                return;\r\n            }\r\n\r\n            var width = frames[0].width,\r\n                height = frames[0].height,\r\n                duration = frames[0].duration;\r\n\r\n            for (var i = 1; i < frames.length; i++) {\r\n                duration += frames[i].duration;\r\n            }\r\n            return {\r\n                duration: duration,\r\n                width: width,\r\n                height: height\r\n            };\r\n        }\r\n\r\n        function numToBuffer(num) {\r\n            var parts = [];\r\n            while (num > 0) {\r\n                parts.push(num & 0xff);\r\n                num = num >> 8;\r\n            }\r\n            return new Uint8Array(parts.reverse());\r\n        }\r\n\r\n        function strToBuffer(str) {\r\n            return new Uint8Array(str.split('').map(function(e) {\r\n                return e.charCodeAt(0);\r\n            }));\r\n        }\r\n\r\n        function bitsToBuffer(bits) {\r\n            var data = [];\r\n            var pad = (bits.length % 8) ? (new Array(1 + 8 - (bits.length % 8))).join('0') : '';\r\n            bits = pad + bits;\r\n            for (var i = 0; i < bits.length; i += 8) {\r\n                data.push(parseInt(bits.substr(i, 8), 2));\r\n            }\r\n            return new Uint8Array(data);\r\n        }\r\n\r\n        function generateEBML(json) {\r\n            var ebml = [];\r\n            for (var i = 0; i < json.length; i++) {\r\n                var data = json[i].data;\r\n\r\n                if (typeof data === 'object') {\r\n                    data = generateEBML(data);\r\n                }\r\n\r\n                if (typeof data === 'number') {\r\n                    data = bitsToBuffer(data.toString(2));\r\n                }\r\n\r\n                if (typeof data === 'string') {\r\n                    data = strToBuffer(data);\r\n                }\r\n\r\n                var len = data.size || data.byteLength || data.length;\r\n                var zeroes = Math.ceil(Math.ceil(Math.log(len) / Math.log(2)) / 8);\r\n                var sizeToString = len.toString(2);\r\n                var padded = (new Array((zeroes * 7 + 7 + 1) - sizeToString.length)).join('0') + sizeToString;\r\n                var size = (new Array(zeroes)).join('0') + '1' + padded;\r\n\r\n                ebml.push(numToBuffer(json[i].id));\r\n                ebml.push(bitsToBuffer(size));\r\n                ebml.push(data);\r\n            }\r\n\r\n            return new Blob(ebml, {\r\n                type: 'video/webm'\r\n            });\r\n        }\r\n\r\n        function toBinStrOld(bits) {\r\n            var data = '';\r\n            var pad = (bits.length % 8) ? (new Array(1 + 8 - (bits.length % 8))).join('0') : '';\r\n            bits = pad + bits;\r\n            for (var i = 0; i < bits.length; i += 8) {\r\n                data += String.fromCharCode(parseInt(bits.substr(i, 8), 2));\r\n            }\r\n            return data;\r\n        }\r\n\r\n        function makeSimpleBlock(data) {\r\n            var flags = 0;\r\n\r\n            if (data.keyframe) {\r\n                flags |= 128;\r\n            }\r\n\r\n            if (data.invisible) {\r\n                flags |= 8;\r\n            }\r\n\r\n            if (data.lacing) {\r\n                flags |= (data.lacing << 1);\r\n            }\r\n\r\n            if (data.discardable) {\r\n                flags |= 1;\r\n            }\r\n\r\n            if (data.trackNum > 127) {\r\n                throw 'TrackNumber > 127 not supported';\r\n            }\r\n\r\n            var out = [data.trackNum | 0x80, data.timecode >> 8, data.timecode & 0xff, flags].map(function(e) {\r\n                return String.fromCharCode(e);\r\n            }).join('') + data.frame;\r\n\r\n            return out;\r\n        }\r\n\r\n        function parseWebP(riff) {\r\n            var VP8 = riff.RIFF[0].WEBP[0];\r\n\r\n            var frameStart = VP8.indexOf('\\x9d\\x01\\x2a'); // A VP8 keyframe starts with the 0x9d012a header\r\n            for (var i = 0, c = []; i < 4; i++) {\r\n                c[i] = VP8.charCodeAt(frameStart + 3 + i);\r\n            }\r\n\r\n            var width, height, tmp;\r\n\r\n            //the code below is literally copied verbatim from the bitstream spec\r\n            tmp = (c[1] << 8) | c[0];\r\n            width = tmp & 0x3FFF;\r\n            tmp = (c[3] << 8) | c[2];\r\n            height = tmp & 0x3FFF;\r\n            return {\r\n                width: width,\r\n                height: height,\r\n                data: VP8,\r\n                riff: riff\r\n            };\r\n        }\r\n\r\n        function getStrLength(string, offset) {\r\n            return parseInt(string.substr(offset + 4, 4).split('').map(function(i) {\r\n                var unpadded = i.charCodeAt(0).toString(2);\r\n                return (new Array(8 - unpadded.length + 1)).join('0') + unpadded;\r\n            }).join(''), 2);\r\n        }\r\n\r\n        function parseRIFF(string) {\r\n            var offset = 0;\r\n            var chunks = {};\r\n\r\n            while (offset < string.length) {\r\n                var id = string.substr(offset, 4);\r\n                var len = getStrLength(string, offset);\r\n                var data = string.substr(offset + 4 + 4, len);\r\n                offset += 4 + 4 + len;\r\n                chunks[id] = chunks[id] || [];\r\n\r\n                if (id === 'RIFF' || id === 'LIST') {\r\n                    chunks[id].push(parseRIFF(data));\r\n                } else {\r\n                    chunks[id].push(data);\r\n                }\r\n            }\r\n            return chunks;\r\n        }\r\n\r\n        function doubleToString(num) {\r\n            return [].slice.call(\r\n                new Uint8Array((new Float64Array([num])).buffer), 0).map(function(e) {\r\n                return String.fromCharCode(e);\r\n            }).reverse().join('');\r\n        }\r\n\r\n        var webm = new ArrayToWebM(frames.map(function(frame) {\r\n            var webp = parseWebP(parseRIFF(atob(frame.image.slice(23))));\r\n            webp.duration = frame.duration;\r\n            return webp;\r\n        }));\r\n\r\n        postMessage(webm);\r\n    }\r\n\r\n    /**\r\n     * Encodes frames in WebM container. It uses WebWorkinvoke to invoke 'ArrayToWebM' method.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof Whammy\r\n     * @example\r\n     * recorder = new Whammy().Video(0.8, 100);\r\n     * recorder.compile(function(blob) {\r\n     *    // blob.size - blob.type\r\n     * });\r\n     */\r\n    WhammyVideo.prototype.compile = function(callback) {\r\n        var webWorker = processInWebWorker(whammyInWebWorker);\r\n\r\n        webWorker.onmessage = function(event) {\r\n            if (event.data.error) {\r\n                console.error(event.data.error);\r\n                return;\r\n            }\r\n            callback(event.data);\r\n        };\r\n\r\n        webWorker.postMessage(this.frames);\r\n    };\r\n\r\n    return {\r\n        /**\r\n         * A more abstract-ish API.\r\n         * @method\r\n         * @memberof Whammy\r\n         * @example\r\n         * recorder = new Whammy().Video(0.8, 100);\r\n         * @param {?number} speed - 0.8\r\n         * @param {?number} quality - 100\r\n         */\r\n        Video: WhammyVideo\r\n    };\r\n})();\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.Whammy = Whammy;\r\n}\r\n\r\n// ______________ (indexed-db)\r\n// DiskStorage.js\r\n\r\n/**\r\n * DiskStorage is a standalone object used by {@link RecordRTC} to store recorded blobs in IndexedDB storage.\r\n * @summary Writing blobs into IndexedDB.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @example\r\n * DiskStorage.Store({\r\n *     audioBlob: yourAudioBlob,\r\n *     videoBlob: yourVideoBlob,\r\n *     gifBlob  : yourGifBlob\r\n * });\r\n * DiskStorage.Fetch(function(dataURL, type) {\r\n *     if(type === 'audioBlob') { }\r\n *     if(type === 'videoBlob') { }\r\n *     if(type === 'gifBlob')   { }\r\n * });\r\n * // DiskStorage.dataStoreName = 'recordRTC';\r\n * // DiskStorage.onError = function(error) { };\r\n * @property {function} init - This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\r\n * @property {function} Fetch - This method fetches stored blobs from IndexedDB.\r\n * @property {function} Store - This method stores blobs in IndexedDB.\r\n * @property {function} onError - This function is invoked for any known/unknown error.\r\n * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\n\r\n\r\nvar DiskStorage = {\r\n    /**\r\n     * This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.init();\r\n     */\r\n    init: function() {\r\n        var self = this;\r\n\r\n        if (typeof indexedDB === 'undefined' || typeof indexedDB.open === 'undefined') {\r\n            console.error('IndexedDB API are not available in this browser.');\r\n            return;\r\n        }\r\n\r\n        var dbVersion = 1;\r\n        var dbName = this.dbName || location.href.replace(/\\/|:|#|%|\\.|\\[|\\]/g, ''),\r\n            db;\r\n        var request = indexedDB.open(dbName, dbVersion);\r\n\r\n        function createObjectStore(dataBase) {\r\n            dataBase.createObjectStore(self.dataStoreName);\r\n        }\r\n\r\n        function putInDB() {\r\n            var transaction = db.transaction([self.dataStoreName], 'readwrite');\r\n\r\n            if (self.videoBlob) {\r\n                transaction.objectStore(self.dataStoreName).put(self.videoBlob, 'videoBlob');\r\n            }\r\n\r\n            if (self.gifBlob) {\r\n                transaction.objectStore(self.dataStoreName).put(self.gifBlob, 'gifBlob');\r\n            }\r\n\r\n            if (self.audioBlob) {\r\n                transaction.objectStore(self.dataStoreName).put(self.audioBlob, 'audioBlob');\r\n            }\r\n\r\n            function getFromStore(portionName) {\r\n                transaction.objectStore(self.dataStoreName).get(portionName).onsuccess = function(event) {\r\n                    if (self.callback) {\r\n                        self.callback(event.target.result, portionName);\r\n                    }\r\n                };\r\n            }\r\n\r\n            getFromStore('audioBlob');\r\n            getFromStore('videoBlob');\r\n            getFromStore('gifBlob');\r\n        }\r\n\r\n        request.onerror = self.onError;\r\n\r\n        request.onsuccess = function() {\r\n            db = request.result;\r\n            db.onerror = self.onError;\r\n\r\n            if (db.setVersion) {\r\n                if (db.version !== dbVersion) {\r\n                    var setVersion = db.setVersion(dbVersion);\r\n                    setVersion.onsuccess = function() {\r\n                        createObjectStore(db);\r\n                        putInDB();\r\n                    };\r\n                } else {\r\n                    putInDB();\r\n                }\r\n            } else {\r\n                putInDB();\r\n            }\r\n        };\r\n        request.onupgradeneeded = function(event) {\r\n            createObjectStore(event.target.result);\r\n        };\r\n    },\r\n    /**\r\n     * This method fetches stored blobs from IndexedDB.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.Fetch(function(dataURL, type) {\r\n     *     if(type === 'audioBlob') { }\r\n     *     if(type === 'videoBlob') { }\r\n     *     if(type === 'gifBlob')   { }\r\n     * });\r\n     */\r\n    Fetch: function(callback) {\r\n        this.callback = callback;\r\n        this.init();\r\n\r\n        return this;\r\n    },\r\n    /**\r\n     * This method stores blobs in IndexedDB.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.Store({\r\n     *     audioBlob: yourAudioBlob,\r\n     *     videoBlob: yourVideoBlob,\r\n     *     gifBlob  : yourGifBlob\r\n     * });\r\n     */\r\n    Store: function(config) {\r\n        this.audioBlob = config.audioBlob;\r\n        this.videoBlob = config.videoBlob;\r\n        this.gifBlob = config.gifBlob;\r\n\r\n        this.init();\r\n\r\n        return this;\r\n    },\r\n    /**\r\n     * This function is invoked for any known/unknown error.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.onError = function(error){\r\n     *     alerot( JSON.stringify(error) );\r\n     * };\r\n     */\r\n    onError: function(error) {\r\n        console.error(JSON.stringify(error, null, '\\t'));\r\n    },\r\n\r\n    /**\r\n     * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.dataStoreName = 'recordRTC';\r\n     */\r\n    dataStoreName: 'recordRTC',\r\n    dbName: null\r\n};\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.DiskStorage = DiskStorage;\r\n}\r\n\r\n// ______________\r\n// GifRecorder.js\r\n\r\n/**\r\n * GifRecorder is standalone calss used by {@link RecordRTC} to record video or canvas into animated gif.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef GifRecorder\r\n * @class\r\n * @example\r\n * var recorder = new GifRecorder(mediaStream || canvas || context, { onGifPreview: function, onGifRecordingStarted: function, width: 1280, height: 720, frameRate: 200, quality: 10 });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     img.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object or HTMLCanvasElement or CanvasRenderingContext2D.\r\n * @param {object} config - {disableLogs:true, initCallback: function, width: 320, height: 240, frameRate: 200, quality: 10}\r\n */\r\n\r\nfunction GifRecorder(mediaStream, config) {\r\n    if (typeof GIFEncoder === 'undefined') {\r\n        var script = document.createElement('script');\r\n        script.src = 'https://www.webrtc-experiment.com/gif-recorder.js';\r\n        (document.body || document.documentElement).appendChild(script);\r\n    }\r\n\r\n    config = config || {};\r\n\r\n    var isHTMLObject = mediaStream instanceof CanvasRenderingContext2D || mediaStream instanceof HTMLCanvasElement;\r\n\r\n    /**\r\n     * This method records MediaStream.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        if (typeof GIFEncoder === 'undefined') {\r\n            setTimeout(self.record, 1000);\r\n            return;\r\n        }\r\n\r\n        if (!isLoadedMetaData) {\r\n            setTimeout(self.record, 1000);\r\n            return;\r\n        }\r\n\r\n        if (!isHTMLObject) {\r\n            if (!config.width) {\r\n                config.width = video.offsetWidth || 320;\r\n            }\r\n\r\n            if (!config.height) {\r\n                config.height = video.offsetHeight || 240;\r\n            }\r\n\r\n            if (!config.video) {\r\n                config.video = {\r\n                    width: config.width,\r\n                    height: config.height\r\n                };\r\n            }\r\n\r\n            if (!config.canvas) {\r\n                config.canvas = {\r\n                    width: config.width,\r\n                    height: config.height\r\n                };\r\n            }\r\n\r\n            canvas.width = config.canvas.width || 320;\r\n            canvas.height = config.canvas.height || 240;\r\n\r\n            video.width = config.video.width || 320;\r\n            video.height = config.video.height || 240;\r\n        }\r\n\r\n        // external library to record as GIF images\r\n        gifEncoder = new GIFEncoder();\r\n\r\n        // void setRepeat(int iter) \r\n        // Sets the number of times the set of GIF frames should be played. \r\n        // Default is 1; 0 means play indefinitely.\r\n        gifEncoder.setRepeat(0);\r\n\r\n        // void setFrameRate(Number fps) \r\n        // Sets frame rate in frames per second. \r\n        // Equivalent to setDelay(1000/fps).\r\n        // Using \"setDelay\" instead of \"setFrameRate\"\r\n        gifEncoder.setDelay(config.frameRate || 200);\r\n\r\n        // void setQuality(int quality) \r\n        // Sets quality of color quantization (conversion of images to the \r\n        // maximum 256 colors allowed by the GIF specification). \r\n        // Lower values (minimum = 1) produce better colors, \r\n        // but slow processing significantly. 10 is the default, \r\n        // and produces good color mapping at reasonable speeds. \r\n        // Values greater than 20 do not yield significant improvements in speed.\r\n        gifEncoder.setQuality(config.quality || 10);\r\n\r\n        // Boolean start() \r\n        // This writes the GIF Header and returns false if it fails.\r\n        gifEncoder.start();\r\n\r\n        if (typeof config.onGifRecordingStarted === 'function') {\r\n            config.onGifRecordingStarted();\r\n        }\r\n\r\n        startTime = Date.now();\r\n\r\n        function drawVideoFrame(time) {\r\n            if (self.clearedRecordedData === true) {\r\n                return;\r\n            }\r\n\r\n            if (isPausedRecording) {\r\n                return setTimeout(function() {\r\n                    drawVideoFrame(time);\r\n                }, 100);\r\n            }\r\n\r\n            lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\r\n\r\n            if (typeof lastFrameTime === undefined) {\r\n                lastFrameTime = time;\r\n            }\r\n\r\n            // ~10 fps\r\n            if (time - lastFrameTime < 90) {\r\n                return;\r\n            }\r\n\r\n            if (!isHTMLObject && video.paused) {\r\n                // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\r\n                // Tweak for Android Chrome\r\n                video.play();\r\n            }\r\n\r\n            if (!isHTMLObject) {\r\n                context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n            }\r\n\r\n            if (config.onGifPreview) {\r\n                config.onGifPreview(canvas.toDataURL('image/png'));\r\n            }\r\n\r\n            gifEncoder.addFrame(context);\r\n            lastFrameTime = time;\r\n        }\r\n\r\n        lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\r\n\r\n        if (config.initCallback) {\r\n            config.initCallback();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method stops recording MediaStream.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     img.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        if (lastAnimationFrame) {\r\n            cancelAnimationFrame(lastAnimationFrame);\r\n        }\r\n\r\n        endTime = Date.now();\r\n\r\n        /**\r\n         * @property {Blob} blob - The recorded blob object.\r\n         * @memberof GifRecorder\r\n         * @example\r\n         * recorder.stop(function(){\r\n         *     var blob = recorder.blob;\r\n         * });\r\n         */\r\n        this.blob = new Blob([new Uint8Array(gifEncoder.stream().bin)], {\r\n            type: 'image/gif'\r\n        });\r\n\r\n        callback(this.blob);\r\n\r\n        // bug: find a way to clear old recorded blobs\r\n        gifEncoder.stream().bin = [];\r\n    };\r\n\r\n    var isPausedRecording = false;\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPausedRecording = true;\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        isPausedRecording = false;\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        self.clearedRecordedData = true;\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function clearRecordedDataCB() {\r\n        if (gifEncoder) {\r\n            gifEncoder.stream().bin = [];\r\n        }\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'GifRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    var canvas = document.createElement('canvas');\r\n    var context = canvas.getContext('2d');\r\n\r\n    if (isHTMLObject) {\r\n        if (mediaStream instanceof CanvasRenderingContext2D) {\r\n            context = mediaStream;\r\n            canvas = context.canvas;\r\n        } else if (mediaStream instanceof HTMLCanvasElement) {\r\n            context = mediaStream.getContext('2d');\r\n            canvas = mediaStream;\r\n        }\r\n    }\r\n\r\n    var isLoadedMetaData = true;\r\n\r\n    if (!isHTMLObject) {\r\n        var video = document.createElement('video');\r\n        video.muted = true;\r\n        video.autoplay = true;\r\n        video.playsInline = true;\r\n\r\n        isLoadedMetaData = false;\r\n        video.onloadedmetadata = function() {\r\n            isLoadedMetaData = true;\r\n        };\r\n\r\n        setSrcObject(mediaStream, video);\r\n\r\n        video.play();\r\n    }\r\n\r\n    var lastAnimationFrame = null;\r\n    var startTime, endTime, lastFrameTime;\r\n\r\n    var gifEncoder;\r\n\r\n    var self = this;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.GifRecorder = GifRecorder;\r\n}\r\n\r\n// Last time updated: 2019-06-21 4:09:42 AM UTC\r\n\r\n// ________________________\r\n// MultiStreamsMixer v1.2.2\r\n\r\n// Open-Sourced: https://github.com/muaz-khan/MultiStreamsMixer\r\n\r\n// --------------------------------------------------\r\n// Muaz Khan     - www.MuazKhan.com\r\n// MIT License   - www.WebRTC-Experiment.com/licence\r\n// --------------------------------------------------\r\n\r\nfunction MultiStreamsMixer(arrayOfMediaStreams, elementClass) {\r\n\r\n    var browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\r\n\r\n    (function(that) {\r\n        if (typeof RecordRTC !== 'undefined') {\r\n            return;\r\n        }\r\n\r\n        if (!that) {\r\n            return;\r\n        }\r\n\r\n        if (typeof window !== 'undefined') {\r\n            return;\r\n        }\r\n\r\n        if (typeof __webpack_require__.g === 'undefined') {\r\n            return;\r\n        }\r\n\r\n        __webpack_require__.g.navigator = {\r\n            userAgent: browserFakeUserAgent,\r\n            getUserMedia: function() {}\r\n        };\r\n\r\n        if (!__webpack_require__.g.console) {\r\n            __webpack_require__.g.console = {};\r\n        }\r\n\r\n        if (typeof __webpack_require__.g.console.log === 'undefined' || typeof __webpack_require__.g.console.error === 'undefined') {\r\n            __webpack_require__.g.console.error = __webpack_require__.g.console.log = __webpack_require__.g.console.log || function() {\r\n                console.log(arguments);\r\n            };\r\n        }\r\n\r\n        if (typeof document === 'undefined') {\r\n            /*global document:true */\r\n            that.document = {\r\n                documentElement: {\r\n                    appendChild: function() {\r\n                        return '';\r\n                    }\r\n                }\r\n            };\r\n\r\n            document.createElement = document.captureStream = document.mozCaptureStream = function() {\r\n                var obj = {\r\n                    getContext: function() {\r\n                        return obj;\r\n                    },\r\n                    play: function() {},\r\n                    pause: function() {},\r\n                    drawImage: function() {},\r\n                    toDataURL: function() {\r\n                        return '';\r\n                    },\r\n                    style: {}\r\n                };\r\n                return obj;\r\n            };\r\n\r\n            that.HTMLVideoElement = function() {};\r\n        }\r\n\r\n        if (typeof location === 'undefined') {\r\n            /*global location:true */\r\n            that.location = {\r\n                protocol: 'file:',\r\n                href: '',\r\n                hash: ''\r\n            };\r\n        }\r\n\r\n        if (typeof screen === 'undefined') {\r\n            /*global screen:true */\r\n            that.screen = {\r\n                width: 0,\r\n                height: 0\r\n            };\r\n        }\r\n\r\n        if (typeof URL === 'undefined') {\r\n            /*global screen:true */\r\n            that.URL = {\r\n                createObjectURL: function() {\r\n                    return '';\r\n                },\r\n                revokeObjectURL: function() {\r\n                    return '';\r\n                }\r\n            };\r\n        }\r\n\r\n        /*global window:true */\r\n        that.window = __webpack_require__.g;\r\n    })(typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : null);\r\n\r\n    // requires: chrome://flags/#enable-experimental-web-platform-features\r\n\r\n    elementClass = elementClass || 'multi-streams-mixer';\r\n\r\n    var videos = [];\r\n    var isStopDrawingFrames = false;\r\n\r\n    var canvas = document.createElement('canvas');\r\n    var context = canvas.getContext('2d');\r\n    canvas.style.opacity = 0;\r\n    canvas.style.position = 'absolute';\r\n    canvas.style.zIndex = -1;\r\n    canvas.style.top = '-1000em';\r\n    canvas.style.left = '-1000em';\r\n    canvas.className = elementClass;\r\n    (document.body || document.documentElement).appendChild(canvas);\r\n\r\n    this.disableLogs = false;\r\n    this.frameInterval = 10;\r\n\r\n    this.width = 360;\r\n    this.height = 240;\r\n\r\n    // use gain node to prevent echo\r\n    this.useGainNode = true;\r\n\r\n    var self = this;\r\n\r\n    // _____________________________\r\n    // Cross-Browser-Declarations.js\r\n\r\n    // WebAudio API representer\r\n    var AudioContext = window.AudioContext;\r\n\r\n    if (typeof AudioContext === 'undefined') {\r\n        if (typeof webkitAudioContext !== 'undefined') {\r\n            /*global AudioContext:true */\r\n            AudioContext = webkitAudioContext;\r\n        }\r\n\r\n        if (typeof mozAudioContext !== 'undefined') {\r\n            /*global AudioContext:true */\r\n            AudioContext = mozAudioContext;\r\n        }\r\n    }\r\n\r\n    /*jshint -W079 */\r\n    var URL = window.URL;\r\n\r\n    if (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\r\n        /*global URL:true */\r\n        URL = webkitURL;\r\n    }\r\n\r\n    if (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') { // maybe window.navigator?\r\n        if (typeof navigator.webkitGetUserMedia !== 'undefined') {\r\n            navigator.getUserMedia = navigator.webkitGetUserMedia;\r\n        }\r\n\r\n        if (typeof navigator.mozGetUserMedia !== 'undefined') {\r\n            navigator.getUserMedia = navigator.mozGetUserMedia;\r\n        }\r\n    }\r\n\r\n    var MediaStream = window.MediaStream;\r\n\r\n    if (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\r\n        MediaStream = webkitMediaStream;\r\n    }\r\n\r\n    /*global MediaStream:true */\r\n    if (typeof MediaStream !== 'undefined') {\r\n        // override \"stop\" method for all browsers\r\n        if (typeof MediaStream.prototype.stop === 'undefined') {\r\n            MediaStream.prototype.stop = function() {\r\n                this.getTracks().forEach(function(track) {\r\n                    track.stop();\r\n                });\r\n            };\r\n        }\r\n    }\r\n\r\n    var Storage = {};\r\n\r\n    if (typeof AudioContext !== 'undefined') {\r\n        Storage.AudioContext = AudioContext;\r\n    } else if (typeof webkitAudioContext !== 'undefined') {\r\n        Storage.AudioContext = webkitAudioContext;\r\n    }\r\n\r\n    function setSrcObject(stream, element) {\r\n        if ('srcObject' in element) {\r\n            element.srcObject = stream;\r\n        } else if ('mozSrcObject' in element) {\r\n            element.mozSrcObject = stream;\r\n        } else {\r\n            element.srcObject = stream;\r\n        }\r\n    }\r\n\r\n    this.startDrawingFrames = function() {\r\n        drawVideosToCanvas();\r\n    };\r\n\r\n    function drawVideosToCanvas() {\r\n        if (isStopDrawingFrames) {\r\n            return;\r\n        }\r\n\r\n        var videosLength = videos.length;\r\n\r\n        var fullcanvas = false;\r\n        var remaining = [];\r\n        videos.forEach(function(video) {\r\n            if (!video.stream) {\r\n                video.stream = {};\r\n            }\r\n\r\n            if (video.stream.fullcanvas) {\r\n                fullcanvas = video;\r\n            } else {\r\n                // todo: video.stream.active or video.stream.live to fix blank frames issues?\r\n                remaining.push(video);\r\n            }\r\n        });\r\n\r\n        if (fullcanvas) {\r\n            canvas.width = fullcanvas.stream.width;\r\n            canvas.height = fullcanvas.stream.height;\r\n        } else if (remaining.length) {\r\n            canvas.width = videosLength > 1 ? remaining[0].width * 2 : remaining[0].width;\r\n\r\n            var height = 1;\r\n            if (videosLength === 3 || videosLength === 4) {\r\n                height = 2;\r\n            }\r\n            if (videosLength === 5 || videosLength === 6) {\r\n                height = 3;\r\n            }\r\n            if (videosLength === 7 || videosLength === 8) {\r\n                height = 4;\r\n            }\r\n            if (videosLength === 9 || videosLength === 10) {\r\n                height = 5;\r\n            }\r\n            canvas.height = remaining[0].height * height;\r\n        } else {\r\n            canvas.width = self.width || 360;\r\n            canvas.height = self.height || 240;\r\n        }\r\n\r\n        if (fullcanvas && fullcanvas instanceof HTMLVideoElement) {\r\n            drawImage(fullcanvas);\r\n        }\r\n\r\n        remaining.forEach(function(video, idx) {\r\n            drawImage(video, idx);\r\n        });\r\n\r\n        setTimeout(drawVideosToCanvas, self.frameInterval);\r\n    }\r\n\r\n    function drawImage(video, idx) {\r\n        if (isStopDrawingFrames) {\r\n            return;\r\n        }\r\n\r\n        var x = 0;\r\n        var y = 0;\r\n        var width = video.width;\r\n        var height = video.height;\r\n\r\n        if (idx === 1) {\r\n            x = video.width;\r\n        }\r\n\r\n        if (idx === 2) {\r\n            y = video.height;\r\n        }\r\n\r\n        if (idx === 3) {\r\n            x = video.width;\r\n            y = video.height;\r\n        }\r\n\r\n        if (idx === 4) {\r\n            y = video.height * 2;\r\n        }\r\n\r\n        if (idx === 5) {\r\n            x = video.width;\r\n            y = video.height * 2;\r\n        }\r\n\r\n        if (idx === 6) {\r\n            y = video.height * 3;\r\n        }\r\n\r\n        if (idx === 7) {\r\n            x = video.width;\r\n            y = video.height * 3;\r\n        }\r\n\r\n        if (typeof video.stream.left !== 'undefined') {\r\n            x = video.stream.left;\r\n        }\r\n\r\n        if (typeof video.stream.top !== 'undefined') {\r\n            y = video.stream.top;\r\n        }\r\n\r\n        if (typeof video.stream.width !== 'undefined') {\r\n            width = video.stream.width;\r\n        }\r\n\r\n        if (typeof video.stream.height !== 'undefined') {\r\n            height = video.stream.height;\r\n        }\r\n\r\n        context.drawImage(video, x, y, width, height);\r\n\r\n        if (typeof video.stream.onRender === 'function') {\r\n            video.stream.onRender(context, x, y, width, height, idx);\r\n        }\r\n    }\r\n\r\n    function getMixedStream() {\r\n        isStopDrawingFrames = false;\r\n        var mixedVideoStream = getMixedVideoStream();\r\n\r\n        var mixedAudioStream = getMixedAudioStream();\r\n        if (mixedAudioStream) {\r\n            mixedAudioStream.getTracks().filter(function(t) {\r\n                return t.kind === 'audio';\r\n            }).forEach(function(track) {\r\n                mixedVideoStream.addTrack(track);\r\n            });\r\n        }\r\n\r\n        var fullcanvas;\r\n        arrayOfMediaStreams.forEach(function(stream) {\r\n            if (stream.fullcanvas) {\r\n                fullcanvas = true;\r\n            }\r\n        });\r\n\r\n        // mixedVideoStream.prototype.appendStreams = appendStreams;\r\n        // mixedVideoStream.prototype.resetVideoStreams = resetVideoStreams;\r\n        // mixedVideoStream.prototype.clearRecordedData = clearRecordedData;\r\n\r\n        return mixedVideoStream;\r\n    }\r\n\r\n    function getMixedVideoStream() {\r\n        resetVideoStreams();\r\n\r\n        var capturedStream;\r\n\r\n        if ('captureStream' in canvas) {\r\n            capturedStream = canvas.captureStream();\r\n        } else if ('mozCaptureStream' in canvas) {\r\n            capturedStream = canvas.mozCaptureStream();\r\n        } else if (!self.disableLogs) {\r\n            console.error('Upgrade to latest Chrome or otherwise enable this flag: chrome://flags/#enable-experimental-web-platform-features');\r\n        }\r\n\r\n        var videoStream = new MediaStream();\r\n\r\n        capturedStream.getTracks().filter(function(t) {\r\n            return t.kind === 'video';\r\n        }).forEach(function(track) {\r\n            videoStream.addTrack(track);\r\n        });\r\n\r\n        canvas.stream = videoStream;\r\n\r\n        return videoStream;\r\n    }\r\n\r\n    function getMixedAudioStream() {\r\n        // via: @pehrsons\r\n        if (!Storage.AudioContextConstructor) {\r\n            Storage.AudioContextConstructor = new Storage.AudioContext();\r\n        }\r\n\r\n        self.audioContext = Storage.AudioContextConstructor;\r\n\r\n        self.audioSources = [];\r\n\r\n        if (self.useGainNode === true) {\r\n            self.gainNode = self.audioContext.createGain();\r\n            self.gainNode.connect(self.audioContext.destination);\r\n            self.gainNode.gain.value = 0; // don't hear self\r\n        }\r\n\r\n        var audioTracksLength = 0;\r\n        arrayOfMediaStreams.forEach(function(stream) {\r\n            if (!stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'audio';\r\n                }).length) {\r\n                return;\r\n            }\r\n\r\n            audioTracksLength++;\r\n\r\n            var audioSource = self.audioContext.createMediaStreamSource(stream);\r\n\r\n            if (self.useGainNode === true) {\r\n                audioSource.connect(self.gainNode);\r\n            }\r\n\r\n            self.audioSources.push(audioSource);\r\n        });\r\n\r\n        if (!audioTracksLength) {\r\n            // because \"self.audioContext\" is not initialized\r\n            // that's why we've to ignore rest of the code\r\n            return;\r\n        }\r\n\r\n        self.audioDestination = self.audioContext.createMediaStreamDestination();\r\n        self.audioSources.forEach(function(audioSource) {\r\n            audioSource.connect(self.audioDestination);\r\n        });\r\n        return self.audioDestination.stream;\r\n    }\r\n\r\n    function getVideo(stream) {\r\n        var video = document.createElement('video');\r\n\r\n        setSrcObject(stream, video);\r\n\r\n        video.className = elementClass;\r\n\r\n        video.muted = true;\r\n        video.volume = 0;\r\n\r\n        video.width = stream.width || self.width || 360;\r\n        video.height = stream.height || self.height || 240;\r\n\r\n        video.play();\r\n\r\n        return video;\r\n    }\r\n\r\n    this.appendStreams = function(streams) {\r\n        if (!streams) {\r\n            throw 'First parameter is required.';\r\n        }\r\n\r\n        if (!(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        streams.forEach(function(stream) {\r\n            var newStream = new MediaStream();\r\n\r\n            if (stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'video';\r\n                }).length) {\r\n                var video = getVideo(stream);\r\n                video.stream = stream;\r\n                videos.push(video);\r\n\r\n                newStream.addTrack(stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'video';\r\n                })[0]);\r\n            }\r\n\r\n            if (stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'audio';\r\n                }).length) {\r\n                var audioSource = self.audioContext.createMediaStreamSource(stream);\r\n                self.audioDestination = self.audioContext.createMediaStreamDestination();\r\n                audioSource.connect(self.audioDestination);\r\n\r\n                newStream.addTrack(self.audioDestination.stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'audio';\r\n                })[0]);\r\n            }\r\n\r\n            arrayOfMediaStreams.push(newStream);\r\n        });\r\n    };\r\n\r\n    this.releaseStreams = function() {\r\n        videos = [];\r\n        isStopDrawingFrames = true;\r\n\r\n        if (self.gainNode) {\r\n            self.gainNode.disconnect();\r\n            self.gainNode = null;\r\n        }\r\n\r\n        if (self.audioSources.length) {\r\n            self.audioSources.forEach(function(source) {\r\n                source.disconnect();\r\n            });\r\n            self.audioSources = [];\r\n        }\r\n\r\n        if (self.audioDestination) {\r\n            self.audioDestination.disconnect();\r\n            self.audioDestination = null;\r\n        }\r\n\r\n        if (self.audioContext) {\r\n            self.audioContext.close();\r\n        }\r\n\r\n        self.audioContext = null;\r\n\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        if (canvas.stream) {\r\n            canvas.stream.stop();\r\n            canvas.stream = null;\r\n        }\r\n    };\r\n\r\n    this.resetVideoStreams = function(streams) {\r\n        if (streams && !(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        resetVideoStreams(streams);\r\n    };\r\n\r\n    function resetVideoStreams(streams) {\r\n        videos = [];\r\n        streams = streams || arrayOfMediaStreams;\r\n\r\n        // via: @adrian-ber\r\n        streams.forEach(function(stream) {\r\n            if (!stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'video';\r\n                }).length) {\r\n                return;\r\n            }\r\n\r\n            var video = getVideo(stream);\r\n            video.stream = stream;\r\n            videos.push(video);\r\n        });\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'MultiStreamsMixer';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    this.getMixedStream = getMixedStream;\r\n\r\n}\r\n\r\nif (typeof RecordRTC === 'undefined') {\r\n    if (true /* && !!module.exports*/ ) {\r\n        module.exports = MultiStreamsMixer;\r\n    }\r\n\r\n    if (true) {\r\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\r\n            return MultiStreamsMixer;\r\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n    }\r\n}\r\n\r\n// ______________________\r\n// MultiStreamRecorder.js\r\n\r\n/*\r\n * Video conference recording, using captureStream API along with WebAudio and Canvas2D API.\r\n */\r\n\r\n/**\r\n * MultiStreamRecorder can record multiple videos in single container.\r\n * @summary Multi-videos recorder.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef MultiStreamRecorder\r\n * @class\r\n * @example\r\n * var options = {\r\n *     mimeType: 'video/webm'\r\n * }\r\n * var recorder = new MultiStreamRecorder(ArrayOfMediaStreams, options);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n *\r\n *     // or\r\n *     var blob = recorder.blob;\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStreams} mediaStreams - Array of MediaStreams.\r\n * @param {object} config - {disableLogs:true, frameInterval: 1, mimeType: \"video/webm\"}\r\n */\r\n\r\nfunction MultiStreamRecorder(arrayOfMediaStreams, options) {\r\n    arrayOfMediaStreams = arrayOfMediaStreams || [];\r\n    var self = this;\r\n\r\n    var mixer;\r\n    var mediaRecorder;\r\n\r\n    options = options || {\r\n        elementClass: 'multi-streams-mixer',\r\n        mimeType: 'video/webm',\r\n        video: {\r\n            width: 360,\r\n            height: 240\r\n        }\r\n    };\r\n\r\n    if (!options.frameInterval) {\r\n        options.frameInterval = 10;\r\n    }\r\n\r\n    if (!options.video) {\r\n        options.video = {};\r\n    }\r\n\r\n    if (!options.video.width) {\r\n        options.video.width = 360;\r\n    }\r\n\r\n    if (!options.video.height) {\r\n        options.video.height = 240;\r\n    }\r\n\r\n    /**\r\n     * This method records all MediaStreams.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        // github/muaz-khan/MultiStreamsMixer\r\n        mixer = new MultiStreamsMixer(arrayOfMediaStreams, options.elementClass || 'multi-streams-mixer');\r\n\r\n        if (getAllVideoTracks().length) {\r\n            mixer.frameInterval = options.frameInterval || 10;\r\n            mixer.width = options.video.width || 360;\r\n            mixer.height = options.video.height || 240;\r\n            mixer.startDrawingFrames();\r\n        }\r\n\r\n        if (options.previewStream && typeof options.previewStream === 'function') {\r\n            options.previewStream(mixer.getMixedStream());\r\n        }\r\n\r\n        // record using MediaRecorder API\r\n        mediaRecorder = new MediaStreamRecorder(mixer.getMixedStream(), options);\r\n        mediaRecorder.record();\r\n    };\r\n\r\n    function getAllVideoTracks() {\r\n        var tracks = [];\r\n        arrayOfMediaStreams.forEach(function(stream) {\r\n            getTracks(stream, 'video').forEach(function(track) {\r\n                tracks.push(track);\r\n            });\r\n        });\r\n        return tracks;\r\n    }\r\n\r\n    /**\r\n     * This method stops recording MediaStream.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        if (!mediaRecorder) {\r\n            return;\r\n        }\r\n\r\n        mediaRecorder.stop(function(blob) {\r\n            self.blob = blob;\r\n\r\n            callback(blob);\r\n\r\n            self.clearRecordedData();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        if (mediaRecorder) {\r\n            mediaRecorder.pause();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        if (mediaRecorder) {\r\n            mediaRecorder.resume();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        if (mediaRecorder) {\r\n            mediaRecorder.clearRecordedData();\r\n            mediaRecorder = null;\r\n        }\r\n\r\n        if (mixer) {\r\n            mixer.releaseStreams();\r\n            mixer = null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Add extra media-streams to existing recordings.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @param {MediaStreams} mediaStreams - Array of MediaStreams\r\n     * @example\r\n     * recorder.addStreams([newAudioStream, newVideoStream]);\r\n     */\r\n    this.addStreams = function(streams) {\r\n        if (!streams) {\r\n            throw 'First parameter is required.';\r\n        }\r\n\r\n        if (!(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        arrayOfMediaStreams.concat(streams);\r\n\r\n        if (!mediaRecorder || !mixer) {\r\n            return;\r\n        }\r\n\r\n        mixer.appendStreams(streams);\r\n\r\n        if (options.previewStream && typeof options.previewStream === 'function') {\r\n            options.previewStream(mixer.getMixedStream());\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Reset videos during live recording. Replace old videos e.g. replace cameras with full-screen.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @param {MediaStreams} mediaStreams - Array of MediaStreams\r\n     * @example\r\n     * recorder.resetVideoStreams([newVideo1, newVideo2]);\r\n     */\r\n    this.resetVideoStreams = function(streams) {\r\n        if (!mixer) {\r\n            return;\r\n        }\r\n\r\n        if (streams && !(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        mixer.resetVideoStreams(streams);\r\n    };\r\n\r\n    /**\r\n     * Returns MultiStreamsMixer\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * let mixer = recorder.getMixer();\r\n     * mixer.appendStreams([newStream]);\r\n     */\r\n    this.getMixer = function() {\r\n        return mixer;\r\n    };\r\n\r\n    // for debugging\r\n    this.name = 'MultiStreamRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.MultiStreamRecorder = MultiStreamRecorder;\r\n}\r\n\r\n// _____________________\r\n// RecordRTC.promises.js\r\n\r\n/**\r\n * RecordRTCPromisesHandler adds promises support in {@link RecordRTC}. Try a {@link https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/RecordRTCPromisesHandler.html|demo here}\r\n * @summary Promises for {@link RecordRTC}\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTCPromisesHandler\r\n * @class\r\n * @example\r\n * var recorder = new RecordRTCPromisesHandler(mediaStream, options);\r\n * recorder.startRecording()\r\n *         .then(successCB)\r\n *         .catch(errorCB);\r\n * // Note: You can access all RecordRTC API using \"recorder.recordRTC\" e.g. \r\n * recorder.recordRTC.onStateChanged = function(state) {};\r\n * recorder.recordRTC.setRecordingDuration(5000);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\r\n * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\r\n * @throws Will throw an error if \"new\" keyword is not used to initiate \"RecordRTCPromisesHandler\". Also throws error if first argument \"MediaStream\" is missing.\r\n * @requires {@link RecordRTC}\r\n */\r\n\r\nfunction RecordRTCPromisesHandler(mediaStream, options) {\r\n    if (!this) {\r\n        throw 'Use \"new RecordRTCPromisesHandler()\"';\r\n    }\r\n\r\n    if (typeof mediaStream === 'undefined') {\r\n        throw 'First argument \"MediaStream\" is required.';\r\n    }\r\n\r\n    var self = this;\r\n\r\n    /**\r\n     * @property {Blob} blob - Access/reach the native {@link RecordRTC} object.\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * let internal = recorder.recordRTC.getInternalRecorder();\r\n     * alert(internal instanceof MediaStreamRecorder);\r\n     * recorder.recordRTC.onStateChanged = function(state) {};\r\n     */\r\n    self.recordRTC = new RecordRTC(mediaStream, options);\r\n\r\n    /**\r\n     * This method records MediaStream.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.startRecording()\r\n     *         .then(successCB)\r\n     *         .catch(errorCB);\r\n     */\r\n    this.startRecording = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.startRecording();\r\n                resolve();\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method stops the recording.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.stopRecording().then(function() {\r\n     *     var blob = recorder.getBlob();\r\n     * }).catch(errorCB);\r\n     */\r\n    this.stopRecording = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.stopRecording(function(url) {\r\n                    self.blob = self.recordRTC.getBlob();\r\n\r\n                    if (!self.blob || !self.blob.size) {\r\n                        reject('Empty blob.', self.blob);\r\n                        return;\r\n                    }\r\n\r\n                    resolve(url);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method pauses the recording. You can resume recording using \"resumeRecording\" method.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.pauseRecording()\r\n     *         .then(successCB)\r\n     *         .catch(errorCB);\r\n     */\r\n    this.pauseRecording = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.pauseRecording();\r\n                resolve();\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.resumeRecording()\r\n     *         .then(successCB)\r\n     *         .catch(errorCB);\r\n     */\r\n    this.resumeRecording = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.resumeRecording();\r\n                resolve();\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method returns data-url for the recorded blob.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.stopRecording().then(function() {\r\n     *     recorder.getDataURL().then(function(dataURL) {\r\n     *         window.open(dataURL);\r\n     *     }).catch(errorCB);;\r\n     * }).catch(errorCB);\r\n     */\r\n    this.getDataURL = function(callback) {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.getDataURL(function(dataURL) {\r\n                    resolve(dataURL);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method returns the recorded blob.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.stopRecording().then(function() {\r\n     *     recorder.getBlob().then(function(blob) {})\r\n     * }).catch(errorCB);\r\n     */\r\n    this.getBlob = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                resolve(self.recordRTC.getBlob());\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method returns the internal recording object.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * let internalRecorder = await recorder.getInternalRecorder();\r\n     * if(internalRecorder instanceof MultiStreamRecorder) {\r\n     *     internalRecorder.addStreams([newAudioStream]);\r\n     *     internalRecorder.resetVideoStreams([screenStream]);\r\n     * }\r\n     * @returns {Object} \r\n     */\r\n    this.getInternalRecorder = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                resolve(self.recordRTC.getInternalRecorder());\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method resets the recorder. So that you can reuse single recorder instance many times.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * await recorder.reset();\r\n     * recorder.startRecording(); // record again\r\n     */\r\n    this.reset = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                resolve(self.recordRTC.reset());\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Destroy RecordRTC instance. Clear all recorders and objects.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.destroy().then(successCB).catch(errorCB);\r\n     */\r\n    this.destroy = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                resolve(self.recordRTC.destroy());\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Get recorder's readonly state.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * let state = await recorder.getState();\r\n     * // or\r\n     * recorder.getState().then(state => { console.log(state); })\r\n     * @returns {String} Returns recording state.\r\n     */\r\n    this.getState = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                resolve(self.recordRTC.getState());\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @property {Blob} blob - Recorded data as \"Blob\" object.\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * await recorder.stopRecording();\r\n     * let blob = recorder.getBlob(); // or \"recorder.recordRTC.blob\"\r\n     * invokeSaveAsDialog(blob);\r\n     */\r\n    this.blob = null;\r\n\r\n    /**\r\n     * RecordRTC version number\r\n     * @property {String} version - Release version number.\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @static\r\n     * @readonly\r\n     * @example\r\n     * alert(recorder.version);\r\n     */\r\n    this.version = '5.6.2';\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.RecordRTCPromisesHandler = RecordRTCPromisesHandler;\r\n}\r\n\r\n// ______________________\r\n// WebAssemblyRecorder.js\r\n\r\n/**\r\n * WebAssemblyRecorder lets you create webm videos in JavaScript via WebAssembly. The library consumes raw RGBA32 buffers (4 bytes per pixel) and turns them into a webm video with the given framerate and quality. This makes it compatible out-of-the-box with ImageData from a CANVAS. With realtime mode you can also use webm-wasm for streaming webm videos.\r\n * @summary Video recording feature in Chrome, Firefox and maybe Edge.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef WebAssemblyRecorder\r\n * @class\r\n * @example\r\n * var recorder = new WebAssemblyRecorder(mediaStream);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {webAssemblyPath:'webm-wasm.wasm',workerPath: 'webm-worker.js', frameRate: 30, width: 1920, height: 1080, bitrate: 1024, realtime: true}\r\n */\r\nfunction WebAssemblyRecorder(stream, config) {\r\n    // based on: github.com/GoogleChromeLabs/webm-wasm\r\n\r\n    if (typeof ReadableStream === 'undefined' || typeof WritableStream === 'undefined') {\r\n        // because it fixes readable/writable streams issues\r\n        console.error('Following polyfill is strongly recommended: https://unpkg.com/@mattiasbuelens/web-streams-polyfill/dist/polyfill.min.js');\r\n    }\r\n\r\n    config = config || {};\r\n\r\n    config.width = config.width || 640;\r\n    config.height = config.height || 480;\r\n    config.frameRate = config.frameRate || 30;\r\n    config.bitrate = config.bitrate || 1200;\r\n    config.realtime = config.realtime || true;\r\n\r\n    function createBufferURL(buffer, type) {\r\n        return URL.createObjectURL(new Blob([buffer], {\r\n            type: type || ''\r\n        }));\r\n    }\r\n\r\n    var finished;\r\n\r\n    function cameraStream() {\r\n        return new ReadableStream({\r\n            start: function(controller) {\r\n                var cvs = document.createElement('canvas');\r\n                var video = document.createElement('video');\r\n                var first = true;\r\n                video.srcObject = stream;\r\n                video.muted = true;\r\n                video.height = config.height;\r\n                video.width = config.width;\r\n                video.volume = 0;\r\n                video.onplaying = function() {\r\n                    cvs.width = config.width;\r\n                    cvs.height = config.height;\r\n                    var ctx = cvs.getContext('2d');\r\n                    var frameTimeout = 1000 / config.frameRate;\r\n                    var cameraTimer = setInterval(function f() {\r\n                        if (finished) {\r\n                            clearInterval(cameraTimer);\r\n                            controller.close();\r\n                        }\r\n\r\n                        if (first) {\r\n                            first = false;\r\n                            if (config.onVideoProcessStarted) {\r\n                                config.onVideoProcessStarted();\r\n                            }\r\n                        }\r\n\r\n                        ctx.drawImage(video, 0, 0);\r\n                        // if (controller._controlledReadableStream.state !== 'closed') {\r\n                            try {\r\n                                controller.enqueue(\r\n                                    ctx.getImageData(0, 0, config.width, config.height)\r\n                                );\r\n                            } catch (e) {}\r\n                        // }\r\n                    }, frameTimeout);\r\n                };\r\n                video.play();\r\n            }\r\n        });\r\n    }\r\n\r\n    var worker;\r\n\r\n    function startRecording(stream, buffer) {\r\n        if (!config.workerPath && !buffer) {\r\n            finished = false;\r\n\r\n            // is it safe to use @latest ?\r\n\r\n            fetch(\r\n                'https://unpkg.com/webm-wasm@latest/dist/webm-worker.js'\r\n            ).then(function(r) {\r\n                r.arrayBuffer().then(function(buffer) {\r\n                    startRecording(stream, buffer);\r\n                });\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (!config.workerPath && buffer instanceof ArrayBuffer) {\r\n            var blob = new Blob([buffer], {\r\n                type: 'text/javascript'\r\n            });\r\n            config.workerPath = URL.createObjectURL(blob);\r\n        }\r\n\r\n        if (!config.workerPath) {\r\n            console.error('workerPath parameter is missing.');\r\n        }\r\n\r\n        worker = new Worker(config.workerPath);\r\n\r\n        worker.postMessage(config.webAssemblyPath || 'https://unpkg.com/webm-wasm@latest/dist/webm-wasm.wasm');\r\n        worker.addEventListener('message', function(event) {\r\n            if (event.data === 'READY') {\r\n                worker.postMessage({\r\n                    width: config.width,\r\n                    height: config.height,\r\n                    bitrate: config.bitrate || 1200,\r\n                    timebaseDen: config.frameRate || 30,\r\n                    realtime: config.realtime\r\n                });\r\n\r\n                cameraStream().pipeTo(new WritableStream({\r\n                    write: function(image) {\r\n                        if (finished) {\r\n                            console.error('Got image, but recorder is finished!');\r\n                            return;\r\n                        }\r\n\r\n                        worker.postMessage(image.data.buffer, [image.data.buffer]);\r\n                    }\r\n                }));\r\n            } else if (!!event.data) {\r\n                if (!isPaused) {\r\n                    arrayOfBuffers.push(event.data);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This method records video.\r\n     * @method\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        arrayOfBuffers = [];\r\n        isPaused = false;\r\n        this.blob = null;\r\n        startRecording(stream);\r\n\r\n        if (typeof config.initCallback === 'function') {\r\n            config.initCallback();\r\n        }\r\n    };\r\n\r\n    var isPaused;\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPaused = true;\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        isPaused = false;\r\n    };\r\n\r\n    function terminate(callback) {\r\n        if (!worker) {\r\n            if (callback) {\r\n                callback();\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // Wait for null event data to indicate that the encoding is complete\r\n        worker.addEventListener('message', function(event) {\r\n            if (event.data === null) {\r\n                worker.terminate();\r\n                worker = null;\r\n\r\n                if (callback) {\r\n                    callback();\r\n                }\r\n            }\r\n        });\r\n\r\n        worker.postMessage(null);\r\n    }\r\n\r\n    var arrayOfBuffers = [];\r\n\r\n    /**\r\n     * This method stops recording video.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        finished = true;\r\n\r\n        var recorder = this;\r\n\r\n        terminate(function() {\r\n            recorder.blob = new Blob(arrayOfBuffers, {\r\n                type: 'video/webm'\r\n            });\r\n\r\n            callback(recorder.blob);\r\n        });\r\n    };\r\n\r\n    // for debugging\r\n    this.name = 'WebAssemblyRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        arrayOfBuffers = [];\r\n        isPaused = false;\r\n        this.blob = null;\r\n\r\n        // todo: if recording-ON then STOP it first\r\n    };\r\n\r\n    /**\r\n     * @property {Blob} blob - The recorded blob object.\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.stop(function(){\r\n     *     var blob = recorder.blob;\r\n     * });\r\n     */\r\n    this.blob = null;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.WebAssemblyRecorder = WebAssemblyRecorder;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/recordrtc/RecordRTC.js\n");

/***/ }),

/***/ "./src/Recorder.js":
/*!*************************!*\
  !*** ./src/Recorder.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeRecorder\": () => (/* binding */ makeRecorder)\n/* harmony export */ });\n/* harmony import */ var recordrtc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! recordrtc */ \"./node_modules/recordrtc/RecordRTC.js\");\n/* harmony import */ var recordrtc__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(recordrtc__WEBPACK_IMPORTED_MODULE_0__);\n\n\nlet Recorder = null;\n\nfunction makeRecorder(mediaStream) {\n    Recorder = recordrtc__WEBPACK_IMPORTED_MODULE_0___default()(mediaStream, {\n        type: 'video',\n        recorderType: recordrtc__WEBPACK_IMPORTED_MODULE_0__.WebAssemblyRecorder,\n    });\n\n    console.log('Recorder', Recorder);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvUmVjb3JkZXIuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJEOztBQUUzRDs7QUFFQTtBQUNBLGVBQWUsZ0RBQVM7QUFDeEI7QUFDQSxzQkFBc0IsMERBQW1CO0FBQ3pDLEtBQUs7O0FBRUw7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dhc20tcmVjb3JkZXItdGVzdC8uL3NyYy9SZWNvcmRlci5qcz8wZWY3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWNvcmRSVEMsIHsgV2ViQXNzZW1ibHlSZWNvcmRlciB9IGZyb20gXCJyZWNvcmRydGNcIjtcblxubGV0IFJlY29yZGVyID0gbnVsbDtcblxuZnVuY3Rpb24gbWFrZVJlY29yZGVyKG1lZGlhU3RyZWFtKSB7XG4gICAgUmVjb3JkZXIgPSBSZWNvcmRSVEMobWVkaWFTdHJlYW0sIHtcbiAgICAgICAgdHlwZTogJ3ZpZGVvJyxcbiAgICAgICAgcmVjb3JkZXJUeXBlOiBXZWJBc3NlbWJseVJlY29yZGVyLFxuICAgIH0pO1xuXG4gICAgY29uc29sZS5sb2coJ1JlY29yZGVyJywgUmVjb3JkZXIpO1xufVxuXG5leHBvcnQge1xuICAgIG1ha2VSZWNvcmRlclxufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Recorder.js\n");

/***/ }),

/***/ "./src/common/constants.js":
/*!*********************************!*\
  !*** ./src/common/constants.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"buttonStartRecordSelector\": () => (/* binding */ buttonStartRecordSelector),\n/* harmony export */   \"buttonStopRecordSelector\": () => (/* binding */ buttonStopRecordSelector),\n/* harmony export */   \"textareaDeviceInfoSelector\": () => (/* binding */ textareaDeviceInfoSelector),\n/* harmony export */   \"videoSelector\": () => (/* binding */ videoSelector)\n/* harmony export */ });\nconst\n    videoSelector = '#localVideo',\n    textareaDeviceInfoSelector = '#textareaDeviceInfo',\n    buttonStartRecordSelector = '#buttonStartRecord',\n    buttonStopRecordSelector = '#buttonStopRecord';\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tbW9uL2NvbnN0YW50cy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dhc20tcmVjb3JkZXItdGVzdC8uL3NyYy9jb21tb24vY29uc3RhbnRzLmpzPzlhMzYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3RcbiAgICB2aWRlb1NlbGVjdG9yID0gJyNsb2NhbFZpZGVvJyxcbiAgICB0ZXh0YXJlYURldmljZUluZm9TZWxlY3RvciA9ICcjdGV4dGFyZWFEZXZpY2VJbmZvJyxcbiAgICBidXR0b25TdGFydFJlY29yZFNlbGVjdG9yID0gJyNidXR0b25TdGFydFJlY29yZCcsXG4gICAgYnV0dG9uU3RvcFJlY29yZFNlbGVjdG9yID0gJyNidXR0b25TdG9wUmVjb3JkJztcblxuZXhwb3J0IHtcbiAgICB2aWRlb1NlbGVjdG9yLFxuICAgIHRleHRhcmVhRGV2aWNlSW5mb1NlbGVjdG9yLFxuICAgIGJ1dHRvblN0YXJ0UmVjb3JkU2VsZWN0b3IsXG4gICAgYnV0dG9uU3RvcFJlY29yZFNlbGVjdG9yLFxufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/common/constants.js\n");

/***/ }),

/***/ "./src/common/index.js":
/*!*****************************!*\
  !*** ./src/common/index.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CONSTANTS\": () => (/* reexport module object */ _constants__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   \"UTILS\": () => (/* reexport module object */ _utils__WEBPACK_IMPORTED_MODULE_1__)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./src/common/constants.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"./src/common/utils.js\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tbW9uL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBeUM7QUFDUiIsInNvdXJjZXMiOlsid2VicGFjazovL3dhc20tcmVjb3JkZXItdGVzdC8uL3NyYy9jb21tb24vaW5kZXguanM/OGMxYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBDT05TVEFOVFMgZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgKiBhcyBVVElMUyBmcm9tIFwiLi91dGlsc1wiO1xuXG5leHBvcnQge1xuICAgIENPTlNUQU5UUyxcbiAgICBVVElMUyxcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/common/index.js\n");

/***/ }),

/***/ "./src/common/utils.js":
/*!*****************************!*\
  !*** ./src/common/utils.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"domSearchElement\": () => (/* binding */ domSearchElement)\n/* harmony export */ });\nfunction domSearchElement(selector, all = false) {\n    return all\n        ? document.querySelectorAll(selector)\n        : document.querySelector(selector);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tbW9uL3V0aWxzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FzbS1yZWNvcmRlci10ZXN0Ly4vc3JjL2NvbW1vbi91dGlscy5qcz85MGI5Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGRvbVNlYXJjaEVsZW1lbnQoc2VsZWN0b3IsIGFsbCA9IGZhbHNlKSB7XG4gICAgcmV0dXJuIGFsbFxuICAgICAgICA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpXG4gICAgICAgIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG59XG5cbmV4cG9ydCB7XG4gICAgZG9tU2VhcmNoRWxlbWVudCxcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/common/utils.js\n");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/settings */ \"./src/modules/settings/index.js\");\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common */ \"./src/common/index.js\");\n/* harmony import */ var _Recorder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Recorder */ \"./src/Recorder.js\");\n\n\n\n\n\nasync function enableDevices(RecordSettings) {\n    await Promise.all([\n        RecordSettings.enable(_modules_settings__WEBPACK_IMPORTED_MODULE_0__.SETTINGS_NAMES.AUDIO_TYPE, true),\n        RecordSettings.enable(_modules_settings__WEBPACK_IMPORTED_MODULE_0__.SETTINGS_NAMES.VIDEO_TYPE, true),\n    ]);\n}\n\nasync function makeStreamsObject(RecordSettings) {\n    const\n        defaultTrackObject = { track: null, reason: '' },\n        audioTrackObject = await RecordSettings.getTrack(_modules_settings__WEBPACK_IMPORTED_MODULE_0__.SETTINGS_NAMES.AUDIO_TYPE) || defaultTrackObject,\n        videoTrackObject = await RecordSettings.getTrack(_modules_settings__WEBPACK_IMPORTED_MODULE_0__.SETTINGS_NAMES.VIDEO_TYPE) || defaultTrackObject;\n\n    return {\n        [_modules_settings__WEBPACK_IMPORTED_MODULE_0__.SETTINGS_NAMES.AUDIO_TYPE]: audioTrackObject,\n        [_modules_settings__WEBPACK_IMPORTED_MODULE_0__.SETTINGS_NAMES.VIDEO_TYPE]: videoTrackObject,\n    };\n}\n\nfunction showVideoOnPage(mediaStream) {\n    if ( !mediaStream ) {\n        throw new Error('MediaStream missing.');\n    }\n\n    const $video = _common__WEBPACK_IMPORTED_MODULE_1__.UTILS.domSearchElement(_common__WEBPACK_IMPORTED_MODULE_1__.CONSTANTS.videoSelector);\n    $video.srcObject = mediaStream;\n    $video.muted = true;\n    $video.play();\n}\n\nfunction changeActiveButtonStatus(isRecordReady = true) {\n    const\n        $buttonStartRecord = _common__WEBPACK_IMPORTED_MODULE_1__.UTILS.domSearchElement(_common__WEBPACK_IMPORTED_MODULE_1__.CONSTANTS.buttonStartRecordSelector),\n        $buttonStopRecord = _common__WEBPACK_IMPORTED_MODULE_1__.UTILS.domSearchElement(_common__WEBPACK_IMPORTED_MODULE_1__.CONSTANTS.buttonStopRecordSelector);\n\n    $buttonStartRecord.disabled = !isRecordReady;\n    $buttonStopRecord.disabled = isRecordReady;\n}\n\nfunction showDeviceSettings(device) {\n    if ( !device ) {\n        return;\n    }\n\n    const $textarea = _common__WEBPACK_IMPORTED_MODULE_1__.UTILS.domSearchElement(_common__WEBPACK_IMPORTED_MODULE_1__.CONSTANTS.textareaDeviceInfoSelector);\n    const capabilities = device.getCapabilities();\n\n    $textarea.value = JSON.stringify(capabilities, null, '    ');\n}\n\nasync function main() {\n    const\n        DevicesSettings = await Object.create(_modules_settings__WEBPACK_IMPORTED_MODULE_0__.Devices).init(),\n        RecordSettings = await Object.create(_modules_settings__WEBPACK_IMPORTED_MODULE_0__.Record).init(DevicesSettings);\n\n    await enableDevices(RecordSettings);\n    showDeviceSettings(DevicesSettings.inputVideoDevice);\n    const streams = await makeStreamsObject(RecordSettings);\n\n    await RecordSettings.changeQuality(_modules_settings__WEBPACK_IMPORTED_MODULE_0__.SETTINGS_NAMES.VIDEO_TYPE, _modules_settings__WEBPACK_IMPORTED_MODULE_0__.PRESETS_VIDEO_RECORD[\"1080p_2\"]);\n    showVideoOnPage(streams[_modules_settings__WEBPACK_IMPORTED_MODULE_0__.SETTINGS_NAMES.VIDEO_TYPE].track);\n    (0,_Recorder__WEBPACK_IMPORTED_MODULE_2__.makeRecorder)(streams[_modules_settings__WEBPACK_IMPORTED_MODULE_0__.SETTINGS_NAMES.VIDEO_TYPE].track);\n\n    changeActiveButtonStatus();\n}\n\nmain()\n    .catch(error => console.error(error));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUk0QjtBQUlWO0FBQ3NCOzs7QUFHeEM7QUFDQTtBQUNBLDhCQUE4Qix3RUFBeUI7QUFDdkQsOEJBQThCLHdFQUF5QjtBQUN2RDtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0IseUJBQXlCO0FBQ3hELHlEQUF5RCx3RUFBeUI7QUFDbEYseURBQXlELHdFQUF5Qjs7QUFFbEY7QUFDQSxTQUFTLHdFQUF5QjtBQUNsQyxTQUFTLHdFQUF5QjtBQUNsQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQiwyREFBc0IsQ0FBQyw0REFBdUI7QUFDakU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDZCQUE2QiwyREFBc0IsQ0FBQyx3RUFBbUM7QUFDdkYsNEJBQTRCLDJEQUFzQixDQUFDLHVFQUFrQzs7QUFFckY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNCQUFzQiwyREFBc0IsQ0FBQyx5RUFBb0M7QUFDakY7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsOENBQThDLHNEQUFPO0FBQ3JELDZDQUE2QyxxREFBTTs7QUFFbkQ7QUFDQTtBQUNBOztBQUVBLHVDQUF1Qyx3RUFBeUIsRUFBRSw4RUFBK0I7QUFDakcsNEJBQTRCLHdFQUF5QjtBQUNyRCxJQUFJLHVEQUFZLFNBQVMsd0VBQXlCOztBQUVsRDtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YXNtLXJlY29yZGVyLXRlc3QvLi9zcmMvaW5kZXguanM/YjYzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIERldmljZXMsIFBSRVNFVFNfVklERU9fUkVDT1JELFxuICAgIFJlY29yZCxcbiAgICBTRVRUSU5HU19OQU1FUyxcbn0gZnJvbSBcIi4vbW9kdWxlcy9zZXR0aW5nc1wiO1xuaW1wb3J0IHtcbiAgICBDT05TVEFOVFMsXG4gICAgVVRJTFMsXG59IGZyb20gXCIuL2NvbW1vblwiO1xuaW1wb3J0IHttYWtlUmVjb3JkZXJ9IGZyb20gXCIuL1JlY29yZGVyXCI7XG5cblxuYXN5bmMgZnVuY3Rpb24gZW5hYmxlRGV2aWNlcyhSZWNvcmRTZXR0aW5ncykge1xuICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgUmVjb3JkU2V0dGluZ3MuZW5hYmxlKFNFVFRJTkdTX05BTUVTLkFVRElPX1RZUEUsIHRydWUpLFxuICAgICAgICBSZWNvcmRTZXR0aW5ncy5lbmFibGUoU0VUVElOR1NfTkFNRVMuVklERU9fVFlQRSwgdHJ1ZSksXG4gICAgXSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIG1ha2VTdHJlYW1zT2JqZWN0KFJlY29yZFNldHRpbmdzKSB7XG4gICAgY29uc3RcbiAgICAgICAgZGVmYXVsdFRyYWNrT2JqZWN0ID0geyB0cmFjazogbnVsbCwgcmVhc29uOiAnJyB9LFxuICAgICAgICBhdWRpb1RyYWNrT2JqZWN0ID0gYXdhaXQgUmVjb3JkU2V0dGluZ3MuZ2V0VHJhY2soU0VUVElOR1NfTkFNRVMuQVVESU9fVFlQRSkgfHwgZGVmYXVsdFRyYWNrT2JqZWN0LFxuICAgICAgICB2aWRlb1RyYWNrT2JqZWN0ID0gYXdhaXQgUmVjb3JkU2V0dGluZ3MuZ2V0VHJhY2soU0VUVElOR1NfTkFNRVMuVklERU9fVFlQRSkgfHwgZGVmYXVsdFRyYWNrT2JqZWN0O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgW1NFVFRJTkdTX05BTUVTLkFVRElPX1RZUEVdOiBhdWRpb1RyYWNrT2JqZWN0LFxuICAgICAgICBbU0VUVElOR1NfTkFNRVMuVklERU9fVFlQRV06IHZpZGVvVHJhY2tPYmplY3QsXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gc2hvd1ZpZGVvT25QYWdlKG1lZGlhU3RyZWFtKSB7XG4gICAgaWYgKCAhbWVkaWFTdHJlYW0gKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWVkaWFTdHJlYW0gbWlzc2luZy4nKTtcbiAgICB9XG5cbiAgICBjb25zdCAkdmlkZW8gPSBVVElMUy5kb21TZWFyY2hFbGVtZW50KENPTlNUQU5UUy52aWRlb1NlbGVjdG9yKTtcbiAgICAkdmlkZW8uc3JjT2JqZWN0ID0gbWVkaWFTdHJlYW07XG4gICAgJHZpZGVvLm11dGVkID0gdHJ1ZTtcbiAgICAkdmlkZW8ucGxheSgpO1xufVxuXG5mdW5jdGlvbiBjaGFuZ2VBY3RpdmVCdXR0b25TdGF0dXMoaXNSZWNvcmRSZWFkeSA9IHRydWUpIHtcbiAgICBjb25zdFxuICAgICAgICAkYnV0dG9uU3RhcnRSZWNvcmQgPSBVVElMUy5kb21TZWFyY2hFbGVtZW50KENPTlNUQU5UUy5idXR0b25TdGFydFJlY29yZFNlbGVjdG9yKSxcbiAgICAgICAgJGJ1dHRvblN0b3BSZWNvcmQgPSBVVElMUy5kb21TZWFyY2hFbGVtZW50KENPTlNUQU5UUy5idXR0b25TdG9wUmVjb3JkU2VsZWN0b3IpO1xuXG4gICAgJGJ1dHRvblN0YXJ0UmVjb3JkLmRpc2FibGVkID0gIWlzUmVjb3JkUmVhZHk7XG4gICAgJGJ1dHRvblN0b3BSZWNvcmQuZGlzYWJsZWQgPSBpc1JlY29yZFJlYWR5O1xufVxuXG5mdW5jdGlvbiBzaG93RGV2aWNlU2V0dGluZ3MoZGV2aWNlKSB7XG4gICAgaWYgKCAhZGV2aWNlICkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgJHRleHRhcmVhID0gVVRJTFMuZG9tU2VhcmNoRWxlbWVudChDT05TVEFOVFMudGV4dGFyZWFEZXZpY2VJbmZvU2VsZWN0b3IpO1xuICAgIGNvbnN0IGNhcGFiaWxpdGllcyA9IGRldmljZS5nZXRDYXBhYmlsaXRpZXMoKTtcblxuICAgICR0ZXh0YXJlYS52YWx1ZSA9IEpTT04uc3RyaW5naWZ5KGNhcGFiaWxpdGllcywgbnVsbCwgJyAgICAnKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbWFpbigpIHtcbiAgICBjb25zdFxuICAgICAgICBEZXZpY2VzU2V0dGluZ3MgPSBhd2FpdCBPYmplY3QuY3JlYXRlKERldmljZXMpLmluaXQoKSxcbiAgICAgICAgUmVjb3JkU2V0dGluZ3MgPSBhd2FpdCBPYmplY3QuY3JlYXRlKFJlY29yZCkuaW5pdChEZXZpY2VzU2V0dGluZ3MpO1xuXG4gICAgYXdhaXQgZW5hYmxlRGV2aWNlcyhSZWNvcmRTZXR0aW5ncyk7XG4gICAgc2hvd0RldmljZVNldHRpbmdzKERldmljZXNTZXR0aW5ncy5pbnB1dFZpZGVvRGV2aWNlKTtcbiAgICBjb25zdCBzdHJlYW1zID0gYXdhaXQgbWFrZVN0cmVhbXNPYmplY3QoUmVjb3JkU2V0dGluZ3MpO1xuXG4gICAgYXdhaXQgUmVjb3JkU2V0dGluZ3MuY2hhbmdlUXVhbGl0eShTRVRUSU5HU19OQU1FUy5WSURFT19UWVBFLCBQUkVTRVRTX1ZJREVPX1JFQ09SRFtcIjEwODBwXzJcIl0pO1xuICAgIHNob3dWaWRlb09uUGFnZShzdHJlYW1zW1NFVFRJTkdTX05BTUVTLlZJREVPX1RZUEVdLnRyYWNrKTtcbiAgICBtYWtlUmVjb3JkZXIoc3RyZWFtc1tTRVRUSU5HU19OQU1FUy5WSURFT19UWVBFXS50cmFjayk7XG5cbiAgICBjaGFuZ2VBY3RpdmVCdXR0b25TdGF0dXMoKTtcbn1cblxubWFpbigpXG4gICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/modules/local-storage-saver/Saver/index.js":
/*!********************************************************!*\
  !*** ./src/modules/local-storage-saver/Saver/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\nconst Saver = {\n\n    init: function init(name, version, defaultData=null) {\n        this._name = name;\n        this._version = version;\n\n        this._DEFAULT_SAVE = defaultData;\n\n        this._checkActualSaveVersion();\n\n        return this;\n    },\n\n\n    _checkActualSaveVersion: function _checkActualSaveVersion() {\n        const\n            actualData = this._getDataFromStorage();\n\n        if ( !actualData ) {\n            this._setDataToStorage(this._DEFAULT_SAVE);\n            return;\n        }\n\n        if ( actualData?.version !== this._version ) {\n            this._setDataToStorage({\n                ...this._DEFAULT_SAVE,\n                ...actualData,\n                version: this._version,\n            });\n        }\n    },\n\n    _getDataFromStorage: function _getDataFromStorage() {\n        return JSON.parse(localStorage.getItem(this._name)) || null;\n    },\n\n    _makeDataToSave: function _makeDataToSave(dataToSave, savedData, dir=null, subDir=null) {\n        return dir\n            ? {\n                ...savedData,\n                [dir]: subDir\n                    ? {\n                        ...savedData[dir],\n                        [subDir]: dataToSave,\n                    }\n                    : dataToSave,\n            }\n            : {\n                ...savedData,\n                ...dataToSave,\n            };\n    },\n\n    _selectDataByDirectory: function _selectDataByDirectory(data, dir=null, subDir=null) {\n        return dir\n            ? subDir\n                ? data[dir][subDir]\n                : data[dir]\n            : data;\n    },\n\n    _setDataToStorage: function _setDataToStorage(data) {\n        localStorage.setItem(this._name, JSON.stringify(data));\n    },\n\n\n    get name() {\n        return this._name;\n    },\n\n    set name(stringName) {\n        this._name = stringName.toString();\n    },\n\n\n    load(dir=null, subDir=null) {\n        try {\n            const\n                data = this._getDataFromStorage();\n\n            return this._selectDataByDirectory(data, dir, subDir);\n\n        } catch (error) {\n            console.error(error);\n        }\n    },\n\n\n    save: function save(dataToSave, dir=null, subDir=null) {\n        try {\n            const\n                savedData = this.load();\n\n            localStorage.setItem(\n                this._name,\n                JSON.stringify(\n                    this._makeDataToSave(dataToSave, savedData, dir, subDir)\n                ),\n            );\n\n        } catch (error) {\n            console.error(error);\n        }\n    },\n\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Saver);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9sb2NhbC1zdG9yYWdlLXNhdmVyL1NhdmVyL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0EsS0FBSzs7O0FBR0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7O0FBR0w7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7OztBQUdMO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsS0FBSzs7O0FBR0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQSxpRUFBZSxLQUFLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FzbS1yZWNvcmRlci10ZXN0Ly4vc3JjL21vZHVsZXMvbG9jYWwtc3RvcmFnZS1zYXZlci9TYXZlci9pbmRleC5qcz81N2RkIl0sInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgU2F2ZXIgPSB7XG5cbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KG5hbWUsIHZlcnNpb24sIGRlZmF1bHREYXRhPW51bGwpIHtcbiAgICAgICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuX3ZlcnNpb24gPSB2ZXJzaW9uO1xuXG4gICAgICAgIHRoaXMuX0RFRkFVTFRfU0FWRSA9IGRlZmF1bHREYXRhO1xuXG4gICAgICAgIHRoaXMuX2NoZWNrQWN0dWFsU2F2ZVZlcnNpb24oKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG5cbiAgICBfY2hlY2tBY3R1YWxTYXZlVmVyc2lvbjogZnVuY3Rpb24gX2NoZWNrQWN0dWFsU2F2ZVZlcnNpb24oKSB7XG4gICAgICAgIGNvbnN0XG4gICAgICAgICAgICBhY3R1YWxEYXRhID0gdGhpcy5fZ2V0RGF0YUZyb21TdG9yYWdlKCk7XG5cbiAgICAgICAgaWYgKCAhYWN0dWFsRGF0YSApIHtcbiAgICAgICAgICAgIHRoaXMuX3NldERhdGFUb1N0b3JhZ2UodGhpcy5fREVGQVVMVF9TQVZFKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggYWN0dWFsRGF0YT8udmVyc2lvbiAhPT0gdGhpcy5fdmVyc2lvbiApIHtcbiAgICAgICAgICAgIHRoaXMuX3NldERhdGFUb1N0b3JhZ2Uoe1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuX0RFRkFVTFRfU0FWRSxcbiAgICAgICAgICAgICAgICAuLi5hY3R1YWxEYXRhLFxuICAgICAgICAgICAgICAgIHZlcnNpb246IHRoaXMuX3ZlcnNpb24sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfZ2V0RGF0YUZyb21TdG9yYWdlOiBmdW5jdGlvbiBfZ2V0RGF0YUZyb21TdG9yYWdlKCkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLl9uYW1lKSkgfHwgbnVsbDtcbiAgICB9LFxuXG4gICAgX21ha2VEYXRhVG9TYXZlOiBmdW5jdGlvbiBfbWFrZURhdGFUb1NhdmUoZGF0YVRvU2F2ZSwgc2F2ZWREYXRhLCBkaXI9bnVsbCwgc3ViRGlyPW51bGwpIHtcbiAgICAgICAgcmV0dXJuIGRpclxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgLi4uc2F2ZWREYXRhLFxuICAgICAgICAgICAgICAgIFtkaXJdOiBzdWJEaXJcbiAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zYXZlZERhdGFbZGlyXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFtzdWJEaXJdOiBkYXRhVG9TYXZlLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDogZGF0YVRvU2F2ZSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgIC4uLnNhdmVkRGF0YSxcbiAgICAgICAgICAgICAgICAuLi5kYXRhVG9TYXZlLFxuICAgICAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgX3NlbGVjdERhdGFCeURpcmVjdG9yeTogZnVuY3Rpb24gX3NlbGVjdERhdGFCeURpcmVjdG9yeShkYXRhLCBkaXI9bnVsbCwgc3ViRGlyPW51bGwpIHtcbiAgICAgICAgcmV0dXJuIGRpclxuICAgICAgICAgICAgPyBzdWJEaXJcbiAgICAgICAgICAgICAgICA/IGRhdGFbZGlyXVtzdWJEaXJdXG4gICAgICAgICAgICAgICAgOiBkYXRhW2Rpcl1cbiAgICAgICAgICAgIDogZGF0YTtcbiAgICB9LFxuXG4gICAgX3NldERhdGFUb1N0b3JhZ2U6IGZ1bmN0aW9uIF9zZXREYXRhVG9TdG9yYWdlKGRhdGEpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5fbmFtZSwgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgIH0sXG5cblxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbmFtZTtcbiAgICB9LFxuXG4gICAgc2V0IG5hbWUoc3RyaW5nTmFtZSkge1xuICAgICAgICB0aGlzLl9uYW1lID0gc3RyaW5nTmFtZS50b1N0cmluZygpO1xuICAgIH0sXG5cblxuICAgIGxvYWQoZGlyPW51bGwsIHN1YkRpcj1udWxsKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdFxuICAgICAgICAgICAgICAgIGRhdGEgPSB0aGlzLl9nZXREYXRhRnJvbVN0b3JhZ2UoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdERhdGFCeURpcmVjdG9yeShkYXRhLCBkaXIsIHN1YkRpcik7XG5cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgc2F2ZTogZnVuY3Rpb24gc2F2ZShkYXRhVG9TYXZlLCBkaXI9bnVsbCwgc3ViRGlyPW51bGwpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0XG4gICAgICAgICAgICAgICAgc2F2ZWREYXRhID0gdGhpcy5sb2FkKCk7XG5cbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFxuICAgICAgICAgICAgICAgIHRoaXMuX25hbWUsXG4gICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21ha2VEYXRhVG9TYXZlKGRhdGFUb1NhdmUsIHNhdmVkRGF0YSwgZGlyLCBzdWJEaXIpXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfSxcblxufTtcblxuZXhwb3J0IGRlZmF1bHQgU2F2ZXI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/modules/local-storage-saver/Saver/index.js\n");

/***/ }),

/***/ "./src/modules/local-storage-saver/index.js":
/*!**************************************************!*\
  !*** ./src/modules/local-storage-saver/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Saver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Saver */ \"./src/modules/local-storage-saver/Saver/index.js\");\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_Saver__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9sb2NhbC1zdG9yYWdlLXNhdmVyL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXdDOztBQUV4QyxpRUFBZSw4Q0FBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YXNtLXJlY29yZGVyLXRlc3QvLi9zcmMvbW9kdWxlcy9sb2NhbC1zdG9yYWdlLXNhdmVyL2luZGV4LmpzPzI5NjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IExvY2FsU3RvcmFnZVNhdmVyIGZyb20gJy4vU2F2ZXInO1xuXG5leHBvcnQgZGVmYXVsdCBMb2NhbFN0b3JhZ2VTYXZlcjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/modules/local-storage-saver/index.js\n");

/***/ }),

/***/ "./src/modules/settings/components/Devices/constants.js":
/*!**************************************************************!*\
  !*** ./src/modules/settings/components/Devices/constants.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DEFAULT_SAVE\": () => (/* binding */ DEFAULT_SAVE),\n/* harmony export */   \"DEVICE_CHANGE_EVENT\": () => (/* binding */ DEVICE_CHANGE_EVENT),\n/* harmony export */   \"DIRECTORY\": () => (/* binding */ DIRECTORY),\n/* harmony export */   \"LABEL\": () => (/* binding */ LABEL),\n/* harmony export */   \"LS_SAVE_INFO_NAME\": () => (/* binding */ LS_SAVE_INFO_NAME),\n/* harmony export */   \"SAVE_VERSION\": () => (/* binding */ SAVE_VERSION),\n/* harmony export */   \"TIMEOUT_FOR_PREPARE_DEVICE\": () => (/* binding */ TIMEOUT_FOR_PREPARE_DEVICE)\n/* harmony export */ });\n/* harmony import */ var _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @modules/settings/utils/settingsNames */ \"./src/modules/settings/utils/settingsNames.js\");\n\n\nconst LABEL = 'Devices Settings';\nconst LS_SAVE_INFO_NAME = 'wr-devices-common';\nconst SAVE_VERSION = 'v1.0';\nconst DEVICE_CHANGE_EVENT = 'devicechange';\nconst TIMEOUT_FOR_PREPARE_DEVICE = 15000;\n\nconst DEFAULT_SAVE = {\n    version: SAVE_VERSION,\n    enabled: {\n        [_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_0__[\"default\"].AUDIO_TYPE]: false,\n        [_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_0__[\"default\"].VIDEO_TYPE]: false,\n    },\n};\n\nconst\n    DIRECTORY = {\n        enabled: 'enabled',\n    };\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9zZXR0aW5ncy9jb21wb25lbnRzL0RldmljZXMvY29uc3RhbnRzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQW1FOztBQUVuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsd0ZBQXlCO0FBQ2xDLFNBQVMsd0ZBQXlCO0FBQ2xDLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dhc20tcmVjb3JkZXItdGVzdC8uL3NyYy9tb2R1bGVzL3NldHRpbmdzL2NvbXBvbmVudHMvRGV2aWNlcy9jb25zdGFudHMuanM/YzNiMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU0VUVElOR1NfTkFNRVMgZnJvbSBcIkBtb2R1bGVzL3NldHRpbmdzL3V0aWxzL3NldHRpbmdzTmFtZXNcIjtcblxuY29uc3QgTEFCRUwgPSAnRGV2aWNlcyBTZXR0aW5ncyc7XG5jb25zdCBMU19TQVZFX0lORk9fTkFNRSA9ICd3ci1kZXZpY2VzLWNvbW1vbic7XG5jb25zdCBTQVZFX1ZFUlNJT04gPSAndjEuMCc7XG5jb25zdCBERVZJQ0VfQ0hBTkdFX0VWRU5UID0gJ2RldmljZWNoYW5nZSc7XG5jb25zdCBUSU1FT1VUX0ZPUl9QUkVQQVJFX0RFVklDRSA9IDE1MDAwO1xuXG5jb25zdCBERUZBVUxUX1NBVkUgPSB7XG4gICAgdmVyc2lvbjogU0FWRV9WRVJTSU9OLFxuICAgIGVuYWJsZWQ6IHtcbiAgICAgICAgW1NFVFRJTkdTX05BTUVTLkFVRElPX1RZUEVdOiBmYWxzZSxcbiAgICAgICAgW1NFVFRJTkdTX05BTUVTLlZJREVPX1RZUEVdOiBmYWxzZSxcbiAgICB9LFxufTtcblxuY29uc3RcbiAgICBESVJFQ1RPUlkgPSB7XG4gICAgICAgIGVuYWJsZWQ6ICdlbmFibGVkJyxcbiAgICB9O1xuXG5leHBvcnQge1xuICAgIExBQkVMLFxuICAgIExTX1NBVkVfSU5GT19OQU1FLFxuICAgIFNBVkVfVkVSU0lPTixcbiAgICBERVZJQ0VfQ0hBTkdFX0VWRU5ULFxuICAgIFRJTUVPVVRfRk9SX1BSRVBBUkVfREVWSUNFLFxuICAgIERFRkFVTFRfU0FWRSxcbiAgICBESVJFQ1RPUlksXG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/modules/settings/components/Devices/constants.js\n");

/***/ }),

/***/ "./src/modules/settings/components/Devices/index.js":
/*!**********************************************************!*\
  !*** ./src/modules/settings/components/Devices/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var events_om__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events-om */ \"./node_modules/events-om/build/index.es.js\");\n/* harmony import */ var _modules_local_storage_saver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @modules/local-storage-saver */ \"./src/modules/local-storage-saver/index.js\");\n/* harmony import */ var _modules_settings_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @modules/settings/utils */ \"./src/modules/settings/utils/index.js\");\n/* harmony import */ var _modules_settings_utils_devicesStatus__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @modules/settings/utils/devicesStatus */ \"./src/modules/settings/utils/devicesStatus.js\");\n/* harmony import */ var _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @modules/settings/utils/settingsNames */ \"./src/modules/settings/utils/settingsNames.js\");\n/* harmony import */ var _modules_settings_utils_devicesErrorTypes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @modules/settings/utils/devicesErrorTypes */ \"./src/modules/settings/utils/devicesErrorTypes.js\");\n/* harmony import */ var _modules_settings_utils_eventsList__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @modules/settings/utils/eventsList */ \"./src/modules/settings/utils/eventsList.js\");\n/* harmony import */ var _modules_settings_components_Devices_constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @modules/settings/components/Devices/constants */ \"./src/modules/settings/components/Devices/constants.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @interface Devices\n * @version 1.0.0\n *\n * @type {{\n *     _Events: (Events|null)\n * }}\n */\nconst Devices = {\n\n    _Events: null,\n\n    init: async function init() {\n        this._Events = Object.create(events_om__WEBPACK_IMPORTED_MODULE_0__[\"default\"]).init();\n        this._LSSaver = Object.create(_modules_local_storage_saver__WEBPACK_IMPORTED_MODULE_1__[\"default\"]).init(\n            _modules_settings_components_Devices_constants__WEBPACK_IMPORTED_MODULE_7__.LS_SAVE_INFO_NAME,\n            _modules_settings_components_Devices_constants__WEBPACK_IMPORTED_MODULE_7__.SAVE_VERSION,\n            _modules_settings_components_Devices_constants__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_SAVE,\n        );\n\n        this._devicesStatus = {\n            [_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].INPUT]: {\n                [_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_TYPE]: _modules_settings_utils_devicesStatus__WEBPACK_IMPORTED_MODULE_3__[\"default\"].PREPARE,\n                [_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].VIDEO_TYPE]: _modules_settings_utils_devicesStatus__WEBPACK_IMPORTED_MODULE_3__[\"default\"].PREPARE,\n            },\n            [_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].OUTPUT]: {\n                [_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_TYPE]: _modules_settings_utils_devicesStatus__WEBPACK_IMPORTED_MODULE_3__[\"default\"].PREPARE,\n                [_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].VIDEO_TYPE]: _modules_settings_utils_devicesStatus__WEBPACK_IMPORTED_MODULE_3__[\"default\"].PREPARE,\n            },\n        };\n\n        this._devicesList = {\n            [_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].INPUT]: {\n                [_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_TYPE]: null,\n                [_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].VIDEO_TYPE]: null,\n            },\n            [_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].OUTPUT]: {\n                [_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_TYPE]: null,\n                [_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].VIDEO_TYPE]: null,\n            },\n        };\n\n        this._currentDevices = {\n            [_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].INPUT]: {\n                [_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_TYPE]: null,\n                [_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].VIDEO_TYPE]: null,\n            },\n            [_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].OUTPUT]: {\n                [_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_TYPE]: null,\n                [_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].VIDEO_TYPE]: null,\n            },\n        };\n\n        // Check permissions\n        await this._checkPermission(_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_TYPE);\n        await this._checkPermission(_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].VIDEO_TYPE);\n\n        // Update devices list\n        await this._handleDeviceChange();\n\n        this._setCurrentDevices(_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_TYPE);\n        this._setCurrentDevices(_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].VIDEO_TYPE);\n\n        navigator?.mediaDevices?.addEventListener(_modules_settings_components_Devices_constants__WEBPACK_IMPORTED_MODULE_7__.DEVICE_CHANGE_EVENT, this._handleDeviceChange.bind(this));\n\n        return this;\n    },\n\n\n    _checkPermission: async function _checkPermission(mediaType) {\n        const\n            constraints = mediaType === _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_TYPE\n                ? {audio: true, video: false} : {audio: false, video: true};\n\n        let timeout = setTimeout(() => {\n            this._changeDeviceStatus(mediaType, _modules_settings_utils_devicesStatus__WEBPACK_IMPORTED_MODULE_3__[\"default\"].NOT_READABLE);\n        }, _modules_settings_components_Devices_constants__WEBPACK_IMPORTED_MODULE_7__.TIMEOUT_FOR_PREPARE_DEVICE);\n\n        try {\n            let stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n            stream.getTracks().forEach(track => {\n                track?.stop();\n                stream.removeTrack(track);\n            });\n            stream = null;\n\n            this._changeDeviceStatus(mediaType, _modules_settings_utils_devicesStatus__WEBPACK_IMPORTED_MODULE_3__[\"default\"].ON);\n\n        } catch (error) {\n            const { name } = error;\n\n            switch (name) {\n                case _modules_settings_utils_devicesErrorTypes__WEBPACK_IMPORTED_MODULE_5__.DEVICES_ERROR_TYPES.notAllowedError:\n                    this._changeDeviceStatus(mediaType, _modules_settings_utils_devicesStatus__WEBPACK_IMPORTED_MODULE_3__[\"default\"].NOT_ALLOWED);\n                    break;\n\n                case _modules_settings_utils_devicesErrorTypes__WEBPACK_IMPORTED_MODULE_5__.DEVICES_ERROR_TYPES.notFoundError:\n                    this._changeDeviceStatus(mediaType, _modules_settings_utils_devicesStatus__WEBPACK_IMPORTED_MODULE_3__[\"default\"].NOT_FOUND);\n                    break;\n\n                case _modules_settings_utils_devicesErrorTypes__WEBPACK_IMPORTED_MODULE_5__.DEVICES_ERROR_TYPES.notReadableError:\n                    this._changeDeviceStatus(mediaType, _modules_settings_utils_devicesStatus__WEBPACK_IMPORTED_MODULE_3__[\"default\"].NOT_READABLE);\n                    break;\n\n                case _modules_settings_utils_devicesErrorTypes__WEBPACK_IMPORTED_MODULE_5__.DEVICES_ERROR_TYPES.overconstrainedError:\n                    this._changeDeviceStatus(mediaType, _modules_settings_utils_devicesStatus__WEBPACK_IMPORTED_MODULE_3__[\"default\"].OVERCONSTRAINED);\n                    break;\n\n                case _modules_settings_utils_devicesErrorTypes__WEBPACK_IMPORTED_MODULE_5__.DEVICES_ERROR_TYPES.securityError:\n                    this._changeDeviceStatus(mediaType, _modules_settings_utils_devicesStatus__WEBPACK_IMPORTED_MODULE_3__[\"default\"].SECURITY_ERROR);\n                    break;\n\n                case _modules_settings_utils_devicesErrorTypes__WEBPACK_IMPORTED_MODULE_5__.DEVICES_ERROR_TYPES.typeError:\n                    this._changeDeviceStatus(mediaType, _modules_settings_utils_devicesStatus__WEBPACK_IMPORTED_MODULE_3__[\"default\"].TYPE_ERROR);\n                    break;\n\n                default:\n                    this._changeDeviceStatus(mediaType, _modules_settings_utils_devicesStatus__WEBPACK_IMPORTED_MODULE_3__[\"default\"].ON);\n            }\n        }\n\n        clearTimeout(timeout);\n        timeout = null;\n    },\n\n\n    /**\n     *\n     * @param mediaType\n     * @param {string} status\n     * @param deviceType\n     * @private\n     */\n    _changeDeviceStatus: function _changeDeviceStatus(mediaType, status, deviceType = _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].INPUT) {\n        if ( !Object.values(_modules_settings_utils_devicesStatus__WEBPACK_IMPORTED_MODULE_3__[\"default\"]).includes(status) ) {\n            console.warn(`Attempt to set unknown device status: ${status}`);\n            return;\n        }\n\n        const\n            event = deviceType === _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].INPUT\n                ? _modules_settings_utils_eventsList__WEBPACK_IMPORTED_MODULE_6__[\"default\"].DEVICE_INPUT_STATUS_CHANGE : _modules_settings_utils_eventsList__WEBPACK_IMPORTED_MODULE_6__[\"default\"].DEVICE_OUTPUT_STATUS_CHANGE;\n\n        this._devicesStatus[deviceType][mediaType] = status;\n\n        this._LSSaver.save(\n            status,\n            _modules_settings_components_Devices_constants__WEBPACK_IMPORTED_MODULE_7__.DIRECTORY.enabled,\n            mediaType\n        );\n\n        this._Events.notify(event, {\n            deviceType,\n            mediaType,\n            status\n        });\n    },\n\n\n    _getDeviceById: function _getDeviceById(mediaType, deviceType = _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].INPUT, deviceId=null) {\n        if ( !deviceId ) return '';\n        return this._devicesList[deviceType][mediaType].find(device => device.deviceId === deviceId)?.deviceId;\n    },\n\n\n    /**\n     * @description\n     * Returns a list of devices. Can be filtered by constraints\n     *\n     * @async\n     * @param {object|null} constraints\n     * @returns {Promise<array<object>>}\n     *\n     * @private\n     */\n    _getDevicesList: async function _getDevicesList(constraints=null) {\n        const\n            userDevices = await navigator.mediaDevices.enumerateDevices();\n\n        if ( !constraints ) {\n            return userDevices;\n        }\n\n        return userDevices.filter(device => device.kind === constraints.kind);\n    },\n\n\n    _handleDeviceChange: async function _handleDeviceChange() {\n\n        async function updateDevices(mediaType) {\n            await this._checkPermission(mediaType);\n            await this._updateDevicesList(mediaType);\n            this._setCurrentDevices(mediaType);\n        }\n\n        await updateDevices.call(this, _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_TYPE);\n        await updateDevices.call(this, _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].VIDEO_TYPE);\n    },\n\n\n    _normalizeStatus: function _normalizeStatus(status) {\n        return typeof status !== 'boolean'\n            ? status\n            : status ? _modules_settings_utils_devicesStatus__WEBPACK_IMPORTED_MODULE_3__[\"default\"].ON : _modules_settings_utils_devicesStatus__WEBPACK_IMPORTED_MODULE_3__[\"default\"].OFF;\n    },\n\n\n    _setCurrentDevices: function _setCurrentDevices(mediaType, deviceId = null, deviceType = _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].INPUT) {\n        const\n            deviceList = this._devicesList[deviceType][mediaType],\n            deviceStatus = this._devicesStatus[deviceType][mediaType],\n            isDeviceAvailable =\n                deviceStatus === _modules_settings_utils_devicesStatus__WEBPACK_IMPORTED_MODULE_3__[\"default\"].OFF\n                || deviceStatus === _modules_settings_utils_devicesStatus__WEBPACK_IMPORTED_MODULE_3__[\"default\"].ON\n                || deviceStatus === _modules_settings_utils_devicesStatus__WEBPACK_IMPORTED_MODULE_3__[\"default\"].PROMPT;\n\n        if ( !isDeviceAvailable ) {\n            return;\n        }\n\n        this._currentDevices[deviceType][mediaType] =\n            this._getDeviceById(mediaType, deviceType, deviceId)\n            || deviceList[0]?.deviceId\n            || null;\n\n        const\n            event = deviceType === _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].INPUT\n                ? _modules_settings_utils_eventsList__WEBPACK_IMPORTED_MODULE_6__[\"default\"].DEVICE_INPUT_CHANGE : _modules_settings_utils_eventsList__WEBPACK_IMPORTED_MODULE_6__[\"default\"].DEVICE_OUTPUT_CHANGE;\n\n        this._Events.notify(event, {\n            deviceType,\n            mediaType,\n            device: deviceList.find(({ deviceId }) => deviceId === this._currentDevices[deviceType][mediaType]),\n        });\n    },\n\n\n    _updateDevicesList: async function _updateDevicesList(mediaType, deviceType = _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].INPUT) {\n        const\n            currentDeviceStatus = this._devicesStatus[deviceType][mediaType];\n\n\n        if ( currentDeviceStatus === _modules_settings_utils_devicesStatus__WEBPACK_IMPORTED_MODULE_3__[\"default\"].NOT_ALLOWED\n            || currentDeviceStatus === _modules_settings_utils_devicesStatus__WEBPACK_IMPORTED_MODULE_3__[\"default\"].SECURITY_ERROR\n        ) {\n            console.warn(`${mediaType === _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_TYPE\n                ? 'Audio' : 'Video'} device access denied by user settings`);\n            return;\n        }\n\n        const\n            kindDevice = deviceType === _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].INPUT\n                ? mediaType === _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_TYPE\n                    ? _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_INPUT_TYPE\n                    : _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].VIDEO_INPUT_TYPE\n                : mediaType === _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_TYPE\n                    ? _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_OUTPUT_TYPE\n                    : _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].VIDEO_OUTPUT_TYPE,\n\n            devicesList = (await this._getDevicesList())\n                .filter(device => device.kind === kindDevice);\n\n        /**\n         * @description\n         * Compares lists of devices to determine changes in the current list.\n         *\n         * @param currentDevices\n         * @param updatedDevices\n         * @return {boolean} true - There was a change / false - No changes happened\n         */\n        const compareDevices = (currentDevices, updatedDevices) => {\n            this._checkDevicesAvaliability(currentDevices, updatedDevices, deviceType, mediaType);  \n\n            if (currentDevices?.length !== updatedDevices?.length) {\n                return true;\n            }\n\n            const c = updatedDevices.map(device => {\n                return !currentDevices.find(item => item.deviceId === device.deviceId);\n            });\n\n            return c.includes(true);\n        }\n\n        const\n            listIdentityStatus = compareDevices(this._devicesList[deviceType][mediaType], devicesList),\n\n            event = deviceType === _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].INPUT\n                ? _modules_settings_utils_eventsList__WEBPACK_IMPORTED_MODULE_6__[\"default\"].DEVICES_INPUT_LIST_CHANGE : _modules_settings_utils_eventsList__WEBPACK_IMPORTED_MODULE_6__[\"default\"].DEVICES_OUTPUT_LIST_CHANGE;\n\n        if ( !listIdentityStatus ) {\n            return;\n        }\n\n        this._devicesList = {\n            ...this._devicesList,\n            [deviceType]: {\n                ...this._devicesList[deviceType],\n                [mediaType]: devicesList,\n            },\n        };\n\n        this._Events.notify(event, {\n            deviceType,\n            mediaType,\n            devices: devicesList,\n        });\n    },\n\n\n    _checkDevicesAvaliability: function _checkDevicesAvaliability(currentDevices, updatedDevices, deviceType, mediaType) {\n      const\n          isDeviceListDifferent = currentDevices?.length > updatedDevices?.length || (currentDevices && updatedDevices === null),\n          isDevicesMissing = updatedDevices === null || updatedDevices?.length === 0 || updatedDevices?.length === 1;\n\n      if (isDeviceListDifferent && isDevicesMissing) {\n          this._Events.notify(_modules_settings_utils_eventsList__WEBPACK_IMPORTED_MODULE_6__[\"default\"].DEVICES_ACTIVE_DEVICE_DISCONNECTED, {\n              deviceType,\n              mediaType,\n          });\n      }\n    },\n\n\n    get inputAudioDevice() {\n        const\n            devices = this._devicesList[_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].INPUT][_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_TYPE],\n            currentDeviceId = this._currentDevices[_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].INPUT][_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_TYPE];\n\n        return devices?.find(({deviceId}) => deviceId === currentDeviceId) || null;\n    },\n\n    get outputAudioDevice() {\n        const\n            devices = this._devicesList[_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].OUTPUT][_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_TYPE],\n            currentDeviceId = this._currentDevices[_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].OUTPUT][_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_TYPE];\n\n        return devices?.find(({deviceId}) => deviceId === currentDeviceId) || null;\n    },\n\n    get inputVideoDevice() {\n        const\n            devices = this._devicesList[_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].INPUT][_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].VIDEO_TYPE],\n            currentDeviceId = this._currentDevices[_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].INPUT][_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].VIDEO_TYPE];\n\n        return devices?.find(({deviceId}) => deviceId === currentDeviceId) || null;\n    },\n\n    get outputVideoDevice() {\n        const\n            devices = this._devicesList[_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].OUTPUT][_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].VIDEO_TYPE],\n            currentDeviceId = this._currentDevices[_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].OUTPUT][_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].VIDEO_TYPE];\n\n        return devices?.find(({deviceId}) => deviceId === currentDeviceId) || null;\n    },\n\n    get devices() {\n        return this._devicesList;\n    },\n\n    get inputDevices() {\n        return this._devicesList[_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].INPUT];\n    },\n\n    get outputDevices() {\n        return this._devicesList[_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].OUTPUT];\n    },\n\n    get inputAudioDevices() {\n        return this._devicesList[_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].INPUT][_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_TYPE];\n    },\n\n    get outputAudioDevices() {\n        return this._devicesList[_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].OUTPUT][_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_TYPE];\n    },\n\n    get inputVideoDevices() {\n        return this._devicesList[_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].INPUT][_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].VIDEO_TYPE];\n    },\n\n    get outputVideoDevices() {\n        return this._devicesList[_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].OUTPUT][_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].VIDEO_TYPE];\n    },\n\n    get statuses() {\n        return this._devicesStatus;\n    },\n\n    get inputAudioStatus() {\n        return this._devicesStatus[_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].INPUT][_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_TYPE];\n    },\n\n    get outputAudioStatus() {\n        return this._devicesStatus[_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].OUTPUT][_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_TYPE];\n    },\n\n    get inputVideoStatus() {\n        return this._devicesStatus[_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].INPUT][_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].VIDEO_TYPE];\n    },\n\n    get outputVideoStatus() {\n        return this._devicesStatus[_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].OUTPUT][_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].VIDEO_TYPE];\n    },\n\n    set inputAudioDevice(deviceId) {\n        this._setCurrentDevices(_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_TYPE, deviceId);\n    },\n\n    set outputAudioDevice(deviceId) {\n        this._setCurrentDevices(_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_TYPE, deviceId, _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].OUTPUT);\n    },\n\n    set inputVideoDevice(deviceId) {\n        this._setCurrentDevices(_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].VIDEO_TYPE, deviceId);\n    },\n\n    set outputVideoDevice(deviceId) {\n        this._setCurrentDevices(_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].VIDEO_TYPE, deviceId, _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].OUTPUT);\n    },\n\n    /**\n     *\n     * @param {boolean|string.<DEVICES_STATUS>} status\n     */\n    set inputAudioStatus(status) {\n        this._changeDeviceStatus(\n            _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_TYPE,\n            this._normalizeStatus(status)\n        );\n    },\n\n    set outputAudioStatus(status) {\n        this._changeDeviceStatus(_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AUDIO_TYPE, status, _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].OUTPUT);\n    },\n\n    /**\n     *\n     * @param {boolean|string.<DEVICES_STATUS>} status\n     */\n    set inputVideoStatus(status) {\n        this._changeDeviceStatus(\n            _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].VIDEO_TYPE,\n            this._normalizeStatus(status)\n        );\n    },\n\n    set outputVideoStatus(status) {\n        this._changeDeviceStatus(_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].VIDEO_TYPE, status, _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_4__[\"default\"].OUTPUT);\n    },\n\n    /**\n     * Unsubscribe from an event\n     *\n     * @author Artem Stepanov <artyom.stepanov@openmedia.co>\n     * @version v0.1.0\n     * @since v0.1.0\n     *\n     * @param {string<Events_List>} event - Specified event from EVENTS_LIST\n     * @param {function} callback - Callback functions handling the event\n     */\n    off(event, callback) {\n        try {\n            if (typeof event !== 'string') {\n                console.warn(`${_modules_settings_components_Devices_constants__WEBPACK_IMPORTED_MODULE_7__.LABEL} | type of event is not string.`);\n                return;\n            }\n            if (!(callback instanceof Function)) {\n                console.warn(`${_modules_settings_components_Devices_constants__WEBPACK_IMPORTED_MODULE_7__.LABEL} | type of callback is not function.`);\n                return;\n            }\n            if (!(0,_modules_settings_utils__WEBPACK_IMPORTED_MODULE_2__.existEvent)(event)) {\n                console.warn(`${_modules_settings_components_Devices_constants__WEBPACK_IMPORTED_MODULE_7__.LABEL} | Event not found.`);\n                return;\n            }\n\n            this._Events.remove(event, callback);\n\n        } catch (error) {\n            console.error(error);\n            throw new Error(error);\n        }\n\n        return this;\n    },\n\n\n    /**\n     * Subscribe to the event\n     *\n     * @author Artem Stepanov <artyom.stepanov@openmedia.co>\n     * @version v0.1.0\n     * @since v0.1.0\n     *\n     * @param {string<Events_List>} event - Specified event from Events List\n     * @param {function} callback - Callback functions handling the event\n     */\n    on(event, callback) {\n        try {\n            if (!(0,_modules_settings_utils__WEBPACK_IMPORTED_MODULE_2__.existEvent)(event)) {\n                console.warn(`${_modules_settings_components_Devices_constants__WEBPACK_IMPORTED_MODULE_7__.LABEL} | Event not found.`);\n                return;\n            }\n\n            this._Events.add(event, callback);\n        } catch (error) {\n            console.error(error);\n            throw new Error(error);\n        }\n\n        return this;\n    },\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Devices);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9zZXR0aW5ncy9jb21wb25lbnRzL0RldmljZXMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQStCO0FBQzhCOztBQUVWOztBQUVnQjtBQUNBO0FBQ1c7QUFDakI7O0FBVUw7OztBQUd4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxxQ0FBcUMsaURBQU07QUFDM0Msc0NBQXNDLG9FQUFpQjtBQUN2RCxZQUFZLDZGQUFpQjtBQUM3QixZQUFZLHdGQUFZO0FBQ3hCLFlBQVksd0ZBQVk7QUFDeEI7O0FBRUE7QUFDQSxhQUFhLG1GQUFvQjtBQUNqQyxpQkFBaUIsd0ZBQXlCLEdBQUcscUZBQXNCO0FBQ25FLGlCQUFpQix3RkFBeUIsR0FBRyxxRkFBc0I7QUFDbkUsYUFBYTtBQUNiLGFBQWEsb0ZBQXFCO0FBQ2xDLGlCQUFpQix3RkFBeUIsR0FBRyxxRkFBc0I7QUFDbkUsaUJBQWlCLHdGQUF5QixHQUFHLHFGQUFzQjtBQUNuRSxhQUFhO0FBQ2I7O0FBRUE7QUFDQSxhQUFhLG1GQUFvQjtBQUNqQyxpQkFBaUIsd0ZBQXlCO0FBQzFDLGlCQUFpQix3RkFBeUI7QUFDMUMsYUFBYTtBQUNiLGFBQWEsb0ZBQXFCO0FBQ2xDLGlCQUFpQix3RkFBeUI7QUFDMUMsaUJBQWlCLHdGQUF5QjtBQUMxQyxhQUFhO0FBQ2I7O0FBRUE7QUFDQSxhQUFhLG1GQUFvQjtBQUNqQyxpQkFBaUIsd0ZBQXlCO0FBQzFDLGlCQUFpQix3RkFBeUI7QUFDMUMsYUFBYTtBQUNiLGFBQWEsb0ZBQXFCO0FBQ2xDLGlCQUFpQix3RkFBeUI7QUFDMUMsaUJBQWlCLHdGQUF5QjtBQUMxQyxhQUFhO0FBQ2I7O0FBRUE7QUFDQSxvQ0FBb0Msd0ZBQXlCO0FBQzdELG9DQUFvQyx3RkFBeUI7O0FBRTdEO0FBQ0E7O0FBRUEsZ0NBQWdDLHdGQUF5QjtBQUN6RCxnQ0FBZ0Msd0ZBQXlCOztBQUV6RCxrREFBa0QsK0ZBQW1COztBQUVyRTtBQUNBLEtBQUs7OztBQUdMO0FBQ0E7QUFDQSx3Q0FBd0Msd0ZBQXlCO0FBQ2pFLG1CQUFtQiwyQkFBMkIsR0FBRzs7QUFFakQ7QUFDQSxnREFBZ0QsMEZBQTJCO0FBQzNFLFNBQVMsRUFBRSxzR0FBMEI7O0FBRXJDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiOztBQUVBLGdEQUFnRCxnRkFBaUI7O0FBRWpFLFVBQVU7QUFDVixvQkFBb0IsT0FBTzs7QUFFM0I7QUFDQSxxQkFBcUIsMEdBQW1DO0FBQ3hELHdEQUF3RCx5RkFBMEI7QUFDbEY7O0FBRUEscUJBQXFCLHdHQUFpQztBQUN0RCx3REFBd0QsdUZBQXdCO0FBQ2hGOztBQUVBLHFCQUFxQiwyR0FBb0M7QUFDekQsd0RBQXdELDBGQUEyQjtBQUNuRjs7QUFFQSxxQkFBcUIsK0dBQXdDO0FBQzdELHdEQUF3RCw2RkFBOEI7QUFDdEY7O0FBRUEscUJBQXFCLHdHQUFpQztBQUN0RCx3REFBd0QsNEZBQTZCO0FBQ3JGOztBQUVBLHFCQUFxQixvR0FBNkI7QUFDbEQsd0RBQXdELHdGQUF5QjtBQUNqRjs7QUFFQTtBQUNBLHdEQUF3RCxnRkFBaUI7QUFDekU7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7O0FBR0w7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLHNGQUFzRixtRkFBb0I7QUFDMUcsNEJBQTRCLDZFQUFjO0FBQzFDLGtFQUFrRSxPQUFPO0FBQ3pFO0FBQ0E7O0FBRUE7QUFDQSxtQ0FBbUMsbUZBQW9CO0FBQ3ZELGtCQUFrQixxR0FBc0MsR0FBRyxzR0FBdUM7O0FBRWxHOztBQUVBO0FBQ0E7QUFDQSxZQUFZLDZGQUFpQjtBQUM3QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7OztBQUdMLG9FQUFvRSxtRkFBb0I7QUFDeEY7QUFDQTtBQUNBLEtBQUs7OztBQUdMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGFBQWE7QUFDNUIsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOzs7QUFHTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVDQUF1Qyx3RkFBeUI7QUFDaEUsdUNBQXVDLHdGQUF5QjtBQUNoRSxLQUFLOzs7QUFHTDtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsZ0ZBQWlCLEdBQUcsaUZBQWtCO0FBQzdELEtBQUs7OztBQUdMLDZGQUE2RixtRkFBb0I7QUFDakg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsaUZBQWtCO0FBQ25ELG9DQUFvQyxnRkFBaUI7QUFDckQsb0NBQW9DLG9GQUFxQjs7QUFFekQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUNBQW1DLG1GQUFvQjtBQUN2RCxrQkFBa0IsOEZBQStCLEdBQUcsK0ZBQWdDOztBQUVwRjtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsVUFBVTtBQUNqRCxTQUFTO0FBQ1QsS0FBSzs7O0FBR0wsa0ZBQWtGLG1GQUFvQjtBQUN0RztBQUNBOzs7QUFHQSxxQ0FBcUMseUZBQTBCO0FBQy9ELHVDQUF1Qyw0RkFBNkI7QUFDcEU7QUFDQSw0QkFBNEIsY0FBYyx3RkFBeUI7QUFDbkUscUNBQXFDO0FBQ3JDO0FBQ0E7O0FBRUE7QUFDQSx3Q0FBd0MsbUZBQW9CO0FBQzVELGdDQUFnQyx3RkFBeUI7QUFDekQsc0JBQXNCLDhGQUErQjtBQUNyRCxzQkFBc0IsOEZBQStCO0FBQ3JELGdDQUFnQyx3RkFBeUI7QUFDekQsc0JBQXNCLCtGQUFnQztBQUN0RCxzQkFBc0IsK0ZBQWdDOztBQUV0RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG1DQUFtQyxtRkFBb0I7QUFDdkQsa0JBQWtCLG9HQUFxQyxHQUFHLHFHQUFzQzs7QUFFaEc7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSzs7O0FBR0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4QkFBOEIsNkdBQThDO0FBQzVFO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxLQUFLOzs7QUFHTDtBQUNBO0FBQ0Esd0NBQXdDLG1GQUFvQixFQUFFLHdGQUF5QjtBQUN2RixtREFBbUQsbUZBQW9CLEVBQUUsd0ZBQXlCOztBQUVsRywrQkFBK0IsU0FBUztBQUN4QyxLQUFLOztBQUVMO0FBQ0E7QUFDQSx3Q0FBd0Msb0ZBQXFCLEVBQUUsd0ZBQXlCO0FBQ3hGLG1EQUFtRCxvRkFBcUIsRUFBRSx3RkFBeUI7O0FBRW5HLCtCQUErQixTQUFTO0FBQ3hDLEtBQUs7O0FBRUw7QUFDQTtBQUNBLHdDQUF3QyxtRkFBb0IsRUFBRSx3RkFBeUI7QUFDdkYsbURBQW1ELG1GQUFvQixFQUFFLHdGQUF5Qjs7QUFFbEcsK0JBQStCLFNBQVM7QUFDeEMsS0FBSzs7QUFFTDtBQUNBO0FBQ0Esd0NBQXdDLG9GQUFxQixFQUFFLHdGQUF5QjtBQUN4RixtREFBbUQsb0ZBQXFCLEVBQUUsd0ZBQXlCOztBQUVuRywrQkFBK0IsU0FBUztBQUN4QyxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0EsaUNBQWlDLG1GQUFvQjtBQUNyRCxLQUFLOztBQUVMO0FBQ0EsaUNBQWlDLG9GQUFxQjtBQUN0RCxLQUFLOztBQUVMO0FBQ0EsaUNBQWlDLG1GQUFvQixFQUFFLHdGQUF5QjtBQUNoRixLQUFLOztBQUVMO0FBQ0EsaUNBQWlDLG9GQUFxQixFQUFFLHdGQUF5QjtBQUNqRixLQUFLOztBQUVMO0FBQ0EsaUNBQWlDLG1GQUFvQixFQUFFLHdGQUF5QjtBQUNoRixLQUFLOztBQUVMO0FBQ0EsaUNBQWlDLG9GQUFxQixFQUFFLHdGQUF5QjtBQUNqRixLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0EsbUNBQW1DLG1GQUFvQixFQUFFLHdGQUF5QjtBQUNsRixLQUFLOztBQUVMO0FBQ0EsbUNBQW1DLG9GQUFxQixFQUFFLHdGQUF5QjtBQUNuRixLQUFLOztBQUVMO0FBQ0EsbUNBQW1DLG1GQUFvQixFQUFFLHdGQUF5QjtBQUNsRixLQUFLOztBQUVMO0FBQ0EsbUNBQW1DLG9GQUFxQixFQUFFLHdGQUF5QjtBQUNuRixLQUFLOztBQUVMO0FBQ0EsZ0NBQWdDLHdGQUF5QjtBQUN6RCxLQUFLOztBQUVMO0FBQ0EsZ0NBQWdDLHdGQUF5QixZQUFZLG9GQUFxQjtBQUMxRixLQUFLOztBQUVMO0FBQ0EsZ0NBQWdDLHdGQUF5QjtBQUN6RCxLQUFLOztBQUVMO0FBQ0EsZ0NBQWdDLHdGQUF5QixZQUFZLG9GQUFxQjtBQUMxRixLQUFLOztBQUVMO0FBQ0E7QUFDQSxlQUFlLGlDQUFpQztBQUNoRDtBQUNBO0FBQ0E7QUFDQSxZQUFZLHdGQUF5QjtBQUNyQztBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLGlDQUFpQyx3RkFBeUIsVUFBVSxvRkFBcUI7QUFDekYsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsZUFBZSxpQ0FBaUM7QUFDaEQ7QUFDQTtBQUNBO0FBQ0EsWUFBWSx3RkFBeUI7QUFDckM7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQSxpQ0FBaUMsd0ZBQXlCLFVBQVUsb0ZBQXFCO0FBQ3pGLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHFCQUFxQjtBQUNwQyxlQUFlLFVBQVU7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsaUZBQUssRUFBRTtBQUN2QztBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsaUZBQUssRUFBRTtBQUN2QztBQUNBO0FBQ0EsaUJBQWlCLG1FQUFVO0FBQzNCLGdDQUFnQyxpRkFBSyxFQUFFO0FBQ3ZDO0FBQ0E7O0FBRUE7O0FBRUEsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7OztBQUdMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxxQkFBcUI7QUFDcEMsZUFBZSxVQUFVO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixtRUFBVTtBQUMzQixnQ0FBZ0MsaUZBQUssRUFBRTtBQUN2QztBQUNBOztBQUVBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDs7QUFFQSxpRUFBZSxPQUFPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FzbS1yZWNvcmRlci10ZXN0Ly4vc3JjL21vZHVsZXMvc2V0dGluZ3MvY29tcG9uZW50cy9EZXZpY2VzL2luZGV4LmpzPzVlMWYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEV2ZW50cyBmcm9tIFwiZXZlbnRzLW9tXCI7XG5pbXBvcnQgTG9jYWxTdG9yYWdlU2F2ZXIgZnJvbSBcIkBtb2R1bGVzL2xvY2FsLXN0b3JhZ2Utc2F2ZXJcIjtcblxuaW1wb3J0IHtleGlzdEV2ZW50fSBmcm9tIFwiQG1vZHVsZXMvc2V0dGluZ3MvdXRpbHNcIjtcblxuaW1wb3J0IERFVklDRVNfU1RBVFVTIGZyb20gXCJAbW9kdWxlcy9zZXR0aW5ncy91dGlscy9kZXZpY2VzU3RhdHVzXCI7XG5pbXBvcnQgU0VUVElOR1NfTkFNRVMgZnJvbSBcIkBtb2R1bGVzL3NldHRpbmdzL3V0aWxzL3NldHRpbmdzTmFtZXNcIjtcbmltcG9ydCB7REVWSUNFU19FUlJPUl9UWVBFU30gZnJvbSBcIkBtb2R1bGVzL3NldHRpbmdzL3V0aWxzL2RldmljZXNFcnJvclR5cGVzXCI7XG5pbXBvcnQgRVZFTlRTX0xJU1QgZnJvbSBcIkBtb2R1bGVzL3NldHRpbmdzL3V0aWxzL2V2ZW50c0xpc3RcIjtcblxuaW1wb3J0IHtcbiAgICBMQUJFTCxcbiAgICBMU19TQVZFX0lORk9fTkFNRSxcbiAgICBTQVZFX1ZFUlNJT04sXG4gICAgREVGQVVMVF9TQVZFLFxuICAgIFRJTUVPVVRfRk9SX1BSRVBBUkVfREVWSUNFLFxuICAgIERJUkVDVE9SWSxcbiAgICBERVZJQ0VfQ0hBTkdFX0VWRU5UXG59IGZyb20gXCJAbW9kdWxlcy9zZXR0aW5ncy9jb21wb25lbnRzL0RldmljZXMvY29uc3RhbnRzXCI7XG5cblxuLyoqXG4gKiBAaW50ZXJmYWNlIERldmljZXNcbiAqIEB2ZXJzaW9uIDEuMC4wXG4gKlxuICogQHR5cGUge3tcbiAqICAgICBfRXZlbnRzOiAoRXZlbnRzfG51bGwpXG4gKiB9fVxuICovXG5jb25zdCBEZXZpY2VzID0ge1xuXG4gICAgX0V2ZW50czogbnVsbCxcblxuICAgIGluaXQ6IGFzeW5jIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIHRoaXMuX0V2ZW50cyA9IE9iamVjdC5jcmVhdGUoRXZlbnRzKS5pbml0KCk7XG4gICAgICAgIHRoaXMuX0xTU2F2ZXIgPSBPYmplY3QuY3JlYXRlKExvY2FsU3RvcmFnZVNhdmVyKS5pbml0KFxuICAgICAgICAgICAgTFNfU0FWRV9JTkZPX05BTUUsXG4gICAgICAgICAgICBTQVZFX1ZFUlNJT04sXG4gICAgICAgICAgICBERUZBVUxUX1NBVkUsXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5fZGV2aWNlc1N0YXR1cyA9IHtcbiAgICAgICAgICAgIFtTRVRUSU5HU19OQU1FUy5JTlBVVF06IHtcbiAgICAgICAgICAgICAgICBbU0VUVElOR1NfTkFNRVMuQVVESU9fVFlQRV06IERFVklDRVNfU1RBVFVTLlBSRVBBUkUsXG4gICAgICAgICAgICAgICAgW1NFVFRJTkdTX05BTUVTLlZJREVPX1RZUEVdOiBERVZJQ0VTX1NUQVRVUy5QUkVQQVJFLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFtTRVRUSU5HU19OQU1FUy5PVVRQVVRdOiB7XG4gICAgICAgICAgICAgICAgW1NFVFRJTkdTX05BTUVTLkFVRElPX1RZUEVdOiBERVZJQ0VTX1NUQVRVUy5QUkVQQVJFLFxuICAgICAgICAgICAgICAgIFtTRVRUSU5HU19OQU1FUy5WSURFT19UWVBFXTogREVWSUNFU19TVEFUVVMuUFJFUEFSRSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5fZGV2aWNlc0xpc3QgPSB7XG4gICAgICAgICAgICBbU0VUVElOR1NfTkFNRVMuSU5QVVRdOiB7XG4gICAgICAgICAgICAgICAgW1NFVFRJTkdTX05BTUVTLkFVRElPX1RZUEVdOiBudWxsLFxuICAgICAgICAgICAgICAgIFtTRVRUSU5HU19OQU1FUy5WSURFT19UWVBFXTogbnVsbCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbU0VUVElOR1NfTkFNRVMuT1VUUFVUXToge1xuICAgICAgICAgICAgICAgIFtTRVRUSU5HU19OQU1FUy5BVURJT19UWVBFXTogbnVsbCxcbiAgICAgICAgICAgICAgICBbU0VUVElOR1NfTkFNRVMuVklERU9fVFlQRV06IG51bGwsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX2N1cnJlbnREZXZpY2VzID0ge1xuICAgICAgICAgICAgW1NFVFRJTkdTX05BTUVTLklOUFVUXToge1xuICAgICAgICAgICAgICAgIFtTRVRUSU5HU19OQU1FUy5BVURJT19UWVBFXTogbnVsbCxcbiAgICAgICAgICAgICAgICBbU0VUVElOR1NfTkFNRVMuVklERU9fVFlQRV06IG51bGwsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgW1NFVFRJTkdTX05BTUVTLk9VVFBVVF06IHtcbiAgICAgICAgICAgICAgICBbU0VUVElOR1NfTkFNRVMuQVVESU9fVFlQRV06IG51bGwsXG4gICAgICAgICAgICAgICAgW1NFVFRJTkdTX05BTUVTLlZJREVPX1RZUEVdOiBudWxsLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBDaGVjayBwZXJtaXNzaW9uc1xuICAgICAgICBhd2FpdCB0aGlzLl9jaGVja1Blcm1pc3Npb24oU0VUVElOR1NfTkFNRVMuQVVESU9fVFlQRSk7XG4gICAgICAgIGF3YWl0IHRoaXMuX2NoZWNrUGVybWlzc2lvbihTRVRUSU5HU19OQU1FUy5WSURFT19UWVBFKTtcblxuICAgICAgICAvLyBVcGRhdGUgZGV2aWNlcyBsaXN0XG4gICAgICAgIGF3YWl0IHRoaXMuX2hhbmRsZURldmljZUNoYW5nZSgpO1xuXG4gICAgICAgIHRoaXMuX3NldEN1cnJlbnREZXZpY2VzKFNFVFRJTkdTX05BTUVTLkFVRElPX1RZUEUpO1xuICAgICAgICB0aGlzLl9zZXRDdXJyZW50RGV2aWNlcyhTRVRUSU5HU19OQU1FUy5WSURFT19UWVBFKTtcblxuICAgICAgICBuYXZpZ2F0b3I/Lm1lZGlhRGV2aWNlcz8uYWRkRXZlbnRMaXN0ZW5lcihERVZJQ0VfQ0hBTkdFX0VWRU5ULCB0aGlzLl9oYW5kbGVEZXZpY2VDaGFuZ2UuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuXG4gICAgX2NoZWNrUGVybWlzc2lvbjogYXN5bmMgZnVuY3Rpb24gX2NoZWNrUGVybWlzc2lvbihtZWRpYVR5cGUpIHtcbiAgICAgICAgY29uc3RcbiAgICAgICAgICAgIGNvbnN0cmFpbnRzID0gbWVkaWFUeXBlID09PSBTRVRUSU5HU19OQU1FUy5BVURJT19UWVBFXG4gICAgICAgICAgICAgICAgPyB7YXVkaW86IHRydWUsIHZpZGVvOiBmYWxzZX0gOiB7YXVkaW86IGZhbHNlLCB2aWRlbzogdHJ1ZX07XG5cbiAgICAgICAgbGV0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NoYW5nZURldmljZVN0YXR1cyhtZWRpYVR5cGUsIERFVklDRVNfU1RBVFVTLk5PVF9SRUFEQUJMRSk7XG4gICAgICAgIH0sIFRJTUVPVVRfRk9SX1BSRVBBUkVfREVWSUNFKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IHN0cmVhbSA9IGF3YWl0IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKTtcblxuICAgICAgICAgICAgc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2godHJhY2sgPT4ge1xuICAgICAgICAgICAgICAgIHRyYWNrPy5zdG9wKCk7XG4gICAgICAgICAgICAgICAgc3RyZWFtLnJlbW92ZVRyYWNrKHRyYWNrKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc3RyZWFtID0gbnVsbDtcblxuICAgICAgICAgICAgdGhpcy5fY2hhbmdlRGV2aWNlU3RhdHVzKG1lZGlhVHlwZSwgREVWSUNFU19TVEFUVVMuT04pO1xuXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zdCB7IG5hbWUgfSA9IGVycm9yO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIERFVklDRVNfRVJST1JfVFlQRVMubm90QWxsb3dlZEVycm9yOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VEZXZpY2VTdGF0dXMobWVkaWFUeXBlLCBERVZJQ0VTX1NUQVRVUy5OT1RfQUxMT1dFRCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBERVZJQ0VTX0VSUk9SX1RZUEVTLm5vdEZvdW5kRXJyb3I6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZURldmljZVN0YXR1cyhtZWRpYVR5cGUsIERFVklDRVNfU1RBVFVTLk5PVF9GT1VORCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBERVZJQ0VTX0VSUk9SX1RZUEVTLm5vdFJlYWRhYmxlRXJyb3I6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZURldmljZVN0YXR1cyhtZWRpYVR5cGUsIERFVklDRVNfU1RBVFVTLk5PVF9SRUFEQUJMRSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBERVZJQ0VTX0VSUk9SX1RZUEVTLm92ZXJjb25zdHJhaW5lZEVycm9yOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VEZXZpY2VTdGF0dXMobWVkaWFUeXBlLCBERVZJQ0VTX1NUQVRVUy5PVkVSQ09OU1RSQUlORUQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgREVWSUNFU19FUlJPUl9UWVBFUy5zZWN1cml0eUVycm9yOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VEZXZpY2VTdGF0dXMobWVkaWFUeXBlLCBERVZJQ0VTX1NUQVRVUy5TRUNVUklUWV9FUlJPUik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBERVZJQ0VTX0VSUk9SX1RZUEVTLnR5cGVFcnJvcjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlRGV2aWNlU3RhdHVzKG1lZGlhVHlwZSwgREVWSUNFU19TVEFUVVMuVFlQRV9FUlJPUik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlRGV2aWNlU3RhdHVzKG1lZGlhVHlwZSwgREVWSUNFU19TVEFUVVMuT04pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBtZWRpYVR5cGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RhdHVzXG4gICAgICogQHBhcmFtIGRldmljZVR5cGVcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jaGFuZ2VEZXZpY2VTdGF0dXM6IGZ1bmN0aW9uIF9jaGFuZ2VEZXZpY2VTdGF0dXMobWVkaWFUeXBlLCBzdGF0dXMsIGRldmljZVR5cGUgPSBTRVRUSU5HU19OQU1FUy5JTlBVVCkge1xuICAgICAgICBpZiAoICFPYmplY3QudmFsdWVzKERFVklDRVNfU1RBVFVTKS5pbmNsdWRlcyhzdGF0dXMpICkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBBdHRlbXB0IHRvIHNldCB1bmtub3duIGRldmljZSBzdGF0dXM6ICR7c3RhdHVzfWApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3RcbiAgICAgICAgICAgIGV2ZW50ID0gZGV2aWNlVHlwZSA9PT0gU0VUVElOR1NfTkFNRVMuSU5QVVRcbiAgICAgICAgICAgICAgICA/IEVWRU5UU19MSVNULkRFVklDRV9JTlBVVF9TVEFUVVNfQ0hBTkdFIDogRVZFTlRTX0xJU1QuREVWSUNFX09VVFBVVF9TVEFUVVNfQ0hBTkdFO1xuXG4gICAgICAgIHRoaXMuX2RldmljZXNTdGF0dXNbZGV2aWNlVHlwZV1bbWVkaWFUeXBlXSA9IHN0YXR1cztcblxuICAgICAgICB0aGlzLl9MU1NhdmVyLnNhdmUoXG4gICAgICAgICAgICBzdGF0dXMsXG4gICAgICAgICAgICBESVJFQ1RPUlkuZW5hYmxlZCxcbiAgICAgICAgICAgIG1lZGlhVHlwZVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuX0V2ZW50cy5ub3RpZnkoZXZlbnQsIHtcbiAgICAgICAgICAgIGRldmljZVR5cGUsXG4gICAgICAgICAgICBtZWRpYVR5cGUsXG4gICAgICAgICAgICBzdGF0dXNcbiAgICAgICAgfSk7XG4gICAgfSxcblxuXG4gICAgX2dldERldmljZUJ5SWQ6IGZ1bmN0aW9uIF9nZXREZXZpY2VCeUlkKG1lZGlhVHlwZSwgZGV2aWNlVHlwZSA9IFNFVFRJTkdTX05BTUVTLklOUFVULCBkZXZpY2VJZD1udWxsKSB7XG4gICAgICAgIGlmICggIWRldmljZUlkICkgcmV0dXJuICcnO1xuICAgICAgICByZXR1cm4gdGhpcy5fZGV2aWNlc0xpc3RbZGV2aWNlVHlwZV1bbWVkaWFUeXBlXS5maW5kKGRldmljZSA9PiBkZXZpY2UuZGV2aWNlSWQgPT09IGRldmljZUlkKT8uZGV2aWNlSWQ7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyBhIGxpc3Qgb2YgZGV2aWNlcy4gQ2FuIGJlIGZpbHRlcmVkIGJ5IGNvbnN0cmFpbnRzXG4gICAgICpcbiAgICAgKiBAYXN5bmNcbiAgICAgKiBAcGFyYW0ge29iamVjdHxudWxsfSBjb25zdHJhaW50c1xuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFycmF5PG9iamVjdD4+fVxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZ2V0RGV2aWNlc0xpc3Q6IGFzeW5jIGZ1bmN0aW9uIF9nZXREZXZpY2VzTGlzdChjb25zdHJhaW50cz1udWxsKSB7XG4gICAgICAgIGNvbnN0XG4gICAgICAgICAgICB1c2VyRGV2aWNlcyA9IGF3YWl0IG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcygpO1xuXG4gICAgICAgIGlmICggIWNvbnN0cmFpbnRzICkge1xuICAgICAgICAgICAgcmV0dXJuIHVzZXJEZXZpY2VzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVzZXJEZXZpY2VzLmZpbHRlcihkZXZpY2UgPT4gZGV2aWNlLmtpbmQgPT09IGNvbnN0cmFpbnRzLmtpbmQpO1xuICAgIH0sXG5cblxuICAgIF9oYW5kbGVEZXZpY2VDaGFuZ2U6IGFzeW5jIGZ1bmN0aW9uIF9oYW5kbGVEZXZpY2VDaGFuZ2UoKSB7XG5cbiAgICAgICAgYXN5bmMgZnVuY3Rpb24gdXBkYXRlRGV2aWNlcyhtZWRpYVR5cGUpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX2NoZWNrUGVybWlzc2lvbihtZWRpYVR5cGUpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fdXBkYXRlRGV2aWNlc0xpc3QobWVkaWFUeXBlKTtcbiAgICAgICAgICAgIHRoaXMuX3NldEN1cnJlbnREZXZpY2VzKG1lZGlhVHlwZSk7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCB1cGRhdGVEZXZpY2VzLmNhbGwodGhpcywgU0VUVElOR1NfTkFNRVMuQVVESU9fVFlQRSk7XG4gICAgICAgIGF3YWl0IHVwZGF0ZURldmljZXMuY2FsbCh0aGlzLCBTRVRUSU5HU19OQU1FUy5WSURFT19UWVBFKTtcbiAgICB9LFxuXG5cbiAgICBfbm9ybWFsaXplU3RhdHVzOiBmdW5jdGlvbiBfbm9ybWFsaXplU3RhdHVzKHN0YXR1cykge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHN0YXR1cyAhPT0gJ2Jvb2xlYW4nXG4gICAgICAgICAgICA/IHN0YXR1c1xuICAgICAgICAgICAgOiBzdGF0dXMgPyBERVZJQ0VTX1NUQVRVUy5PTiA6IERFVklDRVNfU1RBVFVTLk9GRjtcbiAgICB9LFxuXG5cbiAgICBfc2V0Q3VycmVudERldmljZXM6IGZ1bmN0aW9uIF9zZXRDdXJyZW50RGV2aWNlcyhtZWRpYVR5cGUsIGRldmljZUlkID0gbnVsbCwgZGV2aWNlVHlwZSA9IFNFVFRJTkdTX05BTUVTLklOUFVUKSB7XG4gICAgICAgIGNvbnN0XG4gICAgICAgICAgICBkZXZpY2VMaXN0ID0gdGhpcy5fZGV2aWNlc0xpc3RbZGV2aWNlVHlwZV1bbWVkaWFUeXBlXSxcbiAgICAgICAgICAgIGRldmljZVN0YXR1cyA9IHRoaXMuX2RldmljZXNTdGF0dXNbZGV2aWNlVHlwZV1bbWVkaWFUeXBlXSxcbiAgICAgICAgICAgIGlzRGV2aWNlQXZhaWxhYmxlID1cbiAgICAgICAgICAgICAgICBkZXZpY2VTdGF0dXMgPT09IERFVklDRVNfU1RBVFVTLk9GRlxuICAgICAgICAgICAgICAgIHx8IGRldmljZVN0YXR1cyA9PT0gREVWSUNFU19TVEFUVVMuT05cbiAgICAgICAgICAgICAgICB8fCBkZXZpY2VTdGF0dXMgPT09IERFVklDRVNfU1RBVFVTLlBST01QVDtcblxuICAgICAgICBpZiAoICFpc0RldmljZUF2YWlsYWJsZSApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2N1cnJlbnREZXZpY2VzW2RldmljZVR5cGVdW21lZGlhVHlwZV0gPVxuICAgICAgICAgICAgdGhpcy5fZ2V0RGV2aWNlQnlJZChtZWRpYVR5cGUsIGRldmljZVR5cGUsIGRldmljZUlkKVxuICAgICAgICAgICAgfHwgZGV2aWNlTGlzdFswXT8uZGV2aWNlSWRcbiAgICAgICAgICAgIHx8IG51bGw7XG5cbiAgICAgICAgY29uc3RcbiAgICAgICAgICAgIGV2ZW50ID0gZGV2aWNlVHlwZSA9PT0gU0VUVElOR1NfTkFNRVMuSU5QVVRcbiAgICAgICAgICAgICAgICA/IEVWRU5UU19MSVNULkRFVklDRV9JTlBVVF9DSEFOR0UgOiBFVkVOVFNfTElTVC5ERVZJQ0VfT1VUUFVUX0NIQU5HRTtcblxuICAgICAgICB0aGlzLl9FdmVudHMubm90aWZ5KGV2ZW50LCB7XG4gICAgICAgICAgICBkZXZpY2VUeXBlLFxuICAgICAgICAgICAgbWVkaWFUeXBlLFxuICAgICAgICAgICAgZGV2aWNlOiBkZXZpY2VMaXN0LmZpbmQoKHsgZGV2aWNlSWQgfSkgPT4gZGV2aWNlSWQgPT09IHRoaXMuX2N1cnJlbnREZXZpY2VzW2RldmljZVR5cGVdW21lZGlhVHlwZV0pLFxuICAgICAgICB9KTtcbiAgICB9LFxuXG5cbiAgICBfdXBkYXRlRGV2aWNlc0xpc3Q6IGFzeW5jIGZ1bmN0aW9uIF91cGRhdGVEZXZpY2VzTGlzdChtZWRpYVR5cGUsIGRldmljZVR5cGUgPSBTRVRUSU5HU19OQU1FUy5JTlBVVCkge1xuICAgICAgICBjb25zdFxuICAgICAgICAgICAgY3VycmVudERldmljZVN0YXR1cyA9IHRoaXMuX2RldmljZXNTdGF0dXNbZGV2aWNlVHlwZV1bbWVkaWFUeXBlXTtcblxuXG4gICAgICAgIGlmICggY3VycmVudERldmljZVN0YXR1cyA9PT0gREVWSUNFU19TVEFUVVMuTk9UX0FMTE9XRURcbiAgICAgICAgICAgIHx8IGN1cnJlbnREZXZpY2VTdGF0dXMgPT09IERFVklDRVNfU1RBVFVTLlNFQ1VSSVRZX0VSUk9SXG4gICAgICAgICkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGAke21lZGlhVHlwZSA9PT0gU0VUVElOR1NfTkFNRVMuQVVESU9fVFlQRVxuICAgICAgICAgICAgICAgID8gJ0F1ZGlvJyA6ICdWaWRlbyd9IGRldmljZSBhY2Nlc3MgZGVuaWVkIGJ5IHVzZXIgc2V0dGluZ3NgKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0XG4gICAgICAgICAgICBraW5kRGV2aWNlID0gZGV2aWNlVHlwZSA9PT0gU0VUVElOR1NfTkFNRVMuSU5QVVRcbiAgICAgICAgICAgICAgICA/IG1lZGlhVHlwZSA9PT0gU0VUVElOR1NfTkFNRVMuQVVESU9fVFlQRVxuICAgICAgICAgICAgICAgICAgICA/IFNFVFRJTkdTX05BTUVTLkFVRElPX0lOUFVUX1RZUEVcbiAgICAgICAgICAgICAgICAgICAgOiBTRVRUSU5HU19OQU1FUy5WSURFT19JTlBVVF9UWVBFXG4gICAgICAgICAgICAgICAgOiBtZWRpYVR5cGUgPT09IFNFVFRJTkdTX05BTUVTLkFVRElPX1RZUEVcbiAgICAgICAgICAgICAgICAgICAgPyBTRVRUSU5HU19OQU1FUy5BVURJT19PVVRQVVRfVFlQRVxuICAgICAgICAgICAgICAgICAgICA6IFNFVFRJTkdTX05BTUVTLlZJREVPX09VVFBVVF9UWVBFLFxuXG4gICAgICAgICAgICBkZXZpY2VzTGlzdCA9IChhd2FpdCB0aGlzLl9nZXREZXZpY2VzTGlzdCgpKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoZGV2aWNlID0+IGRldmljZS5raW5kID09PSBraW5kRGV2aWNlKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIENvbXBhcmVzIGxpc3RzIG9mIGRldmljZXMgdG8gZGV0ZXJtaW5lIGNoYW5nZXMgaW4gdGhlIGN1cnJlbnQgbGlzdC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIGN1cnJlbnREZXZpY2VzXG4gICAgICAgICAqIEBwYXJhbSB1cGRhdGVkRGV2aWNlc1xuICAgICAgICAgKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIC0gVGhlcmUgd2FzIGEgY2hhbmdlIC8gZmFsc2UgLSBObyBjaGFuZ2VzIGhhcHBlbmVkXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBjb21wYXJlRGV2aWNlcyA9IChjdXJyZW50RGV2aWNlcywgdXBkYXRlZERldmljZXMpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrRGV2aWNlc0F2YWxpYWJpbGl0eShjdXJyZW50RGV2aWNlcywgdXBkYXRlZERldmljZXMsIGRldmljZVR5cGUsIG1lZGlhVHlwZSk7ICBcblxuICAgICAgICAgICAgaWYgKGN1cnJlbnREZXZpY2VzPy5sZW5ndGggIT09IHVwZGF0ZWREZXZpY2VzPy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgYyA9IHVwZGF0ZWREZXZpY2VzLm1hcChkZXZpY2UgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAhY3VycmVudERldmljZXMuZmluZChpdGVtID0+IGl0ZW0uZGV2aWNlSWQgPT09IGRldmljZS5kZXZpY2VJZCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGMuaW5jbHVkZXModHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdFxuICAgICAgICAgICAgbGlzdElkZW50aXR5U3RhdHVzID0gY29tcGFyZURldmljZXModGhpcy5fZGV2aWNlc0xpc3RbZGV2aWNlVHlwZV1bbWVkaWFUeXBlXSwgZGV2aWNlc0xpc3QpLFxuXG4gICAgICAgICAgICBldmVudCA9IGRldmljZVR5cGUgPT09IFNFVFRJTkdTX05BTUVTLklOUFVUXG4gICAgICAgICAgICAgICAgPyBFVkVOVFNfTElTVC5ERVZJQ0VTX0lOUFVUX0xJU1RfQ0hBTkdFIDogRVZFTlRTX0xJU1QuREVWSUNFU19PVVRQVVRfTElTVF9DSEFOR0U7XG5cbiAgICAgICAgaWYgKCAhbGlzdElkZW50aXR5U3RhdHVzICkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZGV2aWNlc0xpc3QgPSB7XG4gICAgICAgICAgICAuLi50aGlzLl9kZXZpY2VzTGlzdCxcbiAgICAgICAgICAgIFtkZXZpY2VUeXBlXToge1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuX2RldmljZXNMaXN0W2RldmljZVR5cGVdLFxuICAgICAgICAgICAgICAgIFttZWRpYVR5cGVdOiBkZXZpY2VzTGlzdCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5fRXZlbnRzLm5vdGlmeShldmVudCwge1xuICAgICAgICAgICAgZGV2aWNlVHlwZSxcbiAgICAgICAgICAgIG1lZGlhVHlwZSxcbiAgICAgICAgICAgIGRldmljZXM6IGRldmljZXNMaXN0LFxuICAgICAgICB9KTtcbiAgICB9LFxuXG5cbiAgICBfY2hlY2tEZXZpY2VzQXZhbGlhYmlsaXR5OiBmdW5jdGlvbiBfY2hlY2tEZXZpY2VzQXZhbGlhYmlsaXR5KGN1cnJlbnREZXZpY2VzLCB1cGRhdGVkRGV2aWNlcywgZGV2aWNlVHlwZSwgbWVkaWFUeXBlKSB7XG4gICAgICBjb25zdFxuICAgICAgICAgIGlzRGV2aWNlTGlzdERpZmZlcmVudCA9IGN1cnJlbnREZXZpY2VzPy5sZW5ndGggPiB1cGRhdGVkRGV2aWNlcz8ubGVuZ3RoIHx8IChjdXJyZW50RGV2aWNlcyAmJiB1cGRhdGVkRGV2aWNlcyA9PT0gbnVsbCksXG4gICAgICAgICAgaXNEZXZpY2VzTWlzc2luZyA9IHVwZGF0ZWREZXZpY2VzID09PSBudWxsIHx8IHVwZGF0ZWREZXZpY2VzPy5sZW5ndGggPT09IDAgfHwgdXBkYXRlZERldmljZXM/Lmxlbmd0aCA9PT0gMTtcblxuICAgICAgaWYgKGlzRGV2aWNlTGlzdERpZmZlcmVudCAmJiBpc0RldmljZXNNaXNzaW5nKSB7XG4gICAgICAgICAgdGhpcy5fRXZlbnRzLm5vdGlmeShFVkVOVFNfTElTVC5ERVZJQ0VTX0FDVElWRV9ERVZJQ0VfRElTQ09OTkVDVEVELCB7XG4gICAgICAgICAgICAgIGRldmljZVR5cGUsXG4gICAgICAgICAgICAgIG1lZGlhVHlwZSxcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuXG5cbiAgICBnZXQgaW5wdXRBdWRpb0RldmljZSgpIHtcbiAgICAgICAgY29uc3RcbiAgICAgICAgICAgIGRldmljZXMgPSB0aGlzLl9kZXZpY2VzTGlzdFtTRVRUSU5HU19OQU1FUy5JTlBVVF1bU0VUVElOR1NfTkFNRVMuQVVESU9fVFlQRV0sXG4gICAgICAgICAgICBjdXJyZW50RGV2aWNlSWQgPSB0aGlzLl9jdXJyZW50RGV2aWNlc1tTRVRUSU5HU19OQU1FUy5JTlBVVF1bU0VUVElOR1NfTkFNRVMuQVVESU9fVFlQRV07XG5cbiAgICAgICAgcmV0dXJuIGRldmljZXM/LmZpbmQoKHtkZXZpY2VJZH0pID0+IGRldmljZUlkID09PSBjdXJyZW50RGV2aWNlSWQpIHx8IG51bGw7XG4gICAgfSxcblxuICAgIGdldCBvdXRwdXRBdWRpb0RldmljZSgpIHtcbiAgICAgICAgY29uc3RcbiAgICAgICAgICAgIGRldmljZXMgPSB0aGlzLl9kZXZpY2VzTGlzdFtTRVRUSU5HU19OQU1FUy5PVVRQVVRdW1NFVFRJTkdTX05BTUVTLkFVRElPX1RZUEVdLFxuICAgICAgICAgICAgY3VycmVudERldmljZUlkID0gdGhpcy5fY3VycmVudERldmljZXNbU0VUVElOR1NfTkFNRVMuT1VUUFVUXVtTRVRUSU5HU19OQU1FUy5BVURJT19UWVBFXTtcblxuICAgICAgICByZXR1cm4gZGV2aWNlcz8uZmluZCgoe2RldmljZUlkfSkgPT4gZGV2aWNlSWQgPT09IGN1cnJlbnREZXZpY2VJZCkgfHwgbnVsbDtcbiAgICB9LFxuXG4gICAgZ2V0IGlucHV0VmlkZW9EZXZpY2UoKSB7XG4gICAgICAgIGNvbnN0XG4gICAgICAgICAgICBkZXZpY2VzID0gdGhpcy5fZGV2aWNlc0xpc3RbU0VUVElOR1NfTkFNRVMuSU5QVVRdW1NFVFRJTkdTX05BTUVTLlZJREVPX1RZUEVdLFxuICAgICAgICAgICAgY3VycmVudERldmljZUlkID0gdGhpcy5fY3VycmVudERldmljZXNbU0VUVElOR1NfTkFNRVMuSU5QVVRdW1NFVFRJTkdTX05BTUVTLlZJREVPX1RZUEVdO1xuXG4gICAgICAgIHJldHVybiBkZXZpY2VzPy5maW5kKCh7ZGV2aWNlSWR9KSA9PiBkZXZpY2VJZCA9PT0gY3VycmVudERldmljZUlkKSB8fCBudWxsO1xuICAgIH0sXG5cbiAgICBnZXQgb3V0cHV0VmlkZW9EZXZpY2UoKSB7XG4gICAgICAgIGNvbnN0XG4gICAgICAgICAgICBkZXZpY2VzID0gdGhpcy5fZGV2aWNlc0xpc3RbU0VUVElOR1NfTkFNRVMuT1VUUFVUXVtTRVRUSU5HU19OQU1FUy5WSURFT19UWVBFXSxcbiAgICAgICAgICAgIGN1cnJlbnREZXZpY2VJZCA9IHRoaXMuX2N1cnJlbnREZXZpY2VzW1NFVFRJTkdTX05BTUVTLk9VVFBVVF1bU0VUVElOR1NfTkFNRVMuVklERU9fVFlQRV07XG5cbiAgICAgICAgcmV0dXJuIGRldmljZXM/LmZpbmQoKHtkZXZpY2VJZH0pID0+IGRldmljZUlkID09PSBjdXJyZW50RGV2aWNlSWQpIHx8IG51bGw7XG4gICAgfSxcblxuICAgIGdldCBkZXZpY2VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGV2aWNlc0xpc3Q7XG4gICAgfSxcblxuICAgIGdldCBpbnB1dERldmljZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZXZpY2VzTGlzdFtTRVRUSU5HU19OQU1FUy5JTlBVVF07XG4gICAgfSxcblxuICAgIGdldCBvdXRwdXREZXZpY2VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGV2aWNlc0xpc3RbU0VUVElOR1NfTkFNRVMuT1VUUFVUXTtcbiAgICB9LFxuXG4gICAgZ2V0IGlucHV0QXVkaW9EZXZpY2VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGV2aWNlc0xpc3RbU0VUVElOR1NfTkFNRVMuSU5QVVRdW1NFVFRJTkdTX05BTUVTLkFVRElPX1RZUEVdO1xuICAgIH0sXG5cbiAgICBnZXQgb3V0cHV0QXVkaW9EZXZpY2VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGV2aWNlc0xpc3RbU0VUVElOR1NfTkFNRVMuT1VUUFVUXVtTRVRUSU5HU19OQU1FUy5BVURJT19UWVBFXTtcbiAgICB9LFxuXG4gICAgZ2V0IGlucHV0VmlkZW9EZXZpY2VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGV2aWNlc0xpc3RbU0VUVElOR1NfTkFNRVMuSU5QVVRdW1NFVFRJTkdTX05BTUVTLlZJREVPX1RZUEVdO1xuICAgIH0sXG5cbiAgICBnZXQgb3V0cHV0VmlkZW9EZXZpY2VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGV2aWNlc0xpc3RbU0VUVElOR1NfTkFNRVMuT1VUUFVUXVtTRVRUSU5HU19OQU1FUy5WSURFT19UWVBFXTtcbiAgICB9LFxuXG4gICAgZ2V0IHN0YXR1c2VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGV2aWNlc1N0YXR1cztcbiAgICB9LFxuXG4gICAgZ2V0IGlucHV0QXVkaW9TdGF0dXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZXZpY2VzU3RhdHVzW1NFVFRJTkdTX05BTUVTLklOUFVUXVtTRVRUSU5HU19OQU1FUy5BVURJT19UWVBFXTtcbiAgICB9LFxuXG4gICAgZ2V0IG91dHB1dEF1ZGlvU3RhdHVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGV2aWNlc1N0YXR1c1tTRVRUSU5HU19OQU1FUy5PVVRQVVRdW1NFVFRJTkdTX05BTUVTLkFVRElPX1RZUEVdO1xuICAgIH0sXG5cbiAgICBnZXQgaW5wdXRWaWRlb1N0YXR1cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RldmljZXNTdGF0dXNbU0VUVElOR1NfTkFNRVMuSU5QVVRdW1NFVFRJTkdTX05BTUVTLlZJREVPX1RZUEVdO1xuICAgIH0sXG5cbiAgICBnZXQgb3V0cHV0VmlkZW9TdGF0dXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZXZpY2VzU3RhdHVzW1NFVFRJTkdTX05BTUVTLk9VVFBVVF1bU0VUVElOR1NfTkFNRVMuVklERU9fVFlQRV07XG4gICAgfSxcblxuICAgIHNldCBpbnB1dEF1ZGlvRGV2aWNlKGRldmljZUlkKSB7XG4gICAgICAgIHRoaXMuX3NldEN1cnJlbnREZXZpY2VzKFNFVFRJTkdTX05BTUVTLkFVRElPX1RZUEUsIGRldmljZUlkKTtcbiAgICB9LFxuXG4gICAgc2V0IG91dHB1dEF1ZGlvRGV2aWNlKGRldmljZUlkKSB7XG4gICAgICAgIHRoaXMuX3NldEN1cnJlbnREZXZpY2VzKFNFVFRJTkdTX05BTUVTLkFVRElPX1RZUEUsIGRldmljZUlkLCBTRVRUSU5HU19OQU1FUy5PVVRQVVQpO1xuICAgIH0sXG5cbiAgICBzZXQgaW5wdXRWaWRlb0RldmljZShkZXZpY2VJZCkge1xuICAgICAgICB0aGlzLl9zZXRDdXJyZW50RGV2aWNlcyhTRVRUSU5HU19OQU1FUy5WSURFT19UWVBFLCBkZXZpY2VJZCk7XG4gICAgfSxcblxuICAgIHNldCBvdXRwdXRWaWRlb0RldmljZShkZXZpY2VJZCkge1xuICAgICAgICB0aGlzLl9zZXRDdXJyZW50RGV2aWNlcyhTRVRUSU5HU19OQU1FUy5WSURFT19UWVBFLCBkZXZpY2VJZCwgU0VUVElOR1NfTkFNRVMuT1VUUFVUKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW58c3RyaW5nLjxERVZJQ0VTX1NUQVRVUz59IHN0YXR1c1xuICAgICAqL1xuICAgIHNldCBpbnB1dEF1ZGlvU3RhdHVzKHN0YXR1cykge1xuICAgICAgICB0aGlzLl9jaGFuZ2VEZXZpY2VTdGF0dXMoXG4gICAgICAgICAgICBTRVRUSU5HU19OQU1FUy5BVURJT19UWVBFLFxuICAgICAgICAgICAgdGhpcy5fbm9ybWFsaXplU3RhdHVzKHN0YXR1cylcbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgc2V0IG91dHB1dEF1ZGlvU3RhdHVzKHN0YXR1cykge1xuICAgICAgICB0aGlzLl9jaGFuZ2VEZXZpY2VTdGF0dXMoU0VUVElOR1NfTkFNRVMuQVVESU9fVFlQRSwgc3RhdHVzLCBTRVRUSU5HU19OQU1FUy5PVVRQVVQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbnxzdHJpbmcuPERFVklDRVNfU1RBVFVTPn0gc3RhdHVzXG4gICAgICovXG4gICAgc2V0IGlucHV0VmlkZW9TdGF0dXMoc3RhdHVzKSB7XG4gICAgICAgIHRoaXMuX2NoYW5nZURldmljZVN0YXR1cyhcbiAgICAgICAgICAgIFNFVFRJTkdTX05BTUVTLlZJREVPX1RZUEUsXG4gICAgICAgICAgICB0aGlzLl9ub3JtYWxpemVTdGF0dXMoc3RhdHVzKVxuICAgICAgICApO1xuICAgIH0sXG5cbiAgICBzZXQgb3V0cHV0VmlkZW9TdGF0dXMoc3RhdHVzKSB7XG4gICAgICAgIHRoaXMuX2NoYW5nZURldmljZVN0YXR1cyhTRVRUSU5HU19OQU1FUy5WSURFT19UWVBFLCBzdGF0dXMsIFNFVFRJTkdTX05BTUVTLk9VVFBVVCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVuc3Vic2NyaWJlIGZyb20gYW4gZXZlbnRcbiAgICAgKlxuICAgICAqIEBhdXRob3IgQXJ0ZW0gU3RlcGFub3YgPGFydHlvbS5zdGVwYW5vdkBvcGVubWVkaWEuY28+XG4gICAgICogQHZlcnNpb24gdjAuMS4wXG4gICAgICogQHNpbmNlIHYwLjEuMFxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmc8RXZlbnRzX0xpc3Q+fSBldmVudCAtIFNwZWNpZmllZCBldmVudCBmcm9tIEVWRU5UU19MSVNUXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBDYWxsYmFjayBmdW5jdGlvbnMgaGFuZGxpbmcgdGhlIGV2ZW50XG4gICAgICovXG4gICAgb2ZmKGV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBldmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYCR7TEFCRUx9IHwgdHlwZSBvZiBldmVudCBpcyBub3Qgc3RyaW5nLmApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghKGNhbGxiYWNrIGluc3RhbmNlb2YgRnVuY3Rpb24pKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGAke0xBQkVMfSB8IHR5cGUgb2YgY2FsbGJhY2sgaXMgbm90IGZ1bmN0aW9uLmApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZXhpc3RFdmVudChldmVudCkpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYCR7TEFCRUx9IHwgRXZlbnQgbm90IGZvdW5kLmApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fRXZlbnRzLnJlbW92ZShldmVudCwgY2FsbGJhY2spO1xuXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmUgdG8gdGhlIGV2ZW50XG4gICAgICpcbiAgICAgKiBAYXV0aG9yIEFydGVtIFN0ZXBhbm92IDxhcnR5b20uc3RlcGFub3ZAb3Blbm1lZGlhLmNvPlxuICAgICAqIEB2ZXJzaW9uIHYwLjEuMFxuICAgICAqIEBzaW5jZSB2MC4xLjBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPEV2ZW50c19MaXN0Pn0gZXZlbnQgLSBTcGVjaWZpZWQgZXZlbnQgZnJvbSBFdmVudHMgTGlzdFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gQ2FsbGJhY2sgZnVuY3Rpb25zIGhhbmRsaW5nIHRoZSBldmVudFxuICAgICAqL1xuICAgIG9uKGV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKCFleGlzdEV2ZW50KGV2ZW50KSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgJHtMQUJFTH0gfCBFdmVudCBub3QgZm91bmQuYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9FdmVudHMuYWRkKGV2ZW50LCBjYWxsYmFjayk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgRGV2aWNlczsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/modules/settings/components/Devices/index.js\n");

/***/ }),

/***/ "./src/modules/settings/components/Record/constants.js":
/*!*************************************************************!*\
  !*** ./src/modules/settings/components/Record/constants.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DEFAULT_SAVE\": () => (/* binding */ DEFAULT_SAVE),\n/* harmony export */   \"DIRECTORY\": () => (/* binding */ DIRECTORY),\n/* harmony export */   \"LABEL\": () => (/* binding */ LABEL),\n/* harmony export */   \"LS_SAVE_INFO_NAME\": () => (/* binding */ LS_SAVE_INFO_NAME),\n/* harmony export */   \"SAVE_VERSION\": () => (/* binding */ SAVE_VERSION)\n/* harmony export */ });\n/* harmony import */ var _modules_settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @modules/settings */ \"./src/modules/settings/index.js\");\n\n\nconst LABEL = 'Record Settings';\nconst LS_SAVE_INFO_NAME = 'wr-record-common';\nconst SAVE_VERSION = 'v1.0';\nconst DEFAULT_SAVE = {\n    version: SAVE_VERSION,\n    quality: _modules_settings__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_QUALITY_RECORD,\n    volume: 100,\n    muted: false,\n    uploadMode: false,\n};\nconst\n    DIRECTORY = {\n        quality: 'quality',\n        volume: 'volume',\n        muted: 'muted',\n        uploadMode: 'uploadMode',\n    };\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9zZXR0aW5ncy9jb21wb25lbnRzL1JlY29yZC9jb25zdGFudHMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXlEOztBQUV6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxxRUFBc0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dhc20tcmVjb3JkZXItdGVzdC8uL3NyYy9tb2R1bGVzL3NldHRpbmdzL2NvbXBvbmVudHMvUmVjb3JkL2NvbnN0YW50cy5qcz9kYzEwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7REVGQVVMVF9RVUFMSVRZX1JFQ09SRH0gZnJvbSBcIkBtb2R1bGVzL3NldHRpbmdzXCI7XG5cbmNvbnN0IExBQkVMID0gJ1JlY29yZCBTZXR0aW5ncyc7XG5jb25zdCBMU19TQVZFX0lORk9fTkFNRSA9ICd3ci1yZWNvcmQtY29tbW9uJztcbmNvbnN0IFNBVkVfVkVSU0lPTiA9ICd2MS4wJztcbmNvbnN0IERFRkFVTFRfU0FWRSA9IHtcbiAgICB2ZXJzaW9uOiBTQVZFX1ZFUlNJT04sXG4gICAgcXVhbGl0eTogREVGQVVMVF9RVUFMSVRZX1JFQ09SRCxcbiAgICB2b2x1bWU6IDEwMCxcbiAgICBtdXRlZDogZmFsc2UsXG4gICAgdXBsb2FkTW9kZTogZmFsc2UsXG59O1xuY29uc3RcbiAgICBESVJFQ1RPUlkgPSB7XG4gICAgICAgIHF1YWxpdHk6ICdxdWFsaXR5JyxcbiAgICAgICAgdm9sdW1lOiAndm9sdW1lJyxcbiAgICAgICAgbXV0ZWQ6ICdtdXRlZCcsXG4gICAgICAgIHVwbG9hZE1vZGU6ICd1cGxvYWRNb2RlJyxcbiAgICB9O1xuXG5leHBvcnQge1xuICAgIExBQkVMLFxuICAgIExTX1NBVkVfSU5GT19OQU1FLFxuICAgIFNBVkVfVkVSU0lPTixcbiAgICBERUZBVUxUX1NBVkUsXG4gICAgRElSRUNUT1JZXG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/modules/settings/components/Record/constants.js\n");

/***/ }),

/***/ "./src/modules/settings/components/Record/index.js":
/*!*********************************************************!*\
  !*** ./src/modules/settings/components/Record/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var events_om__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events-om */ \"./node_modules/events-om/build/index.es.js\");\n/* harmony import */ var _modules_local_storage_saver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @modules/local-storage-saver */ \"./src/modules/local-storage-saver/index.js\");\n/* harmony import */ var _modules_settings_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @modules/settings/utils */ \"./src/modules/settings/utils/index.js\");\n/* harmony import */ var _modules_settings_utils_devicesStatus__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @modules/settings/utils/devicesStatus */ \"./src/modules/settings/utils/devicesStatus.js\");\n/* harmony import */ var _modules_settings_utils_eventsList__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @modules/settings/utils/eventsList */ \"./src/modules/settings/utils/eventsList.js\");\n/* harmony import */ var _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @modules/settings/utils/settingsNames */ \"./src/modules/settings/utils/settingsNames.js\");\n/* harmony import */ var _modules_settings_utils_getConstraintsQuality__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @modules/settings/utils/getConstraintsQuality */ \"./src/modules/settings/utils/getConstraintsQuality.js\");\n/* harmony import */ var _modules_settings_utils_errorList__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @modules/settings/utils/errorList */ \"./src/modules/settings/utils/errorList.js\");\n/* harmony import */ var _modules_settings_utils_qualityPresets__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @modules/settings/utils/qualityPresets */ \"./src/modules/settings/utils/qualityPresets.js\");\n/* harmony import */ var _modules_settings_components_Record_constants__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @modules/settings/components/Record/constants */ \"./src/modules/settings/components/Record/constants.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n *\n * @requires Events\n *\n * @type {{\n * EVENTS_LIST,\n * ERRORS,\n * init: (function(*): Promise<Record>),\n * _changeQuality: ((function(*, *): Promise<void>)|*),\n * _createTrack: ((function(*): Promise<{reason: string, track: null}|{reason: string, track: MediaStream}>)|*),\n * _enableTrack: ((function(*, *): Promise<void>)|*),\n * _getTrack: ((function(*): Promise<*|{reason: string, track: *}>)|*),\n * _handleDevicesChange: Record._handleDevicesChange,\n * _setTrackMuted: ((function(*): Promise<void>)|*),\n * _setTrackVolume: ((function(*): Promise<void>)|*),\n * readonly enabled: *|{\"[SETTINGS_NAMES.AUDIO_TYPE]\": boolean, \"[SETTINGS_NAMES.VIDEO_TYPE]\": boolean},\n * readonly volume: number|*,\n * readonly enabledAudio: *,\n * readonly muted: boolean|*,\n * readonly enabledVideo: *,\n * getTrack: (function(*): Promise<*|{reason: string, track: *}>),\n * mute: ((function(*, *): Promise<void>)|*),\n * setVolume: ((function(*): Promise<void>)|*),\n * remove: Record.remove,\n * enable: ((function(*, *): Promise<void>)|*),\n * changeQuality: ((function(*, *): Promise<void>)|*),\n * off(string<Events_List>, Function): (undefined|this),\n * on(string<Events_List>, Function): (undefined|this)\n * }}\n */\nconst Record = {\n\n    EVENTS_LIST: _modules_settings_utils_eventsList__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n    ERRORS: _modules_settings_utils_errorList__WEBPACK_IMPORTED_MODULE_7__[\"default\"],\n\n    init: async function init(Devices) {\n        this._Events = Object.create(events_om__WEBPACK_IMPORTED_MODULE_0__[\"default\"]).init();\n        this._Devices = Devices;\n\n        this._LSSaver = Object.create(_modules_local_storage_saver__WEBPACK_IMPORTED_MODULE_1__[\"default\"]).init(\n            _modules_settings_components_Record_constants__WEBPACK_IMPORTED_MODULE_9__.LS_SAVE_INFO_NAME,\n            _modules_settings_components_Record_constants__WEBPACK_IMPORTED_MODULE_9__.SAVE_VERSION,\n            _modules_settings_components_Record_constants__WEBPACK_IMPORTED_MODULE_9__.DEFAULT_SAVE,\n        );\n\n        const\n            savedData = this._LSSaver.load();\n\n        this._store = {\n            quality: savedData.quality,\n            volume: savedData.volume,\n            muted: savedData.muted,\n            uploadMode: savedData.uploadMode,\n            enabled: {\n                [_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_5__[\"default\"].AUDIO_TYPE]: this._Devices.inputAudioStatus === _modules_settings_utils_devicesStatus__WEBPACK_IMPORTED_MODULE_3__[\"default\"].ON,\n                [_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_5__[\"default\"].VIDEO_TYPE]: this._Devices.inputVideoStatus === _modules_settings_utils_devicesStatus__WEBPACK_IMPORTED_MODULE_3__[\"default\"].ON,\n            }\n        };\n\n        this._streams = {\n            [_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_5__[\"default\"].AUDIO_TYPE]: null,\n            [_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_5__[\"default\"].VIDEO_TYPE]: null,\n        };\n\n        this._Devices.on(_modules_settings_utils_eventsList__WEBPACK_IMPORTED_MODULE_4__[\"default\"].DEVICE_INPUT_CHANGE, this._handleDevicesChange.bind(this));\n        this._Devices.on(_modules_settings_utils_eventsList__WEBPACK_IMPORTED_MODULE_4__[\"default\"].DEVICE_INPUT_STATUS_CHANGE, this._handleDeviceStatusChanged.bind(this));\n\n        return this;\n    },\n\n\n    _changeQuality: function _changeQuality(mediaType, quality) {\n        if (typeof mediaType !== 'string'\n            && mediaType !== _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_5__[\"default\"].VIDEO_TYPE\n            && mediaType !== _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_5__[\"default\"].AUDIO_TYPE) {\n            console.warn(`${_modules_settings_components_Record_constants__WEBPACK_IMPORTED_MODULE_9__.LABEL} | Incorrect Record Track Type`);\n            return false;\n        }\n\n        const\n            isQualitySupported = this._checkQuality(mediaType, quality);\n\n        if ( isQualitySupported ) {\n            this._store.quality[mediaType] = quality;\n            this._LSSaver.save(\n                this._store.quality[mediaType],\n                _modules_settings_components_Record_constants__WEBPACK_IMPORTED_MODULE_9__.DIRECTORY.quality,\n                mediaType\n            );\n        }\n\n        return isQualitySupported;\n    },\n\n\n    _checkQuality: function _checkQuality(mediaType, quality=null) {\n        const\n            device =  mediaType === _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_5__[\"default\"].AUDIO_TYPE\n                ? this._Devices.inputAudioDevice : this._Devices.inputVideoDevice;\n\n        if ( !quality || !device ) return false;\n\n        // Hack for mozilla\n        // TODO: Added global flag (ex.: browser name)\n        if ( !device?.getCapabilities ) return true;\n\n        const\n            capabilities = device?.getCapabilities && device?.getCapabilities();\n\n\n        const\n            qualityConstraints = mediaType === _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_5__[\"default\"].VIDEO_TYPE\n                ? _modules_settings_utils_qualityPresets__WEBPACK_IMPORTED_MODULE_8__.QualityRecordVideoPresets[quality] : _modules_settings_utils_qualityPresets__WEBPACK_IMPORTED_MODULE_8__.QualityRecordAudioPresets[quality];\n\n        function checkVideoQuality(quality, capabilities) {\n            const\n                {\n                    width: {\n                        max: maxWidth,\n                        min: minWidth,\n                    },\n                    height: {\n                        max: maxHeight,\n                        min: minHeight,\n                    },\n                    frameRate: {\n                        max: maxFPS,\n                    }\n                } = capabilities;\n\n            const\n                isWidthOk = quality?.width?.ideal && (quality.width.ideal >= minWidth && quality.width.ideal <= maxWidth),\n                isHeightOk = quality?.height?.ideal && (quality.height.ideal >= minHeight && quality.height.ideal <= maxHeight),\n                isFrameRateOk = quality?.frameRate && quality.frameRate <= maxFPS;\n\n            return isWidthOk && isHeightOk && isFrameRateOk;\n        }\n\n        // TODO: Check about sampleSize\n        function checkAudioQuality(quality, capabilities) {\n\n            const\n                {\n                    sampleRate: {\n                        min: minSampleRate,\n                        max: maxSampleRate,\n                    },\n                    channelCount: {\n                        min: minChannelCount,\n                        max: maxChannelCount,\n                    }\n                } = capabilities;\n\n            const\n                isSampleRateOk = quality?.sampleRate && (quality?.sampleRate >= minSampleRate && quality?.sampleRate <= maxSampleRate),\n                isChannelCountOk = quality?.channelCount && (quality?.channelCount >= minChannelCount && quality?.channelCount <= maxChannelCount);\n\n            return isSampleRateOk && isChannelCountOk;\n        }\n\n        return mediaType === _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_5__[\"default\"].AUDIO_TYPE\n            ? checkAudioQuality(qualityConstraints, capabilities)\n            : checkVideoQuality(qualityConstraints, capabilities);\n    },\n\n\n    _clearStream: function _clearStream(mediaType) {\n        this._streams[mediaType]?.getTracks().forEach(track => {\n            track.stop();\n            this._streams[mediaType].removeTrack(track);\n        });\n        this._streams[mediaType] = null;\n    },\n\n\n    _createTrack: async function _createTrack(mediaType) {\n        const\n            currentDevice = mediaType === _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_5__[\"default\"].AUDIO_TYPE\n                ? this._Devices.inputAudioDevice\n                : this._Devices.inputVideoDevice;\n\n        if ( !currentDevice ) {\n            return {\n                track: null,\n                reason: _modules_settings_utils_errorList__WEBPACK_IMPORTED_MODULE_7__[\"default\"].NO_INPUT_DEVICE\n            };\n        }\n\n        const\n            quality = this._getQuality(mediaType, this._store.quality[mediaType]),\n            qualityConstraints = (0,_modules_settings_utils_getConstraintsQuality__WEBPACK_IMPORTED_MODULE_6__.getConstraintsQuality)(mediaType, quality);\n\n        this._changeQuality(mediaType, quality);\n\n        const\n            constraints = {\n                [_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_5__[\"default\"].AUDIO_TYPE]: false,\n                [_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_5__[\"default\"].VIDEO_TYPE]: false,\n                [mediaType]: {\n                    ...qualityConstraints,\n                    deviceId: { exact: currentDevice.deviceId },\n                }\n            };\n\n        mediaType === _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_5__[\"default\"].AUDIO_TYPE &&\n            (constraints[mediaType].volume = this._store.volume);\n\n        try {\n            this._clearStream(mediaType);\n\n            const\n                stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n            if ( !stream ) {\n                throw new Error('MediaStream not found');\n            }\n\n            this._streams[mediaType] = stream;\n\n            return {\n                track: stream,\n                reason: '',\n            };\n        } catch(error) {\n            console.error(error);\n\n            return {\n                track: null,\n                reason: error.message,\n            };\n        }\n    },\n\n\n    _getQuality: function _getQuality(mediaType, quality) {\n        const\n            QUALITY_LIST = mediaType === _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_5__[\"default\"].VIDEO_TYPE\n                ? _modules_settings_utils_qualityPresets__WEBPACK_IMPORTED_MODULE_8__.QualityRecordVideoPresets : _modules_settings_utils_qualityPresets__WEBPACK_IMPORTED_MODULE_8__.QualityRecordAudioPresets;\n\n        const\n            maxAvailableQuality = Object.keys(QUALITY_LIST).reduce((currentQuality, key) => {\n                return this._checkQuality(mediaType, key)\n                    ? key\n                    : currentQuality;\n            }, null);\n\n        return Object.keys(QUALITY_LIST).indexOf(quality) > -1 && this._checkQuality(mediaType, quality)\n            ? quality\n            : maxAvailableQuality;\n    },\n\n\n    _handleDevicesChange: async function _handleDevicesChange({ mediaType, device }) {\n        if ( !device?.deviceId ) return;\n\n        const { track } = await this._createTrack(mediaType);\n\n        await this._changeQuality(mediaType, this._store.quality[mediaType]);\n\n        if (track) {\n            this._Events.notify(_modules_settings_utils_eventsList__WEBPACK_IMPORTED_MODULE_4__[\"default\"].RECORD_TRACK_CHANGED, {\n                mediaType,\n                track,\n            });\n        }\n    },\n\n\n    _handleDeviceStatusChanged: async function _handleDeviceStatusChanged({ mediaType, status }) {\n        await this.enable(mediaType, status === _modules_settings_utils_devicesStatus__WEBPACK_IMPORTED_MODULE_3__[\"default\"].ON);\n    },\n\n\n    _setTrackVolume: async function _setTrackVolume(volumeLevel) {\n        const\n            mediaStream = (await this._getTrack(_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_5__[\"default\"].AUDIO_TYPE))?.track;\n\n        if (!mediaStream) {\n            console.warn('The record track not found', {\n                cause: _modules_settings_utils_errorList__WEBPACK_IMPORTED_MODULE_7__[\"default\"].BROADCAST_TRACK_NOT_FOUND\n            });\n            return;\n        }\n\n        this._store.volume = volumeLevel;\n        // TODO: Add real change volume\n\n        this._LSSaver.save(\n            volumeLevel,\n            _modules_settings_components_Record_constants__WEBPACK_IMPORTED_MODULE_9__.DIRECTORY.volume,\n        );\n\n        this._Events.notify(_modules_settings_utils_eventsList__WEBPACK_IMPORTED_MODULE_4__[\"default\"].VOLUME_CHANGE, {\n            volume: volumeLevel\n        });\n    },\n\n\n    _setTrackMuted: async function _setTrackMuted(isMuted) {\n        if (typeof isMuted !== 'boolean') {\n            console.warn(`${_modules_settings_components_Record_constants__WEBPACK_IMPORTED_MODULE_9__.LABEL} | Incorrect Record Mute Value`);\n            return;\n        }\n\n        const\n            mediaStream = (await this._getTrack(_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_5__[\"default\"].AUDIO_TYPE))?.track;\n\n        if (!mediaStream) {\n            console.warn('The record track not found', {\n                cause: _modules_settings_utils_errorList__WEBPACK_IMPORTED_MODULE_7__[\"default\"].RECORD_TRACK_NOT_FOUND\n            });\n            return;\n        }\n\n        const\n            mediaStreamTrack = mediaStream.getAudioTracks()[0];\n\n        mediaStreamTrack.enabled = isMuted;\n        this._store.muted = isMuted;\n\n        this._LSSaver.save(\n            isMuted,\n            _modules_settings_components_Record_constants__WEBPACK_IMPORTED_MODULE_9__.DIRECTORY.muted,\n        );\n\n\n        this._Events.notify(_modules_settings_utils_eventsList__WEBPACK_IMPORTED_MODULE_4__[\"default\"].RECORD_MUTE_STATUS_CHANGE, {\n            muted: isMuted\n        });\n    },\n\n\n    get volume() {\n        return this._store.volume;\n    },\n\n    get muted() {\n        return this._store.muted;\n    },\n\n    get quality() {\n        return this._store.quality;\n    },\n\n    get enabled() {\n        return this._store.enabled;\n    },\n\n    get enabledAudio() {\n        return this._store.enabled[_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_5__[\"default\"].AUDIO_TYPE];\n    },\n\n    get enabledVideo() {\n        return this._store.enabled[_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_5__[\"default\"].VIDEO_TYPE];\n    },\n\n    get uploadMode() {\n        return this._store.uploadMode;\n    },\n\n    set uploadMode(status) {\n        this._store.uploadMode = !!status;\n\n        this._LSSaver.save(\n            this._store.uploadMode,\n            _modules_settings_components_Record_constants__WEBPACK_IMPORTED_MODULE_9__.DIRECTORY.uploadMode,\n        );\n        this._Events.notify(_modules_settings_utils_eventsList__WEBPACK_IMPORTED_MODULE_4__[\"default\"].RECORD_UPLOAD_MODE_CHANGED, {\n            status: this._store.uploadMode,\n        });\n    },\n\n    changeQuality: async function changeQuality(mediaType, quality) {\n        const\n            isQualityChanged = this._changeQuality(mediaType, quality);\n\n        if (isQualityChanged) {\n            const\n                quality = this._getQuality(mediaType, this._store.quality[mediaType]),\n                qualityConstraints = (0,_modules_settings_utils_getConstraintsQuality__WEBPACK_IMPORTED_MODULE_6__.getConstraintsQuality)(mediaType, quality);\n\n            await this._streams[mediaType].getTracks()[0].applyConstraints(qualityConstraints);\n\n            this._Events.notify(_modules_settings_utils_eventsList__WEBPACK_IMPORTED_MODULE_4__[\"default\"].RECORD_QUALITY_CHANGE, {\n                mediaType,\n                quality\n            });\n        }\n    },\n\n    getTrack: async function getTrack(mediaType) {\n        const\n            track = this._streams[mediaType],\n            reason = '';\n\n        if ( !track ) {\n            return this._createTrack(mediaType);\n        }\n\n        return {track, reason};\n    },\n\n    setVolume: async function setVolume(volumeLevel) {\n        if (typeof volumeLevel !== 'number' || volumeLevel < 0 || volumeLevel > 1000) {\n            console.warn(`${_modules_settings_components_Record_constants__WEBPACK_IMPORTED_MODULE_9__.LABEL} | incorrect volume value`);\n            return;\n        }\n\n        await this._setTrackVolume(volumeLevel);\n    },\n\n    enable: async function enable(mediaType, status) {\n        if (typeof status !== 'boolean'\n            || (mediaType !== _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_5__[\"default\"].VIDEO_TYPE && mediaType !== _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_5__[\"default\"].AUDIO_TYPE)\n        ) {\n            console.warn(`${_modules_settings_components_Record_constants__WEBPACK_IMPORTED_MODULE_9__.LABEL} | Incorrect Record Mute Value`);\n            return;\n        }\n\n        const\n            mediaStream = this._streams[mediaType] || (await this.getTrack(mediaType)).track;\n\n        this._store.enabled[mediaType] = status;\n\n        if ( !mediaStream ) {\n            console.warn('The record track not found', {\n                cause: _modules_settings_utils_errorList__WEBPACK_IMPORTED_MODULE_7__[\"default\"].RECORD_TRACK_NOT_FOUND\n            });\n            return;\n        }\n\n        const\n            mediaStreamTrack = mediaType === _modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_5__[\"default\"].AUDIO_TYPE\n                ? mediaStream.getAudioTracks()[0] : mediaStream.getVideoTracks()[0];\n\n        mediaStreamTrack.enabled = status;\n\n        this._Events.notify(_modules_settings_utils_eventsList__WEBPACK_IMPORTED_MODULE_4__[\"default\"].RECORD_ENABLE_CHANGE, {\n            mediaType,\n            status,\n        });\n    },\n\n    mute: async function mute(mediaType, isMuted) {\n        await this._setTrackMuted(mediaType, isMuted);\n    },\n\n    remove: function remove() {\n        const\n            audioStreamTracks = this._streams[_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_5__[\"default\"].AUDIO_TYPE]?.getTracks() || [],\n            videoStreamTracks = this._streams[_modules_settings_utils_settingsNames__WEBPACK_IMPORTED_MODULE_5__[\"default\"].VIDEO_TYPE]?.getTracks() || [];\n\n        audioStreamTracks.forEach(track => track.stop());\n        videoStreamTracks.forEach(track => track.stop());\n    },\n\n    /**\n     * Unsubscribe from an event\n     *\n     * @author Artem Stepanov <artyom.stepanov@openmedia.co>\n     * @version v0.1.0\n     * @since v0.1.0\n     *\n     * @param {string<Events_List>} event - Specified event from EVENTS_LIST\n     * @param {function} callback - Callback functions handling the event\n     */\n    off(event, callback) {\n        try {\n            if (typeof event !== 'string') {\n                console.warn(`${_modules_settings_components_Record_constants__WEBPACK_IMPORTED_MODULE_9__.LABEL} | type of event is not string.`);\n                return;\n            }\n            if (!(callback instanceof Function)) {\n                console.warn(`${_modules_settings_components_Record_constants__WEBPACK_IMPORTED_MODULE_9__.LABEL} | type of callback is not function.`);\n                return;\n            }\n            if (!(0,_modules_settings_utils__WEBPACK_IMPORTED_MODULE_2__.existEvent)(event)) {\n                console.warn(`${_modules_settings_components_Record_constants__WEBPACK_IMPORTED_MODULE_9__.LABEL} | Event not found.`);\n                return;\n            }\n\n            this._Events.remove(event, callback);\n\n        } catch (error) {\n            console.error(error);\n            throw new Error(error);\n        }\n\n        return this;\n    },\n\n    /**\n     * Subscribe to the event\n     *\n     * @author Artem Stepanov <artyom.stepanov@openmedia.co>\n     * @version v0.1.0\n     * @since v0.1.0\n     *\n     * @param {string<Events_List>} event - Specified event from Events List\n     * @param {function} callback - Callback functions handling the event\n     */\n    on(event, callback) {\n        try {\n            if (!(0,_modules_settings_utils__WEBPACK_IMPORTED_MODULE_2__.existEvent)(event)) {\n                console.warn(`${_modules_settings_components_Record_constants__WEBPACK_IMPORTED_MODULE_9__.LABEL} | Event not found.`);\n                return;\n            }\n\n            this._Events.add(event, callback);\n        } catch (error) {\n            console.error(error);\n            throw new Error(error);\n        }\n\n        return this;\n    },\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Record);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/modules/settings/components/Record/index.js\n");

/***/ }),

/***/ "./src/modules/settings/index.js":
/*!***************************************!*\
  !*** ./src/modules/settings/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DEFAULT_DEVICES_STATUS\": () => (/* reexport safe */ _utils_defaultDevicesStatus__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_DEVICES_STATUS),\n/* harmony export */   \"DEFAULT_QUALITY_RECORD\": () => (/* reexport safe */ _utils_defaultQualityRecord__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_QUALITY_RECORD),\n/* harmony export */   \"DEVICES_STATUS\": () => (/* reexport safe */ _utils_devicesStatus__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   \"Devices\": () => (/* reexport safe */ _components_Devices__WEBPACK_IMPORTED_MODULE_7__[\"default\"]),\n/* harmony export */   \"ERROR_LIST\": () => (/* reexport safe */ _utils_errorList__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   \"EVENTS_LIST\": () => (/* reexport safe */ _utils_eventsList__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   \"PRESETS_AUDIO_RECORD\": () => (/* reexport safe */ _utils_qualityPresets__WEBPACK_IMPORTED_MODULE_4__.QualityRecordAudioPresets),\n/* harmony export */   \"PRESETS_VIDEO_RECORD\": () => (/* reexport safe */ _utils_qualityPresets__WEBPACK_IMPORTED_MODULE_4__.QualityRecordVideoPresets),\n/* harmony export */   \"Record\": () => (/* reexport safe */ _components_Record__WEBPACK_IMPORTED_MODULE_8__[\"default\"]),\n/* harmony export */   \"SETTINGS_NAMES\": () => (/* reexport safe */ _utils_settingsNames__WEBPACK_IMPORTED_MODULE_3__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _utils_eventsList__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/eventsList */ \"./src/modules/settings/utils/eventsList.js\");\n/* harmony import */ var _utils_errorList__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/errorList */ \"./src/modules/settings/utils/errorList.js\");\n/* harmony import */ var _utils_devicesStatus__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/devicesStatus */ \"./src/modules/settings/utils/devicesStatus.js\");\n/* harmony import */ var _utils_settingsNames__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/settingsNames */ \"./src/modules/settings/utils/settingsNames.js\");\n/* harmony import */ var _utils_qualityPresets__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/qualityPresets */ \"./src/modules/settings/utils/qualityPresets.js\");\n/* harmony import */ var _utils_defaultDevicesStatus__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/defaultDevicesStatus */ \"./src/modules/settings/utils/defaultDevicesStatus.js\");\n/* harmony import */ var _utils_defaultQualityRecord__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/defaultQualityRecord */ \"./src/modules/settings/utils/defaultQualityRecord.js\");\n/* harmony import */ var _components_Devices__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/Devices */ \"./src/modules/settings/components/Devices/index.js\");\n/* harmony import */ var _components_Record__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/Record */ \"./src/modules/settings/components/Record/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9zZXR0aW5ncy9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTZDO0FBQ0Y7QUFDUTtBQUNBO0FBSW5CO0FBQ3NDO0FBQ0E7O0FBRTNCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YXNtLXJlY29yZGVyLXRlc3QvLi9zcmMvbW9kdWxlcy9zZXR0aW5ncy9pbmRleC5qcz8xZGVlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFVkVOVFNfTElTVCBmcm9tIFwiLi91dGlscy9ldmVudHNMaXN0XCI7XG5pbXBvcnQgRVJST1JfTElTVCBmcm9tIFwiLi91dGlscy9lcnJvckxpc3RcIjtcbmltcG9ydCBERVZJQ0VTX1NUQVRVUyBmcm9tIFwiLi91dGlscy9kZXZpY2VzU3RhdHVzXCI7XG5pbXBvcnQgU0VUVElOR1NfTkFNRVMgZnJvbSBcIi4vdXRpbHMvc2V0dGluZ3NOYW1lc1wiO1xuaW1wb3J0IHtcbiAgICBRdWFsaXR5UmVjb3JkQXVkaW9QcmVzZXRzIGFzIFBSRVNFVFNfQVVESU9fUkVDT1JELFxuICAgIFF1YWxpdHlSZWNvcmRWaWRlb1ByZXNldHMgYXMgUFJFU0VUU19WSURFT19SRUNPUkQsXG59IGZyb20gXCIuL3V0aWxzL3F1YWxpdHlQcmVzZXRzXCI7XG5pbXBvcnQgeyBERUZBVUxUX0RFVklDRVNfU1RBVFVTIH0gZnJvbSBcIi4vdXRpbHMvZGVmYXVsdERldmljZXNTdGF0dXNcIjtcbmltcG9ydCB7IERFRkFVTFRfUVVBTElUWV9SRUNPUkQgfSBmcm9tIFwiLi91dGlscy9kZWZhdWx0UXVhbGl0eVJlY29yZFwiO1xuXG5pbXBvcnQgRGV2aWNlcyBmcm9tIFwiLi9jb21wb25lbnRzL0RldmljZXNcIjtcbmltcG9ydCBSZWNvcmQgZnJvbSBcIi4vY29tcG9uZW50cy9SZWNvcmRcIjtcblxuZXhwb3J0IHtcbiAgICBEZXZpY2VzLFxuICAgIFJlY29yZCxcbiAgICBTRVRUSU5HU19OQU1FUyxcbiAgICBERVZJQ0VTX1NUQVRVUyxcbiAgICBFUlJPUl9MSVNULFxuICAgIEVWRU5UU19MSVNULFxuICAgIFBSRVNFVFNfQVVESU9fUkVDT1JELFxuICAgIFBSRVNFVFNfVklERU9fUkVDT1JELFxuICAgIERFRkFVTFRfREVWSUNFU19TVEFUVVMsXG4gICAgREVGQVVMVF9RVUFMSVRZX1JFQ09SRCxcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/modules/settings/index.js\n");

/***/ }),

/***/ "./src/modules/settings/utils/defaultDevicesStatus.js":
/*!************************************************************!*\
  !*** ./src/modules/settings/utils/defaultDevicesStatus.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DEFAULT_DEVICES_STATUS\": () => (/* binding */ DEFAULT_DEVICES_STATUS)\n/* harmony export */ });\n/* harmony import */ var _settingsNames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./settingsNames */ \"./src/modules/settings/utils/settingsNames.js\");\n/* harmony import */ var _devicesStatus__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./devicesStatus */ \"./src/modules/settings/utils/devicesStatus.js\");\n\n\n\nconst DEFAULT_DEVICES_STATUS = {\n    [_settingsNames__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INPUT]: {\n        [_settingsNames__WEBPACK_IMPORTED_MODULE_0__[\"default\"].AUDIO_TYPE]: _devicesStatus__WEBPACK_IMPORTED_MODULE_1__[\"default\"].PREPARE,\n        [_settingsNames__WEBPACK_IMPORTED_MODULE_0__[\"default\"].VIDEO_TYPE]: _devicesStatus__WEBPACK_IMPORTED_MODULE_1__[\"default\"].PREPARE,\n    },\n    [_settingsNames__WEBPACK_IMPORTED_MODULE_0__[\"default\"].OUTPUT]: {\n        [_settingsNames__WEBPACK_IMPORTED_MODULE_0__[\"default\"].AUDIO_TYPE]: _devicesStatus__WEBPACK_IMPORTED_MODULE_1__[\"default\"].PREPARE,\n        [_settingsNames__WEBPACK_IMPORTED_MODULE_0__[\"default\"].VIDEO_TYPE]: _devicesStatus__WEBPACK_IMPORTED_MODULE_1__[\"default\"].PREPARE,\n    },\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9zZXR0aW5ncy91dGlscy9kZWZhdWx0RGV2aWNlc1N0YXR1cy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNkM7QUFDQTs7QUFFN0M7QUFDQSxLQUFLLDREQUFvQjtBQUN6QixTQUFTLGlFQUF5QixHQUFHLDhEQUFzQjtBQUMzRCxTQUFTLGlFQUF5QixHQUFHLDhEQUFzQjtBQUMzRCxLQUFLO0FBQ0wsS0FBSyw2REFBcUI7QUFDMUIsU0FBUyxpRUFBeUIsR0FBRyw4REFBc0I7QUFDM0QsU0FBUyxpRUFBeUIsR0FBRyw4REFBc0I7QUFDM0QsS0FBSztBQUNMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FzbS1yZWNvcmRlci10ZXN0Ly4vc3JjL21vZHVsZXMvc2V0dGluZ3MvdXRpbHMvZGVmYXVsdERldmljZXNTdGF0dXMuanM/NWYyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU0VUVElOR1NfTkFNRVMgZnJvbSBcIi4vc2V0dGluZ3NOYW1lc1wiO1xuaW1wb3J0IERFVklDRVNfU1RBVFVTIGZyb20gXCIuL2RldmljZXNTdGF0dXNcIjtcblxuY29uc3QgREVGQVVMVF9ERVZJQ0VTX1NUQVRVUyA9IHtcbiAgICBbU0VUVElOR1NfTkFNRVMuSU5QVVRdOiB7XG4gICAgICAgIFtTRVRUSU5HU19OQU1FUy5BVURJT19UWVBFXTogREVWSUNFU19TVEFUVVMuUFJFUEFSRSxcbiAgICAgICAgW1NFVFRJTkdTX05BTUVTLlZJREVPX1RZUEVdOiBERVZJQ0VTX1NUQVRVUy5QUkVQQVJFLFxuICAgIH0sXG4gICAgW1NFVFRJTkdTX05BTUVTLk9VVFBVVF06IHtcbiAgICAgICAgW1NFVFRJTkdTX05BTUVTLkFVRElPX1RZUEVdOiBERVZJQ0VTX1NUQVRVUy5QUkVQQVJFLFxuICAgICAgICBbU0VUVElOR1NfTkFNRVMuVklERU9fVFlQRV06IERFVklDRVNfU1RBVFVTLlBSRVBBUkUsXG4gICAgfSxcbn07XG5cbmV4cG9ydCB7IERFRkFVTFRfREVWSUNFU19TVEFUVVMgfTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/modules/settings/utils/defaultDevicesStatus.js\n");

/***/ }),

/***/ "./src/modules/settings/utils/defaultQualityRecord.js":
/*!************************************************************!*\
  !*** ./src/modules/settings/utils/defaultQualityRecord.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DEFAULT_QUALITY_RECORD\": () => (/* binding */ DEFAULT_QUALITY_RECORD)\n/* harmony export */ });\n/* harmony import */ var _settingsNames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./settingsNames */ \"./src/modules/settings/utils/settingsNames.js\");\n/* harmony import */ var _modules_settings_utils_qualityPresets__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @modules/settings/utils/qualityPresets */ \"./src/modules/settings/utils/qualityPresets.js\");\n\n\n\nconst DEFAULT_QUALITY_RECORD = {\n    [_settingsNames__WEBPACK_IMPORTED_MODULE_0__[\"default\"].AUDIO_TYPE]: _modules_settings_utils_qualityPresets__WEBPACK_IMPORTED_MODULE_1__.QualityRecordAudioPresets.music_standard,\n    [_settingsNames__WEBPACK_IMPORTED_MODULE_0__[\"default\"].VIDEO_TYPE]: _modules_settings_utils_qualityPresets__WEBPACK_IMPORTED_MODULE_1__.QualityRecordVideoPresets[\"480p_2\"],\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9zZXR0aW5ncy91dGlscy9kZWZhdWx0UXVhbGl0eVJlY29yZC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNkM7QUFJRzs7QUFFaEQ7QUFDQSxLQUFLLGlFQUF5QixHQUFHLDRHQUFvQztBQUNyRSxLQUFLLGlFQUF5QixHQUFHLHVHQUErQjtBQUNoRSIsInNvdXJjZXMiOlsid2VicGFjazovL3dhc20tcmVjb3JkZXItdGVzdC8uL3NyYy9tb2R1bGVzL3NldHRpbmdzL3V0aWxzL2RlZmF1bHRRdWFsaXR5UmVjb3JkLmpzP2NlYmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNFVFRJTkdTX05BTUVTIGZyb20gXCIuL3NldHRpbmdzTmFtZXNcIjtcbmltcG9ydCB7XG4gICAgUXVhbGl0eVJlY29yZEF1ZGlvUHJlc2V0cyBhcyBRVUFMSVRZX0FVRElPX1BSRVNFVFMsXG4gICAgUXVhbGl0eVJlY29yZFZpZGVvUHJlc2V0cyBhcyBRVUFMSVRZX1ZJREVPX1BSRVNFVFNcbn0gZnJvbSBcIkBtb2R1bGVzL3NldHRpbmdzL3V0aWxzL3F1YWxpdHlQcmVzZXRzXCI7XG5cbmNvbnN0IERFRkFVTFRfUVVBTElUWV9SRUNPUkQgPSB7XG4gICAgW1NFVFRJTkdTX05BTUVTLkFVRElPX1RZUEVdOiBRVUFMSVRZX0FVRElPX1BSRVNFVFMubXVzaWNfc3RhbmRhcmQsXG4gICAgW1NFVFRJTkdTX05BTUVTLlZJREVPX1RZUEVdOiBRVUFMSVRZX1ZJREVPX1BSRVNFVFNbXCI0ODBwXzJcIl0sXG59O1xuXG5leHBvcnQgeyBERUZBVUxUX1FVQUxJVFlfUkVDT1JEIH07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/modules/settings/utils/defaultQualityRecord.js\n");

/***/ }),

/***/ "./src/modules/settings/utils/devicesErrorTypes.js":
/*!*********************************************************!*\
  !*** ./src/modules/settings/utils/devicesErrorTypes.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DEVICES_ERROR_TYPES\": () => (/* binding */ DEVICES_ERROR_TYPES)\n/* harmony export */ });\nconst DEVICES_ERROR_TYPES = {\n    abortError: 'AbortError',\n    notAllowedError: 'NotAllowedError',\n    notFoundError: 'NotFoundError',\n    notReadableError: 'NotReadableError',\n    overconstrainedError: 'OverconstrainedError',\n    securityError: 'SecurityError',\n    typeError: 'TypeError',\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9zZXR0aW5ncy91dGlscy9kZXZpY2VzRXJyb3JUeXBlcy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FzbS1yZWNvcmRlci10ZXN0Ly4vc3JjL21vZHVsZXMvc2V0dGluZ3MvdXRpbHMvZGV2aWNlc0Vycm9yVHlwZXMuanM/ZGVkYiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBERVZJQ0VTX0VSUk9SX1RZUEVTID0ge1xuICAgIGFib3J0RXJyb3I6ICdBYm9ydEVycm9yJyxcbiAgICBub3RBbGxvd2VkRXJyb3I6ICdOb3RBbGxvd2VkRXJyb3InLFxuICAgIG5vdEZvdW5kRXJyb3I6ICdOb3RGb3VuZEVycm9yJyxcbiAgICBub3RSZWFkYWJsZUVycm9yOiAnTm90UmVhZGFibGVFcnJvcicsXG4gICAgb3ZlcmNvbnN0cmFpbmVkRXJyb3I6ICdPdmVyY29uc3RyYWluZWRFcnJvcicsXG4gICAgc2VjdXJpdHlFcnJvcjogJ1NlY3VyaXR5RXJyb3InLFxuICAgIHR5cGVFcnJvcjogJ1R5cGVFcnJvcicsXG59O1xuXG5leHBvcnQgeyBERVZJQ0VTX0VSUk9SX1RZUEVTIH07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/modules/settings/utils/devicesErrorTypes.js\n");

/***/ }),

/***/ "./src/modules/settings/utils/devicesStatus.js":
/*!*****************************************************!*\
  !*** ./src/modules/settings/utils/devicesStatus.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * @namespace Devices_Status\n *\n * @since v0.1.9\n */\n\n/**\n * @description\n * List of possible statuses for connected devices and browser permissions.\n *\n * @memberOf Devices_Status\n * @author Artem Stepanov <artyom.stepanov@openmedia.co>\n * @version v0.1.9\n * @since v0.1.9\n * @access public\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#exceptions\n *\n * @property {string} PREPARE\n * @property {string} ON\n * @property {string} OFF\n * @property {string} PROMPT\n * @property {string} ABORT\n * @property {string} NOT_ALLOWED\n * @property {string} NOT_FOUND\n * @property {string} NOT_READABLE\n * @property {string} OVERCONSTRAINED\n * @property {string} SECURITY_ERROR\n * @property {string} TYPE_ERROR\n * @property {string} UNKNOWN\n */\nconst DEVICES_STATUS = {\n    PREPARE: 'Prepare',\n    ON: 'Enabled',\n    OFF: 'Disabled',\n    PROMPT: 'Prompt',\n    ABORT: 'AbortError',\n    NOT_ALLOWED: 'NotAllowedError',\n    NOT_FOUND: 'NotFoundError',\n    NOT_READABLE: 'NotReadableError',\n    OVERCONSTRAINED: 'OverconstrainedError',\n    SECURITY_ERROR: 'SecurityError',\n    TYPE_ERROR: 'TypeError',\n    UNKNOWN: 'Unknown',\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DEVICES_STATUS);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9zZXR0aW5ncy91dGlscy9kZXZpY2VzU3RhdHVzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsUUFBUTtBQUN0QixjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsUUFBUTtBQUN0QixjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsUUFBUTtBQUN0QixjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsUUFBUTtBQUN0QixjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpRUFBZSxjQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FzbS1yZWNvcmRlci10ZXN0Ly4vc3JjL21vZHVsZXMvc2V0dGluZ3MvdXRpbHMvZGV2aWNlc1N0YXR1cy5qcz9hYWNhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQG5hbWVzcGFjZSBEZXZpY2VzX1N0YXR1c1xuICpcbiAqIEBzaW5jZSB2MC4xLjlcbiAqL1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICogTGlzdCBvZiBwb3NzaWJsZSBzdGF0dXNlcyBmb3IgY29ubmVjdGVkIGRldmljZXMgYW5kIGJyb3dzZXIgcGVybWlzc2lvbnMuXG4gKlxuICogQG1lbWJlck9mIERldmljZXNfU3RhdHVzXG4gKiBAYXV0aG9yIEFydGVtIFN0ZXBhbm92IDxhcnR5b20uc3RlcGFub3ZAb3Blbm1lZGlhLmNvPlxuICogQHZlcnNpb24gdjAuMS45XG4gKiBAc2luY2UgdjAuMS45XG4gKiBAYWNjZXNzIHB1YmxpY1xuICpcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL01lZGlhRGV2aWNlcy9nZXRVc2VyTWVkaWEjZXhjZXB0aW9uc1xuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBQUkVQQVJFXG4gKiBAcHJvcGVydHkge3N0cmluZ30gT05cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBPRkZcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBQUk9NUFRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBBQk9SVFxuICogQHByb3BlcnR5IHtzdHJpbmd9IE5PVF9BTExPV0VEXG4gKiBAcHJvcGVydHkge3N0cmluZ30gTk9UX0ZPVU5EXG4gKiBAcHJvcGVydHkge3N0cmluZ30gTk9UX1JFQURBQkxFXG4gKiBAcHJvcGVydHkge3N0cmluZ30gT1ZFUkNPTlNUUkFJTkVEXG4gKiBAcHJvcGVydHkge3N0cmluZ30gU0VDVVJJVFlfRVJST1JcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBUWVBFX0VSUk9SXG4gKiBAcHJvcGVydHkge3N0cmluZ30gVU5LTk9XTlxuICovXG5jb25zdCBERVZJQ0VTX1NUQVRVUyA9IHtcbiAgICBQUkVQQVJFOiAnUHJlcGFyZScsXG4gICAgT046ICdFbmFibGVkJyxcbiAgICBPRkY6ICdEaXNhYmxlZCcsXG4gICAgUFJPTVBUOiAnUHJvbXB0JyxcbiAgICBBQk9SVDogJ0Fib3J0RXJyb3InLFxuICAgIE5PVF9BTExPV0VEOiAnTm90QWxsb3dlZEVycm9yJyxcbiAgICBOT1RfRk9VTkQ6ICdOb3RGb3VuZEVycm9yJyxcbiAgICBOT1RfUkVBREFCTEU6ICdOb3RSZWFkYWJsZUVycm9yJyxcbiAgICBPVkVSQ09OU1RSQUlORUQ6ICdPdmVyY29uc3RyYWluZWRFcnJvcicsXG4gICAgU0VDVVJJVFlfRVJST1I6ICdTZWN1cml0eUVycm9yJyxcbiAgICBUWVBFX0VSUk9SOiAnVHlwZUVycm9yJyxcbiAgICBVTktOT1dOOiAnVW5rbm93bicsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBERVZJQ0VTX1NUQVRVUzsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/modules/settings/utils/devicesStatus.js\n");

/***/ }),

/***/ "./src/modules/settings/utils/errorList.js":
/*!*************************************************!*\
  !*** ./src/modules/settings/utils/errorList.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * @namespace Errors\n * @description\n * Collection of errors inside the common module.\n *\n * @since v0.1.1\n */\n\n/**\n * @description\n * List of errors that occur inside common module.\n *\n * @memberOf Errors\n * @author Anton Samanov <anton.samanov@openmedia.co>\n * @version v0.1.0\n * @since v0.1.0\n * @access public\n *\n * @property {string} BROADCAST_TRACK_NOT_FOUND - The broadcast track isn't created yet\n * @property {string} RECORD_TRACK_NOT_FOUND - The record track isn't created yet\n * @property {string} RECORD_QUALITY_BAD -\n * @property {string} NO_INPUT_DEVICE - No input device available\n *\n */\n\nconst ERROR_LIST = {\n    BROADCAST_TRACK_NOT_FOUND: 'broadcast-track-not-found',\n    RECORD_TRACK_NOT_FOUND: 'record-track-not-found',\n    RECORD_QUALITY_BAD: 'record-quality-bad',\n    NO_INPUT_DEVICE: 'no-input-device'\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ERROR_LIST);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9zZXR0aW5ncy91dGlscy9lcnJvckxpc3QuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsUUFBUTtBQUN0QixjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlFQUFlLFVBQVUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YXNtLXJlY29yZGVyLXRlc3QvLi9zcmMvbW9kdWxlcy9zZXR0aW5ncy91dGlscy9lcnJvckxpc3QuanM/N2NmMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBuYW1lc3BhY2UgRXJyb3JzXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbGxlY3Rpb24gb2YgZXJyb3JzIGluc2lkZSB0aGUgY29tbW9uIG1vZHVsZS5cbiAqXG4gKiBAc2luY2UgdjAuMS4xXG4gKi9cblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqIExpc3Qgb2YgZXJyb3JzIHRoYXQgb2NjdXIgaW5zaWRlIGNvbW1vbiBtb2R1bGUuXG4gKlxuICogQG1lbWJlck9mIEVycm9yc1xuICogQGF1dGhvciBBbnRvbiBTYW1hbm92IDxhbnRvbi5zYW1hbm92QG9wZW5tZWRpYS5jbz5cbiAqIEB2ZXJzaW9uIHYwLjEuMFxuICogQHNpbmNlIHYwLjEuMFxuICogQGFjY2VzcyBwdWJsaWNcbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gQlJPQURDQVNUX1RSQUNLX05PVF9GT1VORCAtIFRoZSBicm9hZGNhc3QgdHJhY2sgaXNuJ3QgY3JlYXRlZCB5ZXRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBSRUNPUkRfVFJBQ0tfTk9UX0ZPVU5EIC0gVGhlIHJlY29yZCB0cmFjayBpc24ndCBjcmVhdGVkIHlldFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFJFQ09SRF9RVUFMSVRZX0JBRCAtXG4gKiBAcHJvcGVydHkge3N0cmluZ30gTk9fSU5QVVRfREVWSUNFIC0gTm8gaW5wdXQgZGV2aWNlIGF2YWlsYWJsZVxuICpcbiAqL1xuXG5jb25zdCBFUlJPUl9MSVNUID0ge1xuICAgIEJST0FEQ0FTVF9UUkFDS19OT1RfRk9VTkQ6ICdicm9hZGNhc3QtdHJhY2stbm90LWZvdW5kJyxcbiAgICBSRUNPUkRfVFJBQ0tfTk9UX0ZPVU5EOiAncmVjb3JkLXRyYWNrLW5vdC1mb3VuZCcsXG4gICAgUkVDT1JEX1FVQUxJVFlfQkFEOiAncmVjb3JkLXF1YWxpdHktYmFkJyxcbiAgICBOT19JTlBVVF9ERVZJQ0U6ICduby1pbnB1dC1kZXZpY2UnXG59O1xuXG5leHBvcnQgZGVmYXVsdCBFUlJPUl9MSVNUOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/modules/settings/utils/errorList.js\n");

/***/ }),

/***/ "./src/modules/settings/utils/eventsList.js":
/*!**************************************************!*\
  !*** ./src/modules/settings/utils/eventsList.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * @namespace EventsList\n * @description\n * Collection of events inside the module. To subscribe to selected events, use the \"on\" method from the \"useBroadcast\" hook.\n * To unsubscribe from an event, use the \"off\" method from the \"useBroadcast\" hook.\n *\n * @since v0.1.0\n */\n\n/**\n * @description\n * List of events that occur inside agora sdk.\n *\n * @memberOf EventsList\n * @author Anton Samanov <anton.samanov@openmedia.co>\n * @version v0.1.4\n * @since v0.1.0-alpha\n * @access public\n *\n * @property {string} VOLUME_CHANGE - The moment when a remote user joins a video conference\n * @property {string} CHANGE_OPTIMIZATION_MODE - The moment when a remote user publishes his media data (video or audio)\n * @property {string} BROADCAST_QUALITY_CHANGE - Event of changing the selected quality for online communication\n * @property {string} BROADCAST_MUTE_STATUS_CHANGE - Video Mute Change Event for online communication\n * @property {string} BROADCAST_ENABLE_CHANGE - Stream activity change event for online communication\n * @property {string} BROADCAST_TRACK_CHANGED -\n * @property {string} RECORD_QUALITY_CHANGE - Event of changing the selected quality for video recording\n * @property {string} RECORD_MUTE_STATUS_CHANGE - Video Mute Change Event for record\n * @property {string} RECORD_ENABLE_CHANGE - Stream activity change event for record\n * @property {string} RECORD_TRACK_CHANGED -\n * @property {string} RECORD_UPLOAD_MODE_CHANGED -\n * @property {string} DEVICE_INPUT_CHANGE - The selected input device has changed\n * @property {string} DEVICE_INPUT_STATUS_CHANGE -\n * @property {string} DEVICE_OUTPUT_CHANGE - The selected output device has changed\n * @property {string} DEVICE_OUTPUT_STATUS_CHANGE -\n * @property {string} DEVICES_INPUT_LIST_CHANGE - The list of available input devices has changed\n * @property {string} DEVICES_OUTPUT_LIST_CHANGE - The list of available output devices has changed\n * @property {string} DEVICES_ACTIVE_DEVICE_DISCONNECTED - Occurs when the active device disconnected and user doesn't have another\n *\n */\nconst EVENTS_LIST = {\n    VOLUME_CHANGE: 'volume-changed',\n    CHANGE_OPTIMIZATION_MODE: 'change-optimization-mode',\n    BROADCAST_QUALITY_CHANGE: 'broadcast-quality-change',\n    BROADCAST_ENABLE_CHANGE: 'broadcast-enable-change',\n    BROADCAST_MUTE_STATUS_CHANGE: 'broadcast-mute-status-change',\n    BROADCAST_TRACK_CHANGED: 'broadcast-track-changed',\n    RECORD_QUALITY_CHANGE: 'record-quality-change',\n    RECORD_MUTE_STATUS_CHANGE: 'record-mute-status-change',\n    RECORD_ENABLE_CHANGE: 'record-enable-change',\n    RECORD_TRACK_CHANGED: 'record-track-changed',\n    RECORD_UPLOAD_MODE_CHANGED: 'record-upload-mode-changed',\n    DEVICE_INPUT_CHANGE: 'input-device-change',\n    DEVICE_INPUT_STATUS_CHANGE: 'device-input-status-change',\n    DEVICE_OUTPUT_CHANGE: 'output-device-change',\n    DEVICE_OUTPUT_STATUS_CHANGE: 'device-output-status-change',\n    DEVICES_INPUT_LIST_CHANGE: 'devices-input-list-change',\n    DEVICES_OUTPUT_LIST_CHANGE: 'devices-output-list-change',\n    DEVICES_ACTIVE_DEVICE_DISCONNECTED: 'devices-active-device-disconnected',\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EVENTS_LIST);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9zZXR0aW5ncy91dGlscy9ldmVudHNMaXN0LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsUUFBUTtBQUN0QixjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsUUFBUTtBQUN0QixjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsUUFBUTtBQUN0QixjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsUUFBUTtBQUN0QixjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsUUFBUTtBQUN0QixjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsUUFBUTtBQUN0QixjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUVBQWUsV0FBVyIsInNvdXJjZXMiOlsid2VicGFjazovL3dhc20tcmVjb3JkZXItdGVzdC8uL3NyYy9tb2R1bGVzL3NldHRpbmdzL3V0aWxzL2V2ZW50c0xpc3QuanM/ODE3MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBuYW1lc3BhY2UgRXZlbnRzTGlzdFxuICogQGRlc2NyaXB0aW9uXG4gKiBDb2xsZWN0aW9uIG9mIGV2ZW50cyBpbnNpZGUgdGhlIG1vZHVsZS4gVG8gc3Vic2NyaWJlIHRvIHNlbGVjdGVkIGV2ZW50cywgdXNlIHRoZSBcIm9uXCIgbWV0aG9kIGZyb20gdGhlIFwidXNlQnJvYWRjYXN0XCIgaG9vay5cbiAqIFRvIHVuc3Vic2NyaWJlIGZyb20gYW4gZXZlbnQsIHVzZSB0aGUgXCJvZmZcIiBtZXRob2QgZnJvbSB0aGUgXCJ1c2VCcm9hZGNhc3RcIiBob29rLlxuICpcbiAqIEBzaW5jZSB2MC4xLjBcbiAqL1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICogTGlzdCBvZiBldmVudHMgdGhhdCBvY2N1ciBpbnNpZGUgYWdvcmEgc2RrLlxuICpcbiAqIEBtZW1iZXJPZiBFdmVudHNMaXN0XG4gKiBAYXV0aG9yIEFudG9uIFNhbWFub3YgPGFudG9uLnNhbWFub3ZAb3Blbm1lZGlhLmNvPlxuICogQHZlcnNpb24gdjAuMS40XG4gKiBAc2luY2UgdjAuMS4wLWFscGhhXG4gKiBAYWNjZXNzIHB1YmxpY1xuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBWT0xVTUVfQ0hBTkdFIC0gVGhlIG1vbWVudCB3aGVuIGEgcmVtb3RlIHVzZXIgam9pbnMgYSB2aWRlbyBjb25mZXJlbmNlXG4gKiBAcHJvcGVydHkge3N0cmluZ30gQ0hBTkdFX09QVElNSVpBVElPTl9NT0RFIC0gVGhlIG1vbWVudCB3aGVuIGEgcmVtb3RlIHVzZXIgcHVibGlzaGVzIGhpcyBtZWRpYSBkYXRhICh2aWRlbyBvciBhdWRpbylcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBCUk9BRENBU1RfUVVBTElUWV9DSEFOR0UgLSBFdmVudCBvZiBjaGFuZ2luZyB0aGUgc2VsZWN0ZWQgcXVhbGl0eSBmb3Igb25saW5lIGNvbW11bmljYXRpb25cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBCUk9BRENBU1RfTVVURV9TVEFUVVNfQ0hBTkdFIC0gVmlkZW8gTXV0ZSBDaGFuZ2UgRXZlbnQgZm9yIG9ubGluZSBjb21tdW5pY2F0aW9uXG4gKiBAcHJvcGVydHkge3N0cmluZ30gQlJPQURDQVNUX0VOQUJMRV9DSEFOR0UgLSBTdHJlYW0gYWN0aXZpdHkgY2hhbmdlIGV2ZW50IGZvciBvbmxpbmUgY29tbXVuaWNhdGlvblxuICogQHByb3BlcnR5IHtzdHJpbmd9IEJST0FEQ0FTVF9UUkFDS19DSEFOR0VEIC1cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBSRUNPUkRfUVVBTElUWV9DSEFOR0UgLSBFdmVudCBvZiBjaGFuZ2luZyB0aGUgc2VsZWN0ZWQgcXVhbGl0eSBmb3IgdmlkZW8gcmVjb3JkaW5nXG4gKiBAcHJvcGVydHkge3N0cmluZ30gUkVDT1JEX01VVEVfU1RBVFVTX0NIQU5HRSAtIFZpZGVvIE11dGUgQ2hhbmdlIEV2ZW50IGZvciByZWNvcmRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBSRUNPUkRfRU5BQkxFX0NIQU5HRSAtIFN0cmVhbSBhY3Rpdml0eSBjaGFuZ2UgZXZlbnQgZm9yIHJlY29yZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFJFQ09SRF9UUkFDS19DSEFOR0VEIC1cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBSRUNPUkRfVVBMT0FEX01PREVfQ0hBTkdFRCAtXG4gKiBAcHJvcGVydHkge3N0cmluZ30gREVWSUNFX0lOUFVUX0NIQU5HRSAtIFRoZSBzZWxlY3RlZCBpbnB1dCBkZXZpY2UgaGFzIGNoYW5nZWRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBERVZJQ0VfSU5QVVRfU1RBVFVTX0NIQU5HRSAtXG4gKiBAcHJvcGVydHkge3N0cmluZ30gREVWSUNFX09VVFBVVF9DSEFOR0UgLSBUaGUgc2VsZWN0ZWQgb3V0cHV0IGRldmljZSBoYXMgY2hhbmdlZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IERFVklDRV9PVVRQVVRfU1RBVFVTX0NIQU5HRSAtXG4gKiBAcHJvcGVydHkge3N0cmluZ30gREVWSUNFU19JTlBVVF9MSVNUX0NIQU5HRSAtIFRoZSBsaXN0IG9mIGF2YWlsYWJsZSBpbnB1dCBkZXZpY2VzIGhhcyBjaGFuZ2VkXG4gKiBAcHJvcGVydHkge3N0cmluZ30gREVWSUNFU19PVVRQVVRfTElTVF9DSEFOR0UgLSBUaGUgbGlzdCBvZiBhdmFpbGFibGUgb3V0cHV0IGRldmljZXMgaGFzIGNoYW5nZWRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBERVZJQ0VTX0FDVElWRV9ERVZJQ0VfRElTQ09OTkVDVEVEIC0gT2NjdXJzIHdoZW4gdGhlIGFjdGl2ZSBkZXZpY2UgZGlzY29ubmVjdGVkIGFuZCB1c2VyIGRvZXNuJ3QgaGF2ZSBhbm90aGVyXG4gKlxuICovXG5jb25zdCBFVkVOVFNfTElTVCA9IHtcbiAgICBWT0xVTUVfQ0hBTkdFOiAndm9sdW1lLWNoYW5nZWQnLFxuICAgIENIQU5HRV9PUFRJTUlaQVRJT05fTU9ERTogJ2NoYW5nZS1vcHRpbWl6YXRpb24tbW9kZScsXG4gICAgQlJPQURDQVNUX1FVQUxJVFlfQ0hBTkdFOiAnYnJvYWRjYXN0LXF1YWxpdHktY2hhbmdlJyxcbiAgICBCUk9BRENBU1RfRU5BQkxFX0NIQU5HRTogJ2Jyb2FkY2FzdC1lbmFibGUtY2hhbmdlJyxcbiAgICBCUk9BRENBU1RfTVVURV9TVEFUVVNfQ0hBTkdFOiAnYnJvYWRjYXN0LW11dGUtc3RhdHVzLWNoYW5nZScsXG4gICAgQlJPQURDQVNUX1RSQUNLX0NIQU5HRUQ6ICdicm9hZGNhc3QtdHJhY2stY2hhbmdlZCcsXG4gICAgUkVDT1JEX1FVQUxJVFlfQ0hBTkdFOiAncmVjb3JkLXF1YWxpdHktY2hhbmdlJyxcbiAgICBSRUNPUkRfTVVURV9TVEFUVVNfQ0hBTkdFOiAncmVjb3JkLW11dGUtc3RhdHVzLWNoYW5nZScsXG4gICAgUkVDT1JEX0VOQUJMRV9DSEFOR0U6ICdyZWNvcmQtZW5hYmxlLWNoYW5nZScsXG4gICAgUkVDT1JEX1RSQUNLX0NIQU5HRUQ6ICdyZWNvcmQtdHJhY2stY2hhbmdlZCcsXG4gICAgUkVDT1JEX1VQTE9BRF9NT0RFX0NIQU5HRUQ6ICdyZWNvcmQtdXBsb2FkLW1vZGUtY2hhbmdlZCcsXG4gICAgREVWSUNFX0lOUFVUX0NIQU5HRTogJ2lucHV0LWRldmljZS1jaGFuZ2UnLFxuICAgIERFVklDRV9JTlBVVF9TVEFUVVNfQ0hBTkdFOiAnZGV2aWNlLWlucHV0LXN0YXR1cy1jaGFuZ2UnLFxuICAgIERFVklDRV9PVVRQVVRfQ0hBTkdFOiAnb3V0cHV0LWRldmljZS1jaGFuZ2UnLFxuICAgIERFVklDRV9PVVRQVVRfU1RBVFVTX0NIQU5HRTogJ2RldmljZS1vdXRwdXQtc3RhdHVzLWNoYW5nZScsXG4gICAgREVWSUNFU19JTlBVVF9MSVNUX0NIQU5HRTogJ2RldmljZXMtaW5wdXQtbGlzdC1jaGFuZ2UnLFxuICAgIERFVklDRVNfT1VUUFVUX0xJU1RfQ0hBTkdFOiAnZGV2aWNlcy1vdXRwdXQtbGlzdC1jaGFuZ2UnLFxuICAgIERFVklDRVNfQUNUSVZFX0RFVklDRV9ESVNDT05ORUNURUQ6ICdkZXZpY2VzLWFjdGl2ZS1kZXZpY2UtZGlzY29ubmVjdGVkJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEVWRU5UU19MSVNUOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/modules/settings/utils/eventsList.js\n");

/***/ }),

/***/ "./src/modules/settings/utils/getConstraintsQuality.js":
/*!*************************************************************!*\
  !*** ./src/modules/settings/utils/getConstraintsQuality.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getConstraints\": () => (/* binding */ getConstraints),\n/* harmony export */   \"getConstraintsQuality\": () => (/* binding */ getConstraintsQuality)\n/* harmony export */ });\n/* harmony import */ var _settingsNames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./settingsNames */ \"./src/modules/settings/utils/settingsNames.js\");\n/* harmony import */ var _modules_settings_utils_qualityPresets__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @modules/settings/utils/qualityPresets */ \"./src/modules/settings/utils/qualityPresets.js\");\n\n\n\n\nfunction getConstraintsQuality(mediaType, quality) {\n    return mediaType === _settingsNames__WEBPACK_IMPORTED_MODULE_0__[\"default\"].VIDEO_TYPE\n        ? _modules_settings_utils_qualityPresets__WEBPACK_IMPORTED_MODULE_1__.QualityRecordVideoPresets[quality] : _modules_settings_utils_qualityPresets__WEBPACK_IMPORTED_MODULE_1__.QualityRecordAudioPresets[quality];\n}\n\nconst RATIO_16d9 = 1.7777777777777777;\nconst STANDARD_HEIGHTS = [360, 720, 1080, 1440, 2160, 2880, 4320, 8640];\nconst STANDARD_FRAME_RATE = 30;\n\nasync function getConstraints(track, maxConstrains) {\n    const {height} = maxConstrains;\n    const frameRate = STANDARD_FRAME_RATE;\n    const reducedHeights = STANDARD_HEIGHTS.reduce((arr, i) => {\n        if (i <= height) {\n            arr.push(i);\n        }\n        return arr;\n    }, []);\n\n    const constrains = reducedHeights.reduce(async (pr, curHeight) => {\n        const arr = await pr;\n        try {\n            const curWidth = curHeight * RATIO_16d9;\n            await track.applyConstraints({width: curWidth, curHeight, frameRate});\n            arr.push({width: curWidth, height: curHeight, frameRate});\n            // eslint-disable-next-line no-empty\n        } catch (e) {}\n        return arr;\n    }, Promise.resolve([]));\n\n    return constrains;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9zZXR0aW5ncy91dGlscy9nZXRDb25zdHJhaW50c1F1YWxpdHkuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE2QztBQUlHOzs7QUFHaEQ7QUFDQSx5QkFBeUIsaUVBQXlCO0FBQ2xELFVBQVUsNkZBQXFCLFlBQVksNkZBQXFCO0FBQ2hFOztBQUVBO0FBQ0E7QUFDQTs7QUFFTztBQUNQLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHNDQUFzQztBQUNoRixzQkFBc0IsOENBQThDO0FBQ3BFO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dhc20tcmVjb3JkZXItdGVzdC8uL3NyYy9tb2R1bGVzL3NldHRpbmdzL3V0aWxzL2dldENvbnN0cmFpbnRzUXVhbGl0eS5qcz8wMTdmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTRVRUSU5HU19OQU1FUyBmcm9tIFwiLi9zZXR0aW5nc05hbWVzXCI7XG5pbXBvcnQge1xuICAgIFF1YWxpdHlSZWNvcmRBdWRpb1ByZXNldHMgYXMgUVVBTElUWV9BVURJT19QUkVTRVRTLFxuICAgIFF1YWxpdHlSZWNvcmRWaWRlb1ByZXNldHMgYXMgUVVBTElUWV9WSURFT19QUkVTRVRTXG59IGZyb20gXCJAbW9kdWxlcy9zZXR0aW5ncy91dGlscy9xdWFsaXR5UHJlc2V0c1wiO1xuXG5cbmZ1bmN0aW9uIGdldENvbnN0cmFpbnRzUXVhbGl0eShtZWRpYVR5cGUsIHF1YWxpdHkpIHtcbiAgICByZXR1cm4gbWVkaWFUeXBlID09PSBTRVRUSU5HU19OQU1FUy5WSURFT19UWVBFXG4gICAgICAgID8gUVVBTElUWV9WSURFT19QUkVTRVRTW3F1YWxpdHldIDogUVVBTElUWV9BVURJT19QUkVTRVRTW3F1YWxpdHldO1xufVxuXG5jb25zdCBSQVRJT18xNmQ5ID0gMS43Nzc3Nzc3Nzc3Nzc3Nzc3O1xuY29uc3QgU1RBTkRBUkRfSEVJR0hUUyA9IFszNjAsIDcyMCwgMTA4MCwgMTQ0MCwgMjE2MCwgMjg4MCwgNDMyMCwgODY0MF07XG5jb25zdCBTVEFOREFSRF9GUkFNRV9SQVRFID0gMzA7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDb25zdHJhaW50cyh0cmFjaywgbWF4Q29uc3RyYWlucykge1xuICAgIGNvbnN0IHtoZWlnaHR9ID0gbWF4Q29uc3RyYWlucztcbiAgICBjb25zdCBmcmFtZVJhdGUgPSBTVEFOREFSRF9GUkFNRV9SQVRFO1xuICAgIGNvbnN0IHJlZHVjZWRIZWlnaHRzID0gU1RBTkRBUkRfSEVJR0hUUy5yZWR1Y2UoKGFyciwgaSkgPT4ge1xuICAgICAgICBpZiAoaSA8PSBoZWlnaHQpIHtcbiAgICAgICAgICAgIGFyci5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgfSwgW10pO1xuXG4gICAgY29uc3QgY29uc3RyYWlucyA9IHJlZHVjZWRIZWlnaHRzLnJlZHVjZShhc3luYyAocHIsIGN1ckhlaWdodCkgPT4ge1xuICAgICAgICBjb25zdCBhcnIgPSBhd2FpdCBwcjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGN1cldpZHRoID0gY3VySGVpZ2h0ICogUkFUSU9fMTZkOTtcbiAgICAgICAgICAgIGF3YWl0IHRyYWNrLmFwcGx5Q29uc3RyYWludHMoe3dpZHRoOiBjdXJXaWR0aCwgY3VySGVpZ2h0LCBmcmFtZVJhdGV9KTtcbiAgICAgICAgICAgIGFyci5wdXNoKHt3aWR0aDogY3VyV2lkdGgsIGhlaWdodDogY3VySGVpZ2h0LCBmcmFtZVJhdGV9KTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICByZXR1cm4gYXJyO1xuICAgIH0sIFByb21pc2UucmVzb2x2ZShbXSkpO1xuXG4gICAgcmV0dXJuIGNvbnN0cmFpbnM7XG59XG5cbmV4cG9ydCB7IGdldENvbnN0cmFpbnRzUXVhbGl0eSB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/modules/settings/utils/getConstraintsQuality.js\n");

/***/ }),

/***/ "./src/modules/settings/utils/index.js":
/*!*********************************************!*\
  !*** ./src/modules/settings/utils/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"existEvent\": () => (/* binding */ existEvent)\n/* harmony export */ });\n/* harmony import */ var _eventsList__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./eventsList */ \"./src/modules/settings/utils/eventsList.js\");\n\n\n/**\n * @namespace Utils\n *\n * @description\n * Common functions and methods to help work inside react components and hooks\n * @since v0.1.0-alpha.3\n */\n\n/**\n * @description\n * Determines if a given event exists in the SDK\n *\n * @memberOf Utils\n * @author Artem Stepanov <artyom.stepanov@openmedia.co>\n * @version v0.1.0-alpha.3\n * @since v0.1.0-alpha.3\n * @access package\n *\n * @param {String} [event=''] - Event name\n * @return {boolean} If the event exists, it will return true\n */\nconst\n    existEvent = (event='') => !!Object.values(_eventsList__WEBPACK_IMPORTED_MODULE_0__[\"default\"]).find(eventName => eventName === event);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9zZXR0aW5ncy91dGlscy9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF1Qzs7QUFFdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQSwrQ0FBK0MsbURBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YXNtLXJlY29yZGVyLXRlc3QvLi9zcmMvbW9kdWxlcy9zZXR0aW5ncy91dGlscy9pbmRleC5qcz8wZTZlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFVkVOVFNfTElTVCBmcm9tIFwiLi9ldmVudHNMaXN0XCI7XG5cbi8qKlxuICogQG5hbWVzcGFjZSBVdGlsc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29tbW9uIGZ1bmN0aW9ucyBhbmQgbWV0aG9kcyB0byBoZWxwIHdvcmsgaW5zaWRlIHJlYWN0IGNvbXBvbmVudHMgYW5kIGhvb2tzXG4gKiBAc2luY2UgdjAuMS4wLWFscGhhLjNcbiAqL1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIGdpdmVuIGV2ZW50IGV4aXN0cyBpbiB0aGUgU0RLXG4gKlxuICogQG1lbWJlck9mIFV0aWxzXG4gKiBAYXV0aG9yIEFydGVtIFN0ZXBhbm92IDxhcnR5b20uc3RlcGFub3ZAb3Blbm1lZGlhLmNvPlxuICogQHZlcnNpb24gdjAuMS4wLWFscGhhLjNcbiAqIEBzaW5jZSB2MC4xLjAtYWxwaGEuM1xuICogQGFjY2VzcyBwYWNrYWdlXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IFtldmVudD0nJ10gLSBFdmVudCBuYW1lXG4gKiBAcmV0dXJuIHtib29sZWFufSBJZiB0aGUgZXZlbnQgZXhpc3RzLCBpdCB3aWxsIHJldHVybiB0cnVlXG4gKi9cbmNvbnN0XG4gICAgZXhpc3RFdmVudCA9IChldmVudD0nJykgPT4gISFPYmplY3QudmFsdWVzKEVWRU5UU19MSVNUKS5maW5kKGV2ZW50TmFtZSA9PiBldmVudE5hbWUgPT09IGV2ZW50KTtcblxuZXhwb3J0IHtleGlzdEV2ZW50fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/modules/settings/utils/index.js\n");

/***/ }),

/***/ "./src/modules/settings/utils/qualityPresets.js":
/*!******************************************************!*\
  !*** ./src/modules/settings/utils/qualityPresets.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"QualityAudioPresets\": () => (/* binding */ QualityAudioPresets),\n/* harmony export */   \"QualityRecordAudioPresets\": () => (/* binding */ QualityRecordAudioPresets),\n/* harmony export */   \"QualityRecordVideoPresets\": () => (/* binding */ QualityRecordVideoPresets),\n/* harmony export */   \"QualityScreenPresets\": () => (/* binding */ QualityScreenPresets),\n/* harmony export */   \"QualityVideoPresets\": () => (/* binding */ QualityVideoPresets)\n/* harmony export */ });\n/**\n * @namespace QualityPresets\n *\n * @author Anton Samanov <anton.samanov@openmedia.co>\n * @version v0.1.0-alpha\n * @since v0.1.0-alpha\n * @access public\n *\n */\n\n/**\n * @memberOf QualityPresets\n *\n * @author Anton Samanov <anton.samanov@openmedia.co>\n * @version v0.1.0-alpha\n * @since v0.1.0-alpha\n *\n * @property {string} 120p - 160 × 120; 15 fps; bitrate 65 Kbps\n * @property {string} 120p_1 - 160 × 120; 15 fps; bitrate 65 Kbps\n * @property {string} 120p_3 - 120 × 120; 15 fps; bitrate 50 Kbps\n * @property {string} 180p - 320 × 180; 15 fps; bitrate 140 Kbps\n * @property {string} 180p_1 - 320 × 180; 15 fps; bitrate 140 Kbps\n * @property {string} 180p_3 - 180 × 180; 15 fps; bitrate 100 Kbps\n * @property {string} 180p_4 - 240 × 180; 15 fps; bitrate 120 Kbps\n * @property {string} 240p - 320 × 240; 15 fps; bitrate 200 Kbps\n * @property {string} 240p_1 - 320 × 240; 15 fps; bitrate 200 Kbps\n * @property {string} 240p_3 - 240 × 240; 15 fps; bitrate 140 Kbps\n * @property {string} 240p_4 - 424 × 240; 15 fps; bitrate 220 Kbps\n * @property {string} 360p - 640 × 360; 15 fps; bitrate 400 Kbps\n * @property {string} 360p_1 - 640 × 360; 15 fps; bitrate 400 Kbps\n * @property {string} 360p_3 - 360 × 360; 15 fps; bitrate 260 Kbps\n * @property {string} 360p_4 - 640 × 360; 30 fps; bitrate 600 Kbps\n * @property {string} 360p_6 - 360 × 360; 30 fps; bitrate 400 Kbps\n * @property {string} 360p_7 - 480 × 360; 15 fps; bitrate 320 Kbps\n * @property {string} 360p_8 - 480 × 360; 30 fps; bitrate 490 Kbps\n * @property {string} 360p_9 - 640 × 360; 15 fps; bitrate 800 Kbps\n * @property {string} 360p_10 - 640 × 360; 24 fps; bitrate 800 Kbps\n * @property {string} 360p_11 - 640 × 360; 24 fps; bitrate 1000 Kbps\n * @property {string} 480p - 640 × 480; 15 fps; bitrate 500 Kbps\n * @property {string} 480p_1 - 640 × 480; 15 fps; bitrate 500 Kbps\n * @property {string} 480p_2 - 640 × 480; 30 fps; bitrate 1000 Kbps\n * @property {string} 480p_3 - 480 × 480; 15 fps; bitrate 400 Kbps\n * @property {string} 480p_4 - 640 × 480; 30 fps; bitrate 750 Kbps\n * @property {string} 480p_6 - 480 × 480; 30 fps; bitrate 600 Kbps\n * @property {string} 480p_8 - 848 × 480; 15 fps; bitrate 610 Kbps\n * @property {string} 480p_9 - 848 × 480; 30 fps; bitrate 930 Kbps\n * @property {string} 480p_10 - 640 × 480; 10 fps; bitrate 400 Kbps\n * @property {string} 720p - 1280 × 720; 15 fps; bitrate 1130 Kbps\n * @property {string} 720p_1 - 1280 × 720; 15 fps; bitrate 1130 Kbps\n * @property {string} 720p_2 - 1280 × 720; 30 fps; bitrate 2000 Kbps\n * @property {string} 720p_3 - 1280 × 720; 30 fps; bitrate 1710 Kbps\n * @property {string} 720p_5 - 960 × 720; 15 fps; bitrate 910 Kbps\n * @property {string} 720p_6 - 960 × 720; 30 fps; bitrate 1380 Kbps\n * @property {string} 1080p - 1920 × 1080; 15 fps; bitrate 2080 Kbps\n * @property {string} 1080p_1 - 1920 × 1080; 15 fps; bitrate 2080 Kbps\n * @property {string} 1080p_2 - 1920 × 1080; 30 fps; bitrate 3000 Kbps\n * @property {string} 1080p_3 - 1920 × 1080; 30 fps; bitrate 3150 Kbps\n * @property {string} 1080p_5 - 1920 × 1080; 60 fps; bitrate 4780 Kbps\n */\nconst QualityVideoPresets = {\n    '120p': '120p',\n    '120p_1': '120p_1',\n    '120p_3': '120p_3',\n    '180p': '180p',\n    '180p_1': '180p_1',\n    '180p_3': '180p_3',\n    '180p_4': '180p_4',\n    '240p': '240p',\n    '240p_1': '240p_1',\n    '240p_3': '240p_3',\n    '240p_4': '240p_4',\n    '360p': '360p',\n    '360p_1': '360p_1',\n    '360p_3': '360p_3',\n    '360p_4': '360p_4',\n    '360p_6': '360p_6',\n    '360p_7': '360p_7',\n    '360p_8': '360p_8',\n    '360p_9': '360p_9',\n    '360p_10': '360p_10',\n    '360p_11': '360p_11',\n    '480p': '480p',\n    '480p_1': '480p_1',\n    '480p_2': '480p_2',\n    '480p_3': '480p_3',\n    '480p_4': '480p_4',\n    '480p_6': '480p_6',\n    '480p_8': '480p_8',\n    '480p_9': '480p_9',\n    '480p_10': '480p_10',\n    '720p': '720p',\n    '720p_1': '720p_1',\n    '720p_2': '720p_2',\n    '720p_3': '720p_3',\n    '720p_5': '720p_5',\n    '720p_6': '720p_6',\n    '1080p': '1080p',\n    '1080p_1': '1080p_1',\n    '1080p_2': '1080p_2',\n    '1080p_3': '1080p_3',\n    '1080p_5': '1080p_5',\n};\n\n/**\n * @memberOf QualityPresets\n *\n * @author Anton Samanov <anton.samanov@openmedia.co>\n * @version v0.1.0-alpha\n * @since v0.1.0-alpha\n *\n * @property {string} speech_low_quality - Sample rate 16 kHz, mono, encoding rate 24 Kbps\n * @property {string} speech_standard - Sample rate 32 kHz, mono, encoding rate 24 Kbps\n * @property {string} music_standard - Sample rate 48 kHz, mono, encoding rate 40 Kbps\n * @property {string} standard_stereo - Sample rate 48 kHz, stereo, encoding rate 64 Kbps\n * @property {string} high_quality - Sample rate 48 kHz, mono, encoding rate 128 Kbps\n * @property {string} high_quality_stereo - Sample rate 48 kHz, stereo, encoding rate 192 Kbps\n */\nconst QualityAudioPresets = {\n    'speech_low_quality': 'speech_low_quality',\n    'speech_standard': 'speech_standard',\n    'music_standard': 'music_standard',\n    'standard_stereo': 'standard_stereo',\n    'high_quality': 'high_quality',\n    'high_quality_stereo': 'high_quality_stereo',\n};\n\n/**\n * @description\n * Quality presets for screen recording\n *\n * @memberOf QualityPresets\n *\n * @author Anton Samanov <anton.samanov@openmedia.co>\n * @version v0.1.0-alpha\n * @since v0.1.0-alpha\n *\n * @property {string} 480p - 640 × 480; 5 fps\n * @property {string} 480p_1 - 640 × 480; 5 fps\n * @property {string} 480p_2 - 640 × 480; 30 fps\n * @property {string} 480p_3 - 640 × 480; 15 fps\n * @property {string} 720p - 1280 × 720; 5 fps\n * @property {string} 720p_1 - 1280 × 720; 5 fps\n * @property {string} 720p_2 - 1280 × 720; 30 fps\n * @property {string} 720p_3 - 1280 × 720; 15 fps\n * @property {string} 1080p - 1920 × 1080; 5 fps\n * @property {string} 1080p_1 - 1920 × 1080; 5 fps\n * @property {string} 1080p_2 - 1920 × 1080; 30 fps\n * @property {string} 1080p_3 - 1920 × 1080; 15 fps\n */\nconst QualityScreenPresets = {\n    '480p': '480p',\n    '480p_1': '480p_1',\n    '480p_2': '480p_2',\n    '480p_3': '480p_3',\n    '720p': '720p',\n    '720p_1': '720p_1',\n    '720p_2': '720p_2',\n    '720p_3': '720p_3',\n    '1080p': '1080p',\n    '1080p_1': '1080p_1',\n    '1080p_2': '1080p_2',\n    '1080p_3': '1080p_3',\n};\n\n/**\n * @description\n * Quality presets for video recording\n *\n * @memberOf QualityPresets\n *\n * @author Anton Samanov <anton.samanov@openmedia.co>\n * @version v0.1.0-alpha\n * @since v0.1.0-alpha\n *\n * @property {string} 480p - 640 × 480; 15 fps\n * @property {string} 480p_1 - 640 × 480; 15 fps\n * @property {string} 480p_2 - 640 × 480; 30 fps\n * @property {string} 480p_3 - 480 × 480; 15 fps\n * @property {string} 480p_4 - 480 × 480; 30 fps\n * @property {string} 720p - 1280 × 720; 15 fps\n * @property {string} 720p_1 - 1280 × 720; 15 fps\n * @property {string} 720p_2 - 1280 × 720; 30 fps\n * @property {string} 720p_3 - 960 × 720; 15 fps\n * @property {string} 720p_4 - 960 × 720; 30 fps\n * @property {string} 1080p - 1920 × 1080; 15 fps\n * @property {string} 1080p_1 - 1920 × 1080; 15 fps\n * @property {string} 1080p_2 - 1920 × 1080; 30 fps\n * @property {string} 1080p_3 - 1920 × 1080; 60 fps\n * @property {string} 4k_1 - 3840 × 2160; 15 fps\n * @property {string} 4k_2 - 3840 × 2160; 30 fps\n * @property {string} 4k_3 - 3840 × 2160; 60 fps\n */\nconst QualityRecordVideoPresets = {\n    '480p': {\n        width: { ideal: 640 },\n        height: { ideal: 480 },\n        frameRate: 15\n    },\n    '480p_2': {\n        width: { ideal: 640 },\n        height: { ideal: 480 },\n        frameRate: 30\n    },\n    '720p': {\n        width: { ideal: 1280 },\n        height: { ideal: 720 },\n        frameRate: 15\n    },\n    '720p_2': {\n        width: { ideal: 1280 },\n        height: { ideal: 720 },\n        frameRate: 30\n    },\n    '1080p': {\n        width: { ideal: 1920 },\n        height: { ideal: 1080 },\n        frameRate: 30\n    },\n    '1080p_2': {\n        width: { ideal: 1920 },\n        height: { ideal: 1080 },\n        frameRate: 60\n    },\n    '4k': {\n        width: { ideal: 3840 },\n        height: { ideal: 2160 },\n        frameRate: 15\n    },\n    '4k_2': {\n        width: { ideal: 3840 },\n        height: { ideal: 2160 },\n        frameRate: 30\n    },\n    '4k_3': {\n        width: { ideal: 3840 },\n        height: { ideal: 2160 },\n        frameRate: 60\n    },\n};\n\n/**\n * @description\n * Quality presets for audio recording\n *\n * @memberOf QualityPresets\n *\n * @author Anton Samanov <anton.samanov@openmedia.co>\n * @version v0.1.0-alpha\n * @since v0.1.0-alpha\n *\n * @property {string} speech_low_quality - Sample rate 16 kHz, mono, encoding rate 24 Kbps\n * @property {string} speech_standard - Sample rate 32 kHz, mono, encoding rate 24 Kbps\n * @property {string} music_standard - Sample rate 48 kHz, mono, encoding rate 40 Kbps\n * @property {string} standard_stereo - Sample rate 48 kHz, stereo, encoding rate 64 Kbps\n * @property {string} high_quality - Sample rate 48 kHz, mono, encoding rate 128 Kbps\n * @property {string} high_quality_stereo - Sample rate 48 kHz, stereo, encoding rate 192 Kbps\n */\n const QualityRecordAudioPresets = {\n    'speech_low_quality': {\n        channelCount: 1,\n        sampleRate: 44.1 * 1000,\n    },\n    'low_quality_stereo': {\n        channelCount: 2,\n        sampleRate: 44.1 * 1000,\n    },\n    'high_quality': {\n        channelCount: 1,\n        sampleRate: 48 * 1000,\n    },\n    'high_quality_stereo': {\n        channelCount: 2,\n        sampleRate: 48 * 1000,\n    },\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/modules/settings/utils/qualityPresets.js\n");

/***/ }),

/***/ "./src/modules/settings/utils/settingsNames.js":
/*!*****************************************************!*\
  !*** ./src/modules/settings/utils/settingsNames.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst\n    SETTINGS_NAMES = {\n        VIDEO_TYPE: \"video\",\n        AUDIO_TYPE: \"audio\",\n        VIDEO_INPUT_TYPE: \"videoinput\",\n        AUDIO_INPUT_TYPE: \"audioinput\",\n        AUDIO_OUTPUT_TYPE: \"audiooutput\",\n        VIDEO_OUTPUT_TYPE: \"videooutput\",\n        INPUT: \"input\",\n        OUTPUT: \"output\",\n        BROADCAST_TYPE: \"broadcast\",\n        RECORD_TYPE: \"record\",\n        OPTIMIZATION_MODE_BALANCED: 'balanced',\n    };\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SETTINGS_NAMES);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9zZXR0aW5ncy91dGlscy9zZXR0aW5nc05hbWVzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlFQUFlLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YXNtLXJlY29yZGVyLXRlc3QvLi9zcmMvbW9kdWxlcy9zZXR0aW5ncy91dGlscy9zZXR0aW5nc05hbWVzLmpzP2YwNjEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3RcbiAgICBTRVRUSU5HU19OQU1FUyA9IHtcbiAgICAgICAgVklERU9fVFlQRTogXCJ2aWRlb1wiLFxuICAgICAgICBBVURJT19UWVBFOiBcImF1ZGlvXCIsXG4gICAgICAgIFZJREVPX0lOUFVUX1RZUEU6IFwidmlkZW9pbnB1dFwiLFxuICAgICAgICBBVURJT19JTlBVVF9UWVBFOiBcImF1ZGlvaW5wdXRcIixcbiAgICAgICAgQVVESU9fT1VUUFVUX1RZUEU6IFwiYXVkaW9vdXRwdXRcIixcbiAgICAgICAgVklERU9fT1VUUFVUX1RZUEU6IFwidmlkZW9vdXRwdXRcIixcbiAgICAgICAgSU5QVVQ6IFwiaW5wdXRcIixcbiAgICAgICAgT1VUUFVUOiBcIm91dHB1dFwiLFxuICAgICAgICBCUk9BRENBU1RfVFlQRTogXCJicm9hZGNhc3RcIixcbiAgICAgICAgUkVDT1JEX1RZUEU6IFwicmVjb3JkXCIsXG4gICAgICAgIE9QVElNSVpBVElPTl9NT0RFX0JBTEFOQ0VEOiAnYmFsYW5jZWQnLFxuICAgIH07XG5cbmV4cG9ydCBkZWZhdWx0IFNFVFRJTkdTX05BTUVTOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/modules/settings/utils/settingsNames.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _arrayLikeToArray)\n/* harmony export */ });\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlMaWtlVG9BcnJheS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWU7QUFDZjs7QUFFQSx5Q0FBeUMsU0FBUztBQUNsRDtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YXNtLXJlY29yZGVyLXRlc3QvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlMaWtlVG9BcnJheS5qcz80ZTdhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykge1xuICAgIGFycjJbaV0gPSBhcnJbaV07XG4gIH1cblxuICByZXR1cm4gYXJyMjtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _arrayWithoutHoles)\n/* harmony export */ });\n/* harmony import */ var _arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayLikeToArray.js */ \"./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(arr);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRob3V0SG9sZXMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUQ7QUFDdEM7QUFDZixpQ0FBaUMsZ0VBQWdCO0FBQ2pEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FzbS1yZWNvcmRlci10ZXN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aG91dEhvbGVzLmpzPzViZmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIi4vYXJyYXlMaWtlVG9BcnJheS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShhcnIpO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/iterableToArray.js":
/*!********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _iterableToArray)\n/* harmony export */ });\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaXRlcmFibGVUb0FycmF5LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBZTtBQUNmO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YXNtLXJlY29yZGVyLXRlc3QvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaXRlcmFibGVUb0FycmF5LmpzP2M2NGUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/iterableToArray.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _nonIterableSpread)\n/* harmony export */ });\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVTcHJlYWQuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFlO0FBQ2Y7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dhc20tcmVjb3JkZXItdGVzdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVNwcmVhZC5qcz80OGUxIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _toConsumableArray)\n/* harmony export */ });\n/* harmony import */ var _arrayWithoutHoles_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayWithoutHoles.js */ \"./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js\");\n/* harmony import */ var _iterableToArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterableToArray.js */ \"./node_modules/@babel/runtime/helpers/esm/iterableToArray.js\");\n/* harmony import */ var _unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./unsupportedIterableToArray.js */ \"./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js\");\n/* harmony import */ var _nonIterableSpread_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nonIterableSpread.js */ \"./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js\");\n\n\n\n\nfunction _toConsumableArray(arr) {\n  return (0,_arrayWithoutHoles_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(arr) || (0,_iterableToArray_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(arr) || (0,_unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(arr) || (0,_nonIterableSpread_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBdUQ7QUFDSjtBQUNzQjtBQUNsQjtBQUN4QztBQUNmLFNBQVMsaUVBQWlCLFNBQVMsK0RBQWUsU0FBUywwRUFBMEIsU0FBUyxpRUFBaUI7QUFDL0ciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YXNtLXJlY29yZGVyLXRlc3QvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkuanM/MTdmMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXJyYXlXaXRob3V0SG9sZXMgZnJvbSBcIi4vYXJyYXlXaXRob3V0SG9sZXMuanNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vaXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCBub25JdGVyYWJsZVNwcmVhZCBmcm9tIFwiLi9ub25JdGVyYWJsZVNwcmVhZC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _unsupportedIterableToArray)\n/* harmony export */ });\n/* harmony import */ var _arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayLikeToArray.js */ \"./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(o, minLen);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUQ7QUFDdEM7QUFDZjtBQUNBLG9DQUFvQyxnRUFBZ0I7QUFDcEQ7QUFDQTtBQUNBO0FBQ0Esc0ZBQXNGLGdFQUFnQjtBQUN0RyIsInNvdXJjZXMiOlsid2VicGFjazovL3dhc20tcmVjb3JkZXItdGVzdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qcz8zNmMzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhcnJheUxpa2VUb0FycmF5IGZyb20gXCIuL2FycmF5TGlrZVRvQXJyYXkuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js\n");

/***/ }),

/***/ "./node_modules/events-om/build/index.es.js":
/*!**************************************************!*\
  !*** ./node_modules/events-om/build/index.es.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ s)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\");\nvar s={init:function(){return this._subscribers=[],this},notify:function(r,s){this._subscribers.forEach((function(t){t.event===r&&t.callback(s)}))},add:function(s,t){this._subscribers.find((function(r){return r.event===s&&r.callback===t}))||(this._subscribers=[].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this._subscribers),[{event:s,callback:t}]))},remove:function(r,s){this._subscribers=this._subscribers.filter((function(t){var i=t.event,e=t.callback;return!(i===r&&e===s)}))}};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXZlbnRzLW9tL2J1aWxkL2luZGV4LmVzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXdELE9BQU8sZ0JBQWdCLGlDQUFpQyxzQkFBc0IsdUNBQXVDLDJCQUEyQixHQUFHLG1CQUFtQixvQ0FBb0MsbUNBQW1DLGlDQUFpQyxvRkFBQyxzQkFBc0IsbUJBQW1CLElBQUksc0JBQXNCLHdEQUF3RCwyQkFBMkIsc0JBQXNCLEtBQTBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FzbS1yZWNvcmRlci10ZXN0Ly4vbm9kZV9tb2R1bGVzL2V2ZW50cy1vbS9idWlsZC9pbmRleC5lcy5qcz9iMTk1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCByIGZyb21cIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXlcIjt2YXIgcz17aW5pdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zdWJzY3JpYmVycz1bXSx0aGlzfSxub3RpZnk6ZnVuY3Rpb24ocixzKXt0aGlzLl9zdWJzY3JpYmVycy5mb3JFYWNoKChmdW5jdGlvbih0KXt0LmV2ZW50PT09ciYmdC5jYWxsYmFjayhzKX0pKX0sYWRkOmZ1bmN0aW9uKHMsdCl7dGhpcy5fc3Vic2NyaWJlcnMuZmluZCgoZnVuY3Rpb24ocil7cmV0dXJuIHIuZXZlbnQ9PT1zJiZyLmNhbGxiYWNrPT09dH0pKXx8KHRoaXMuX3N1YnNjcmliZXJzPVtdLmNvbmNhdChyKHRoaXMuX3N1YnNjcmliZXJzKSxbe2V2ZW50OnMsY2FsbGJhY2s6dH1dKSl9LHJlbW92ZTpmdW5jdGlvbihyLHMpe3RoaXMuX3N1YnNjcmliZXJzPXRoaXMuX3N1YnNjcmliZXJzLmZpbHRlcigoZnVuY3Rpb24odCl7dmFyIGk9dC5ldmVudCxlPXQuY2FsbGJhY2s7cmV0dXJuIShpPT09ciYmZT09PXMpfSkpfX07ZXhwb3J0e3MgYXMgZGVmYXVsdH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/events-om/build/index.es.js\n");

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ var __webpack_exports__ = (__webpack_exec__("./src/index.js"));
/******/ }
]);